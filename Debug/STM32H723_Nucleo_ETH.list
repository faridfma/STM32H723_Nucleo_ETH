
STM32H723_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da0c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002078  0800dcdc  0800dcdc  0001dcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800fd54  0800fd54  0001fd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800fd58  0800fd58  0001fd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  24000000  0800fd5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000150f8  2400008c  0800fde8  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24015184  0800fde8  00025184  2**0
                  ALLOC
  8 .lwip_sec     00000160  30000000  30000000  00030000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 11 .debug_info   00043fb7  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000097cb  00000000  00000000  000640b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e68  00000000  00000000  0006d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000308d  00000000  00000000  0006f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000403d3  00000000  00000000  00072775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00046840  00000000  00000000  000b2b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016b700  00000000  00000000  000f9388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006ec8  00000000  00000000  00264a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001af6b  00000000  00000000  0026b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000097  00000000  00000000  002868bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400008c 	.word	0x2400008c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dcc4 	.word	0x0800dcc4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000090 	.word	0x24000090
 800030c:	0800dcc4 	.word	0x0800dcc4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 80003b0:	be00      	bkpt	0x0000
}
 80003b2:	4770      	bx	lr

080003b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003b8:	b082      	sub	sp, #8
 //   UNLOCK_TCPIP_CORE();
    /* Infinite loop */
    for(;;)
    {

		 HAL_GPIO_TogglePin(GREEN_LED2_CNTRL_GPIO_Port, GREEN_LED2_CNTRL_Pin);
 80003ba:	4f19      	ldr	r7, [pc, #100]	; (8000420 <StartDefaultTask+0x6c>)
  MX_LWIP_Init();
 80003bc:	f002 fcaa 	bl	8002d14 <MX_LWIP_Init>
  LOCK_TCPIP_CORE();
 80003c0:	f002 ffda 	bl	8003378 <sys_lock_tcpip_core>
  IP_ADDR4(&PC_IPADDR, 192, 168, 1, 100);
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <StartDefaultTask+0x70>)
 80003c6:	9301      	str	r3, [sp, #4]
  struct udp_pcb* my_udp = udp_new();
 80003c8:	f00a ff66 	bl	800b298 <udp_new>
  udp_connect(my_udp, &PC_IPADDR, 8);
 80003cc:	2208      	movs	r2, #8
 80003ce:	a901      	add	r1, sp, #4
  struct udp_pcb* my_udp = udp_new();
 80003d0:	4680      	mov	r8, r0
  udp_connect(my_udp, &PC_IPADDR, 8);
 80003d2:	f00a ff19 	bl	800b208 <udp_connect>
  UNLOCK_TCPIP_CORE();
 80003d6:	f003 f84d 	bl	8003474 <sys_unlock_tcpip_core>
		 HAL_GPIO_TogglePin(GREEN_LED2_CNTRL_GPIO_Port, GREEN_LED2_CNTRL_Pin);
 80003da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003de:	4638      	mov	r0, r7
 80003e0:	f001 fd9a 	bl	8001f18 <HAL_GPIO_TogglePin>

		 osDelay(1000);
 80003e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e8:	f003 f916 	bl	8003618 <osDelay>

		  /* !! PBUF_RAM is critical for correct operation !! */
		 udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 80003ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80003f0:	2114      	movs	r1, #20
 80003f2:	2036      	movs	r0, #54	; 0x36
 80003f4:	f006 fda6 	bl	8006f44 <pbuf_alloc>

		 if (udp_buffer != NULL)
		 {
			memcpy(udp_buffer->payload, message, strlen(message));
 80003f8:	4d0b      	ldr	r5, [pc, #44]	; (8000428 <StartDefaultTask+0x74>)
		 if (udp_buffer != NULL)
 80003fa:	4604      	mov	r4, r0
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d0ec      	beq.n	80003da <StartDefaultTask+0x26>
			memcpy(udp_buffer->payload, message, strlen(message));
 8000400:	6866      	ldr	r6, [r4, #4]
 8000402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000404:	6030      	str	r0, [r6, #0]
 8000406:	6828      	ldr	r0, [r5, #0]
 8000408:	6071      	str	r1, [r6, #4]
			udp_send(my_udp, udp_buffer);
 800040a:	4621      	mov	r1, r4
			memcpy(udp_buffer->payload, message, strlen(message));
 800040c:	6130      	str	r0, [r6, #16]
			udp_send(my_udp, udp_buffer);
 800040e:	4640      	mov	r0, r8
			memcpy(udp_buffer->payload, message, strlen(message));
 8000410:	60b2      	str	r2, [r6, #8]
 8000412:	60f3      	str	r3, [r6, #12]
			udp_send(my_udp, udp_buffer);
 8000414:	f00a fed4 	bl	800b1c0 <udp_send>
			pbuf_free(udp_buffer);
 8000418:	4620      	mov	r0, r4
 800041a:	f006 fd23 	bl	8006e64 <pbuf_free>
 800041e:	e7dc      	b.n	80003da <StartDefaultTask+0x26>
 8000420:	58020800 	.word	0x58020800
 8000424:	6401a8c0 	.word	0x6401a8c0
 8000428:	0800dcdc 	.word	0x0800dcdc

0800042c <SystemClock_Config>:
{
 800042c:	b530      	push	{r4, r5, lr}
 800042e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000430:	224c      	movs	r2, #76	; 0x4c
 8000432:	2100      	movs	r1, #0
 8000434:	a809      	add	r0, sp, #36	; 0x24
 8000436:	f00c fd42 	bl	800cebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043a:	2220      	movs	r2, #32
 800043c:	2100      	movs	r1, #0
 800043e:	a801      	add	r0, sp, #4
 8000440:	f00c fd3d 	bl	800cebe <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000444:	2002      	movs	r0, #2
 8000446:	f001 fd71 	bl	8001f2c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800044a:	4a1f      	ldr	r2, [pc, #124]	; (80004c8 <SystemClock_Config+0x9c>)
 800044c:	2300      	movs	r3, #0
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	6993      	ldr	r3, [r2, #24]
 8000452:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	6993      	ldr	r3, [r2, #24]
 800045a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000462:	6993      	ldr	r3, [r2, #24]
 8000464:	0499      	lsls	r1, r3, #18
 8000466:	d5fc      	bpl.n	8000462 <SystemClock_Config+0x36>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000468:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800046a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800046c:	2508      	movs	r5, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046e:	2440      	movs	r4, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000470:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000474:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000476:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000478:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800047c:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 125;
 800047e:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000482:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000486:	2300      	movs	r3, #0
 8000488:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800048a:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 125;
 800048e:	237d      	movs	r3, #125	; 0x7d
 8000490:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000494:	f001 fdf2 	bl	800207c <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	b108      	cbz	r0, 80004a0 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049e:	e7fe      	b.n	800049e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2103      	movs	r1, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004aa:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004b0:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004b2:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004b6:	e9cd 4306 	strd	r4, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004ba:	f002 f88b 	bl	80025d4 <HAL_RCC_ClockConfig>
 80004be:	b108      	cbz	r0, 80004c4 <SystemClock_Config+0x98>
 80004c0:	b672      	cpsid	i
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <SystemClock_Config+0x96>
}
 80004c4:	b01d      	add	sp, #116	; 0x74
 80004c6:	bd30      	pop	{r4, r5, pc}
 80004c8:	58024800 	.word	0x58024800

080004cc <main>:
{
 80004cc:	b500      	push	{lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004ce:	2400      	movs	r4, #0
{
 80004d0:	b08d      	sub	sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004d2:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004d4:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80004d8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 80004dc:	f000 fbda 	bl	8000c94 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004e0:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004e4:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004e8:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004ea:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004ee:	930a      	str	r3, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004f0:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004f4:	f000 fbec 	bl	8000cd0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30000000;
 80004f8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80004fc:	4b6a      	ldr	r3, [pc, #424]	; (80006a8 <main+0x1dc>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004fe:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000500:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000502:	9309      	str	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000504:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000508:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800050c:	f000 fbe0 	bl	8000cd0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000510:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000512:	2308      	movs	r3, #8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000514:	a807      	add	r0, sp, #28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000516:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800051a:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800051e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000522:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000526:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800052a:	f000 fbd1 	bl	8000cd0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800052e:	2004      	movs	r0, #4
 8000530:	f000 fbbe 	bl	8000cb0 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000534:	4a5d      	ldr	r2, [pc, #372]	; (80006ac <main+0x1e0>)
 8000536:	6953      	ldr	r3, [r2, #20]
 8000538:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800053c:	d111      	bne.n	8000562 <main+0x96>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800053e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000542:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000546:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800054a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000552:	6953      	ldr	r3, [r2, #20]
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800055e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000562:	4852      	ldr	r0, [pc, #328]	; (80006ac <main+0x1e0>)
 8000564:	6943      	ldr	r3, [r0, #20]
 8000566:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800056a:	d126      	bne.n	80005ba <main+0xee>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800056c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000570:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000574:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000578:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800057c:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000580:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 8000584:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000588:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800058c:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000594:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000598:	1c5a      	adds	r2, r3, #1
 800059a:	d1f8      	bne.n	800058e <main+0xc2>
    } while(sets-- != 0U);
 800059c:	f1ac 0c20 	sub.w	ip, ip, #32
 80005a0:	f11c 0f20 	cmn.w	ip, #32
 80005a4:	d1f0      	bne.n	8000588 <main+0xbc>
 80005a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005aa:	6943      	ldr	r3, [r0, #20]
 80005ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b0:	6143      	str	r3, [r0, #20]
 80005b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005b6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80005ba:	f000 fac1 	bl	8000b40 <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	2400      	movs	r4, #0
  SystemClock_Config();
 80005c0:	f7ff ff34 	bl	800042c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	4b3a      	ldr	r3, [pc, #232]	; (80006b0 <main+0x1e4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GREEN_LED2_CNTRL_Pin;
 80005c8:	f44f 7580 	mov.w	r5, #256	; 0x100
  HAL_GPIO_Init(GREEN_LED2_CNTRL_GPIO_Port, &GPIO_InitStruct);
 80005cc:	a907      	add	r1, sp, #28
 80005ce:	4839      	ldr	r0, [pc, #228]	; (80006b4 <main+0x1e8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005d8:	f042 0204 	orr.w	r2, r2, #4
 80005dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80005e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005e4:	f002 0204 	and.w	r2, r2, #4
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80005f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005fc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000608:	f042 0201 	orr.w	r2, r2, #1
 800060c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000610:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000614:	f002 0201 	and.w	r2, r2, #1
 8000618:	9202      	str	r2, [sp, #8]
 800061a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000620:	f042 0202 	orr.w	r2, r2, #2
 8000624:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800062c:	f002 0202 	and.w	r2, r2, #2
 8000630:	9203      	str	r2, [sp, #12]
 8000632:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000638:	f042 0208 	orr.w	r2, r2, #8
 800063c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000640:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000644:	f002 0208 	and.w	r2, r2, #8
 8000648:	9204      	str	r2, [sp, #16]
 800064a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800064c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000654:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800065c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000660:	9205      	str	r2, [sp, #20]
 8000662:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000664:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000668:	f042 0210 	orr.w	r2, r2, #16
 800066c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = GREEN_LED2_CNTRL_Pin;
 8000674:	9507      	str	r5, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	f003 0310 	and.w	r3, r3, #16
 800067a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800067e:	9a06      	ldr	r2, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GREEN_LED2_CNTRL_GPIO_Port, &GPIO_InitStruct);
 8000682:	f001 fb1d 	bl	8001cc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GREEN_LED2_CNTRL_GPIO_Port, GREEN_LED2_CNTRL_Pin, GPIO_PIN_RESET);
 8000686:	4622      	mov	r2, r4
 8000688:	4629      	mov	r1, r5
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <main+0x1e8>)
 800068c:	f001 fc40 	bl	8001f10 <HAL_GPIO_WritePin>
  osKernelInitialize();
 8000690:	f002 ff40 	bl	8003514 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <main+0x1ec>)
 8000696:	4621      	mov	r1, r4
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <main+0x1f0>)
 800069a:	f002 ff6f 	bl	800357c <osThreadNew>
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <main+0x1f4>)
 80006a0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80006a2:	f002 ff49 	bl	8003538 <osKernelStart>
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x1da>
 80006a8:	0301000e 	.word	0x0301000e
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	58024400 	.word	0x58024400
 80006b4:	58020800 	.word	0x58020800
 80006b8:	0800dd00 	.word	0x0800dd00
 80006bc:	080003b5 	.word	0x080003b5
 80006c0:	240000a8 	.word	0x240000a8

080006c4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80006c6:	6802      	ldr	r2, [r0, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d000      	beq.n	80006ce <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80006cc:	4770      	bx	lr
    HAL_IncTick();
 80006ce:	f000 ba67 	b.w	8000ba0 <HAL_IncTick>
 80006d2:	bf00      	nop
 80006d4:	40001000 	.word	0x40001000

080006d8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
  while (1)
 80006da:	e7fe      	b.n	80006da <Error_Handler+0x2>

080006dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	210f      	movs	r1, #15
 80006e2:	f06f 0001 	mvn.w	r0, #1
{
 80006e6:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e8:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 80006ec:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	f044 0402 	orr.w	r4, r4, #2
 80006f2:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 80006f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	b003      	add	sp, #12
 8000704:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000708:	f000 ba78 	b.w	8000bfc <HAL_NVIC_SetPriority>
 800070c:	58024400 	.word	0x58024400

08000710 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000710:	280f      	cmp	r0, #15
 8000712:	d901      	bls.n	8000718 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8000714:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8000716:	4770      	bx	lr
{
 8000718:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800071a:	4601      	mov	r1, r0
{
 800071c:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800071e:	2200      	movs	r2, #0
 8000720:	4604      	mov	r4, r0
 8000722:	2036      	movs	r0, #54	; 0x36
 8000724:	f000 fa6a 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000728:	2036      	movs	r0, #54	; 0x36
 800072a:	f000 faa5 	bl	8000c78 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000732:	4669      	mov	r1, sp
 8000734:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8000736:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000738:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800073c:	f042 0210 	orr.w	r2, r2, #16
 8000740:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000750:	f002 f8ba 	bl	80028c8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000754:	9b07      	ldr	r3, [sp, #28]
 8000756:	b9bb      	cbnz	r3, 8000788 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000758:	f002 f8a4 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
 800075e:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 8000760:	4c10      	ldr	r4, [pc, #64]	; (80007a4 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000762:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
 8000766:	4d10      	ldr	r5, [pc, #64]	; (80007a8 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000768:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800076c:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076e:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 8000770:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000774:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000776:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800077a:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800077c:	f002 fa90 	bl	8002ca0 <HAL_TIM_Base_Init>
 8000780:	b130      	cbz	r0, 8000790 <HAL_InitTick+0x80>
    return HAL_ERROR;
 8000782:	2001      	movs	r0, #1
}
 8000784:	b00b      	add	sp, #44	; 0x2c
 8000786:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000788:	f002 f88c 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 800078c:	0040      	lsls	r0, r0, #1
 800078e:	e7e5      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
 8000790:	4620      	mov	r0, r4
 8000792:	f002 f8c7 	bl	8002924 <HAL_TIM_Base_Start_IT>
 8000796:	e7f5      	b.n	8000784 <HAL_InitTick+0x74>
 8000798:	58024400 	.word	0x58024400
 800079c:	2400000c 	.word	0x2400000c
 80007a0:	431bde83 	.word	0x431bde83
 80007a4:	240000ac 	.word	0x240000ac
 80007a8:	40001000 	.word	0x40001000

080007ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler>
 80007ae:	bf00      	nop

080007b0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <HardFault_Handler>
 80007b2:	bf00      	nop

080007b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler>
 80007b6:	bf00      	nop

080007b8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <BusFault_Handler>
 80007ba:	bf00      	nop

080007bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler>
 80007be:	bf00      	nop

080007c0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop

080007c4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007c4:	4801      	ldr	r0, [pc, #4]	; (80007cc <TIM6_DAC_IRQHandler+0x8>)
 80007c6:	f002 b91d 	b.w	8002a04 <HAL_TIM_IRQHandler>
 80007ca:	bf00      	nop
 80007cc:	240000ac 	.word	0x240000ac

080007d0 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80007d0:	4801      	ldr	r0, [pc, #4]	; (80007d8 <ETH_IRQHandler+0x8>)
 80007d2:	f000 bf27 	b.w	8001624 <HAL_ETH_IRQHandler>
 80007d6:	bf00      	nop
 80007d8:	240001d4 	.word	0x240001d4

080007dc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80007dc:	2001      	movs	r0, #1
 80007de:	4770      	bx	lr

080007e0 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80007e0:	4b02      	ldr	r3, [pc, #8]	; (80007ec <_kill+0xc>)
 80007e2:	2216      	movs	r2, #22
	return -1;
}
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80007e8:	601a      	str	r2, [r3, #0]
}
 80007ea:	4770      	bx	lr
 80007ec:	240107ec 	.word	0x240107ec

080007f0 <_exit>:
	errno = EINVAL;
 80007f0:	4b01      	ldr	r3, [pc, #4]	; (80007f8 <_exit+0x8>)
 80007f2:	2216      	movs	r2, #22
 80007f4:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80007f6:	e7fe      	b.n	80007f6 <_exit+0x6>
 80007f8:	240107ec 	.word	0x240107ec

080007fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	1e16      	subs	r6, r2, #0
 8000800:	dd07      	ble.n	8000812 <_read+0x16>
 8000802:	460c      	mov	r4, r1
 8000804:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000806:	f3af 8000 	nop.w
 800080a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	42a5      	cmp	r5, r4
 8000810:	d1f9      	bne.n	8000806 <_read+0xa>
	}

return len;
}
 8000812:	4630      	mov	r0, r6
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	bf00      	nop

08000818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000818:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	1e16      	subs	r6, r2, #0
 800081c:	dd07      	ble.n	800082e <_write+0x16>
 800081e:	460c      	mov	r4, r1
 8000820:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000822:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000826:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	42a5      	cmp	r5, r4
 800082c:	d1f9      	bne.n	8000822 <_write+0xa>
	}
	return len;
}
 800082e:	4630      	mov	r0, r6
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	bf00      	nop

08000834 <_close>:

int _close(int file)
{
	return -1;
}
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000840:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000842:	604b      	str	r3, [r1, #4]
}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000848:	2001      	movs	r0, #1
 800084a:	4770      	bx	lr

0800084c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800084c:	2000      	movs	r0, #0
 800084e:	4770      	bx	lr

08000850 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000850:	490d      	ldr	r1, [pc, #52]	; (8000888 <_sbrk+0x38>)
{
 8000852:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8000856:	6808      	ldr	r0, [r1, #0]
{
 8000858:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800085a:	4c0d      	ldr	r4, [pc, #52]	; (8000890 <_sbrk+0x40>)
 800085c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800085e:	b170      	cbz	r0, 800087e <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000860:	4403      	add	r3, r0
 8000862:	4293      	cmp	r3, r2
 8000864:	d803      	bhi.n	800086e <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000866:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 800086a:	600b      	str	r3, [r1, #0]
}
 800086c:	4770      	bx	lr
    errno = ENOMEM;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <_sbrk+0x44>)
 8000870:	220c      	movs	r2, #12
    return (void *)-1;
 8000872:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000876:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 800087a:	601a      	str	r2, [r3, #0]
}
 800087c:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800087e:	4c06      	ldr	r4, [pc, #24]	; (8000898 <_sbrk+0x48>)
 8000880:	4620      	mov	r0, r4
 8000882:	600c      	str	r4, [r1, #0]
 8000884:	e7ec      	b.n	8000860 <_sbrk+0x10>
 8000886:	bf00      	nop
 8000888:	240000f8 	.word	0x240000f8
 800088c:	24050000 	.word	0x24050000
 8000890:	00000400 	.word	0x00000400
 8000894:	240107ec 	.word	0x240107ec
 8000898:	24015188 	.word	0x24015188

0800089c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800089c:	4922      	ldr	r1, [pc, #136]	; (8000928 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008a0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80008a8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ae:	6813      	ldr	r3, [r2, #0]
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	2b06      	cmp	r3, #6
 80008b6:	d805      	bhi.n	80008c4 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008b8:	6813      	ldr	r3, [r2, #0]
 80008ba:	f023 030f 	bic.w	r3, r3, #15
 80008be:	f043 0307 	orr.w	r3, r3, #7
 80008c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008c6:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008c8:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 80008ca:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008cc:	4817      	ldr	r0, [pc, #92]	; (800092c <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 80008ce:	f041 0101 	orr.w	r1, r1, #1
 80008d2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80008d4:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80008d6:	6819      	ldr	r1, [r3, #0]
 80008d8:	400a      	ands	r2, r1
 80008da:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008dc:	6803      	ldr	r3, [r0, #0]
 80008de:	071b      	lsls	r3, r3, #28
 80008e0:	d505      	bpl.n	80008ee <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e2:	6803      	ldr	r3, [r0, #0]
 80008e4:	f023 030f 	bic.w	r3, r3, #15
 80008e8:	f043 0307 	orr.w	r3, r3, #7
 80008ec:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <SystemInit+0x94>)
 80008f0:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008f2:	4911      	ldr	r1, [pc, #68]	; (8000938 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 80008f4:	4c11      	ldr	r4, [pc, #68]	; (800093c <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 80008f6:	4812      	ldr	r0, [pc, #72]	; (8000940 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 80008f8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80008fa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80008fc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80008fe:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000900:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8000904:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000906:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800090a:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800090c:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 800090e:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000910:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000912:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000916:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800091a:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800091c:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800091e:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	52002000 	.word	0x52002000
 8000930:	58024400 	.word	0x58024400
 8000934:	eaf6ed7f 	.word	0xeaf6ed7f
 8000938:	01010280 	.word	0x01010280
 800093c:	02020200 	.word	0x02020200
 8000940:	01ff0000 	.word	0x01ff0000
 8000944:	52004000 	.word	0x52004000

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000980 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800094c:	f7ff ffa6 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	; (8000988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	; (8000994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f00c fb47 	bl	800d008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fda7 	bl	80004cc <main>
  bx  lr
 800097e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000980:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000984:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000988:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 800098c:	0800fd5c 	.word	0x0800fd5c
  ldr r2, =_sbss
 8000990:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8000994:	24015184 	.word	0x24015184

08000998 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC3_IRQHandler>
	...

0800099c <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800099c:	b188      	cbz	r0, 80009c2 <LAN8742_RegisterBusIO+0x26>
 800099e:	68ca      	ldr	r2, [r1, #12]
 80009a0:	b17a      	cbz	r2, 80009c2 <LAN8742_RegisterBusIO+0x26>
{
 80009a2:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80009a4:	688c      	ldr	r4, [r1, #8]
 80009a6:	b17c      	cbz	r4, 80009c8 <LAN8742_RegisterBusIO+0x2c>
 80009a8:	690d      	ldr	r5, [r1, #16]
 80009aa:	b16d      	cbz	r5, 80009c8 <LAN8742_RegisterBusIO+0x2c>
 80009ac:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 80009ae:	6808      	ldr	r0, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80009b0:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80009b2:	6098      	str	r0, [r3, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 80009b4:	2000      	movs	r0, #0
  pObj->IO.ReadReg = ioctx->ReadReg;
 80009b6:	615a      	str	r2, [r3, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 80009b8:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80009ba:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 80009be:	bc30      	pop	{r4, r5}
 80009c0:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80009c6:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	e7f7      	b.n	80009be <LAN8742_RegisterBusIO+0x22>
 80009ce:	bf00      	nop

080009d0 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80009d0:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80009d2:	2300      	movs	r3, #0
 {
 80009d4:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 80009d6:	6844      	ldr	r4, [r0, #4]
 {
 80009d8:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80009da:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d146      	bne.n	8000a6e <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 80009e0:	6883      	ldr	r3, [r0, #8]
 80009e2:	b103      	cbz	r3, 80009e6 <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80009e4:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80009e6:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 80009e8:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80009ea:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80009ec:	e007      	b.n	80009fe <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	f003 031f 	and.w	r3, r3, #31
 80009f4:	42a3      	cmp	r3, r4
 80009f6:	d016      	beq.n	8000a26 <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80009f8:	3401      	adds	r4, #1
 80009fa:	2c20      	cmp	r4, #32
 80009fc:	d00b      	beq.n	8000a16 <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80009fe:	4620      	mov	r0, r4
 8000a00:	696b      	ldr	r3, [r5, #20]
 8000a02:	aa01      	add	r2, sp, #4
 8000a04:	2112      	movs	r1, #18
 8000a06:	4798      	blx	r3
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	daf0      	bge.n	80009ee <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000a0c:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 8000a0e:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000a12:	2c20      	cmp	r4, #32
 8000a14:	d1f3      	bne.n	80009fe <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000a16:	682c      	ldr	r4, [r5, #0]
 8000a18:	2c1f      	cmp	r4, #31
 8000a1a:	d937      	bls.n	8000a8c <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000a1c:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 8000a20:	4630      	mov	r0, r6
 8000a22:	b002      	add	sp, #8
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8000a26:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000a28:	692b      	ldr	r3, [r5, #16]
 8000a2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a2e:	4620      	mov	r0, r4
 8000a30:	2100      	movs	r1, #0
 8000a32:	4798      	blx	r3
 8000a34:	2800      	cmp	r0, #0
 8000a36:	db2c      	blt.n	8000a92 <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000a38:	696b      	ldr	r3, [r5, #20]
 8000a3a:	aa01      	add	r2, sp, #4
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	6828      	ldr	r0, [r5, #0]
 8000a40:	4798      	blx	r3
 8000a42:	2800      	cmp	r0, #0
 8000a44:	db2b      	blt.n	8000a9e <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8000a46:	69ab      	ldr	r3, [r5, #24]
 8000a48:	4798      	blx	r3
 8000a4a:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000a4c:	e00c      	b.n	8000a68 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000a4e:	69ab      	ldr	r3, [r5, #24]
 8000a50:	4798      	blx	r3
 8000a52:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000a54:	aa01      	add	r2, sp, #4
 8000a56:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000a58:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000a5c:	d81c      	bhi.n	8000a98 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000a5e:	696b      	ldr	r3, [r5, #20]
 8000a60:	6828      	ldr	r0, [r5, #0]
 8000a62:	4798      	blx	r3
 8000a64:	2800      	cmp	r0, #0
 8000a66:	db1a      	blt.n	8000a9e <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000a68:	9b01      	ldr	r3, [sp, #4]
 8000a6a:	041b      	lsls	r3, r3, #16
 8000a6c:	d4ef      	bmi.n	8000a4e <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 8000a6e:	69ab      	ldr	r3, [r5, #24]
 8000a70:	4798      	blx	r3
 8000a72:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000a74:	69ab      	ldr	r3, [r5, #24]
 8000a76:	4798      	blx	r3
 8000a78:	1b03      	subs	r3, r0, r4
 8000a7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a7e:	d9f9      	bls.n	8000a74 <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	2600      	movs	r6, #0
 8000a84:	606b      	str	r3, [r5, #4]
 }
 8000a86:	4630      	mov	r0, r6
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d1fa      	bne.n	8000a86 <LAN8742_Init+0xb6>
 8000a90:	e7ca      	b.n	8000a28 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 8000a92:	f06f 0603 	mvn.w	r6, #3
 8000a96:	e7f6      	b.n	8000a86 <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000a98:	f06f 0601 	mvn.w	r6, #1
   return status;
 8000a9c:	e7f3      	b.n	8000a86 <LAN8742_Init+0xb6>
           status = LAN8742_STATUS_READ_ERROR;
 8000a9e:	f06f 0604 	mvn.w	r6, #4
 8000aa2:	e7f0      	b.n	8000a86 <LAN8742_Init+0xb6>

08000aa4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000aa4:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8000aa6:	2500      	movs	r5, #0
{
 8000aa8:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000aaa:	6943      	ldr	r3, [r0, #20]
{
 8000aac:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000aae:	aa01      	add	r2, sp, #4
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8000ab4:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ab6:	4798      	blx	r3
 8000ab8:	42a8      	cmp	r0, r5
 8000aba:	db3d      	blt.n	8000b38 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000abc:	6963      	ldr	r3, [r4, #20]
 8000abe:	aa01      	add	r2, sp, #4
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	6820      	ldr	r0, [r4, #0]
 8000ac4:	4798      	blx	r3
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	db36      	blt.n	8000b38 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000aca:	9b01      	ldr	r3, [sp, #4]
 8000acc:	075b      	lsls	r3, r3, #29
 8000ace:	d52a      	bpl.n	8000b26 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ad0:	6963      	ldr	r3, [r4, #20]
 8000ad2:	aa01      	add	r2, sp, #4
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	4798      	blx	r3
 8000ada:	2800      	cmp	r0, #0
 8000adc:	db2c      	blt.n	8000b38 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ade:	9b01      	ldr	r3, [sp, #4]
 8000ae0:	04dd      	lsls	r5, r3, #19
 8000ae2:	d514      	bpl.n	8000b0e <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ae4:	6963      	ldr	r3, [r4, #20]
 8000ae6:	aa01      	add	r2, sp, #4
 8000ae8:	211f      	movs	r1, #31
 8000aea:	6820      	ldr	r0, [r4, #0]
 8000aec:	4798      	blx	r3
 8000aee:	2800      	cmp	r0, #0
 8000af0:	db22      	blt.n	8000b38 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000af2:	9b01      	ldr	r3, [sp, #4]
 8000af4:	04da      	lsls	r2, r3, #19
 8000af6:	d51d      	bpl.n	8000b34 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000af8:	f003 031c 	and.w	r3, r3, #28
 8000afc:	2b18      	cmp	r3, #24
 8000afe:	d017      	beq.n	8000b30 <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d013      	beq.n	8000b2c <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000b04:	2b14      	cmp	r3, #20
 8000b06:	d10b      	bne.n	8000b20 <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000b08:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8000b0a:	b003      	add	sp, #12
 8000b0c:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000b0e:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000b12:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000b16:	d00b      	beq.n	8000b30 <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000b18:	0498      	lsls	r0, r3, #18
 8000b1a:	d407      	bmi.n	8000b2c <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000b1c:	05d9      	lsls	r1, r3, #23
 8000b1e:	d4f3      	bmi.n	8000b08 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000b20:	2005      	movs	r0, #5
}
 8000b22:	b003      	add	sp, #12
 8000b24:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 8000b26:	2001      	movs	r0, #1
}
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	e7f8      	b.n	8000b22 <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000b30:	2002      	movs	r0, #2
 8000b32:	e7f6      	b.n	8000b22 <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000b34:	2006      	movs	r0, #6
 8000b36:	e7f4      	b.n	8000b22 <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8000b38:	f06f 0004 	mvn.w	r0, #4
 8000b3c:	e7f1      	b.n	8000b22 <LAN8742_GetLinkState+0x7e>
 8000b3e:	bf00      	nop

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b42:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b44:	4c12      	ldr	r4, [pc, #72]	; (8000b90 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b46:	f000 f847 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b4a:	f001 fd21 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_Init+0x54>)
 8000b50:	4911      	ldr	r1, [pc, #68]	; (8000b98 <HAL_Init+0x58>)
 8000b52:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b54:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b56:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b5a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b5e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b60:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b62:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b66:	490d      	ldr	r1, [pc, #52]	; (8000b9c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b68:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b6c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b6e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8000b72:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b74:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b76:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b78:	f7ff fdca 	bl	8000710 <HAL_InitTick>
 8000b7c:	b110      	cbz	r0, 8000b84 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8000b7e:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8000b80:	4620      	mov	r0, r4
 8000b82:	bd10      	pop	{r4, pc}
 8000b84:	4604      	mov	r4, r0
  HAL_MspInit();
 8000b86:	f7ff fda9 	bl	80006dc <HAL_MspInit>
}
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000004 	.word	0x24000004
 8000b94:	58024400 	.word	0x58024400
 8000b98:	0800dd24 	.word	0x0800dd24
 8000b9c:	24000000 	.word	0x24000000

08000ba0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <HAL_IncTick+0x10>)
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_IncTick+0x14>)
 8000ba4:	6811      	ldr	r1, [r2, #0]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	440b      	add	r3, r1
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	240000fc 	.word	0x240000fc
 8000bb4:	24000008 	.word	0x24000008

08000bb8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bb8:	4b01      	ldr	r3, [pc, #4]	; (8000bc0 <HAL_GetTick+0x8>)
 8000bba:	6818      	ldr	r0, [r3, #0]
}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	240000fc 	.word	0x240000fc

08000bc4 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8000bc6:	6853      	ldr	r3, [r2, #4]
 8000bc8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000bcc:	4318      	orrs	r0, r3
 8000bce:	6050      	str	r0, [r2, #4]
}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	58000400 	.word	0x58000400

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bde:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000bee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bf0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	05fa0000 	.word	0x05fa0000

08000bfc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_NVIC_SetPriority+0x70>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c06:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0e:	f1be 0f04 	cmp.w	lr, #4
 8000c12:	bf28      	it	cs
 8000c14:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c18:	f1bc 0f06 	cmp.w	ip, #6
 8000c1c:	d91a      	bls.n	8000c54 <HAL_NVIC_SetPriority+0x58>
 8000c1e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 3cff 	mov.w	ip, #4294967295
 8000c24:	fa0c fc03 	lsl.w	ip, ip, r3
 8000c28:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8000c30:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c32:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000c36:	ea21 010c 	bic.w	r1, r1, ip
 8000c3a:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000c42:	db0a      	blt.n	8000c5a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	0109      	lsls	r1, r1, #4
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_NVIC_SetPriority+0x74>)
 8000c48:	b2c9      	uxtb	r1, r1
 8000c4a:	4403      	add	r3, r0
 8000c4c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c54:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	4613      	mov	r3, r2
 8000c58:	e7e8      	b.n	8000c2c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	f000 000f 	and.w	r0, r0, #15
 8000c5e:	0109      	lsls	r1, r1, #4
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <HAL_NVIC_SetPriority+0x78>)
 8000c62:	b2c9      	uxtb	r1, r1
 8000c64:	4403      	add	r3, r0
 8000c66:	7619      	strb	r1, [r3, #24]
 8000c68:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ecfc 	.word	0xe000ecfc

08000c78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	db07      	blt.n	8000c8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f000 011f 	and.w	r1, r0, #31
 8000c82:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_NVIC_EnableIRQ+0x18>)
 8000c84:	0940      	lsrs	r0, r0, #5
 8000c86:	408b      	lsls	r3, r1
 8000c88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c94:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c9a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8000ca4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MPU_Enable+0x1c>)
 8000cb2:	f040 0001 	orr.w	r0, r0, #1
 8000cb6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cbc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cc6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_MPU_ConfigRegion+0x60>)
 8000cd2:	7843      	ldrb	r3, [r0, #1]
 8000cd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8000cd8:	7801      	ldrb	r1, [r0, #0]
 8000cda:	b321      	cbz	r1, 8000d26 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000cdc:	6843      	ldr	r3, [r0, #4]
{
 8000cde:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8000ce0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ce4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ce6:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000cea:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000cec:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cf0:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000cf4:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cf8:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000cfa:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cfc:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d00:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d04:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d08:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d0c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8000d10:	7a01      	ldrb	r1, [r0, #8]
 8000d12:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d16:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8000d1a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d1e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000d22:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8000d26:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8000d2a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000d34:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d36:	688b      	ldr	r3, [r1, #8]
 8000d38:	680d      	ldr	r5, [r1, #0]
 8000d3a:	694c      	ldr	r4, [r1, #20]
 8000d3c:	432b      	orrs	r3, r5
 8000d3e:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000d40:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d44:	4323      	orrs	r3, r4
 8000d46:	698c      	ldr	r4, [r1, #24]
 8000d48:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000d4a:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d4e:	4323      	orrs	r3, r4
 8000d50:	6a4c      	ldr	r4, [r1, #36]	; 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000d52:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000d56:	4d52      	ldr	r5, [pc, #328]	; (8000ea0 <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	4c51      	ldr	r4, [pc, #324]	; (8000ea4 <ETH_SetMACConfig+0x170>)
 8000d60:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8000d62:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d64:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8000d66:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d68:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000d6c:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d6e:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000d72:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d74:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000d78:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d7a:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 8000d7e:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d80:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8000d84:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8000d8a:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d8c:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8000d90:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d92:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8000d96:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000d9a:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000d9e:	7c08      	ldrb	r0, [r1, #16]
 8000da0:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000da4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8000da8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000daa:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000dac:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8000db0:	7f88      	ldrb	r0, [r1, #30]
 8000db2:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000db6:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8000dba:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000dbc:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8000dc0:	f891 0020 	ldrb.w	r0, [r1, #32]
 8000dc4:	fab0 f080 	clz	r0, r0
 8000dc8:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000dca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000dce:	6b48      	ldr	r0, [r1, #52]	; 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000dd0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000dd2:	6853      	ldr	r3, [r2, #4]
 8000dd4:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000dd6:	f64f 750d 	movw	r5, #65293	; 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000dda:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8000dde:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000de2:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8000de4:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000de8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8000dec:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000df0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8000df4:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8000df8:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000dfc:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8000e00:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000e02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000e06:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000e08:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000e0a:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8000e0c:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000e0e:	4018      	ands	r0, r3
 8000e10:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8000e12:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000e14:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000e18:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000e1c:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000e1e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000e20:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8000e22:	402b      	ands	r3, r5
 8000e24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000e28:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000e2c:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8000e2e:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 8000e32:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000e36:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8000e3a:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000e3c:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000e40:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000e44:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000e46:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000e4a:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000e4e:	f020 0003 	bic.w	r0, r0, #3
 8000e52:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8000e54:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000e58:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8000e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000e60:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8000e64:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8000e68:	432b      	orrs	r3, r5
 8000e6a:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000e6e:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8000e72:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000e76:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8000e7a:	f891 c062 	ldrb.w	ip, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000e84:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 8000e88:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000e8c:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000e90:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000e92:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 8000e96:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000e98:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	c0f88000 	.word	0xc0f88000
 8000ea4:	00048083 	.word	0x00048083
 8000ea8:	fffffef0 	.word	0xfffffef0

08000eac <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000eac:	6803      	ldr	r3, [r0, #0]
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <ETH_SetDMAConfig+0x7c>)
 8000eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb4:	6808      	ldr	r0, [r1, #0]
{
 8000eb6:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000eb8:	681c      	ldr	r4, [r3, #0]
 8000eba:	4022      	ands	r2, r4
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000ec0:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000ec2:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000ec4:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000ec6:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000ec8:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8000ecc:	688c      	ldr	r4, [r1, #8]
 8000ece:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000ed0:	4c16      	ldr	r4, [pc, #88]	; (8000f2c <ETH_SetDMAConfig+0x80>)
 8000ed2:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000ed4:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000ed6:	4322      	orrs	r2, r4
 8000ed8:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000eda:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000edc:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000ee0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000ee4:	4812      	ldr	r0, [pc, #72]	; (8000f30 <ETH_SetDMAConfig+0x84>)
 8000ee6:	4020      	ands	r0, r4
 8000ee8:	4302      	orrs	r2, r0
 8000eea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000eee:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8000ef0:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000ef2:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000ef4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8000ef8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000efc:	690c      	ldr	r4, [r1, #16]
 8000efe:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000f00:	4c0c      	ldr	r4, [pc, #48]	; (8000f34 <ETH_SetDMAConfig+0x88>)
 8000f02:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000f04:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000f06:	4322      	orrs	r2, r4
 8000f08:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000f0c:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000f10:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000f12:	4909      	ldr	r1, [pc, #36]	; (8000f38 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000f14:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000f18:	4021      	ands	r1, r4
}
 8000f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	ffff87fd 	.word	0xffff87fd
 8000f2c:	ffff2ffe 	.word	0xffff2ffe
 8000f30:	fffec000 	.word	0xfffec000
 8000f34:	ffc0efef 	.word	0xffc0efef
 8000f38:	7fc0ffff 	.word	0x7fc0ffff

08000f3c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8000f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8000f40:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8000f42:	b083      	sub	sp, #12
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8000f44:	688e      	ldr	r6, [r1, #8]
 8000f46:	eb00 0984 	add.w	r9, r0, r4, lsl #2
{
 8000f4a:	9201      	str	r2, [sp, #4]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000f4c:	f8d9 3018 	ldr.w	r3, [r9, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	f2c0 8124 	blt.w	80011a0 <ETH_Prepare_Tx_Descriptors+0x264>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8000f58:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	f040 811f 	bne.w	80011a0 <ETH_Prepare_Tx_Descriptors+0x264>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8000f62:	f8d1 c000 	ldr.w	ip, [r1]
 8000f66:	f01c 0704 	ands.w	r7, ip, #4
 8000f6a:	d02d      	beq.n	8000fc8 <ETH_Prepare_Tx_Descriptors+0x8c>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8000f6c:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8000f6e:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8000f72:	4dae      	ldr	r5, [pc, #696]	; (800122c <ETH_Prepare_Tx_Descriptors+0x2f0>)
 8000f74:	ea05 0502 	and.w	r5, r5, r2
 8000f78:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000f7a:	ea45 0502 	orr.w	r5, r5, r2
 8000f7e:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8000f80:	68da      	ldr	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8000f82:	6805      	ldr	r5, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8000f84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f88:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8000f8a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8000f8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f90:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8000f92:	d019      	beq.n	8000fc8 <ETH_Prepare_Tx_Descriptors+0x8c>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	fa1f fe82 	uxth.w	lr, r2
 8000f9a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000f9c:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8000fa0:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fa8:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 8000fb0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000fb2:	ea4e 0202 	orr.w	r2, lr, r2
 8000fb6:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8000fb8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8000fba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fbe:	666a      	str	r2, [r5, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8000fc0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000fc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000fc6:	652a      	str	r2, [r5, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8000fc8:	f01c 0810 	ands.w	r8, ip, #16
 8000fcc:	d009      	beq.n	8000fe2 <ETH_Prepare_Tx_Descriptors+0xa6>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	4d97      	ldr	r5, [pc, #604]	; (8001230 <ETH_Prepare_Tx_Descriptors+0x2f4>)
 8000fd2:	4015      	ands	r5, r2
 8000fd4:	698a      	ldr	r2, [r1, #24]
 8000fd6:	4315      	orrs	r5, r2
 8000fd8:	609d      	str	r5, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000fe0:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8000fe2:	f01c 0f14 	tst.w	ip, #20
 8000fe6:	f040 80df 	bne.w	80011a8 <ETH_Prepare_Tx_Descriptors+0x26c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8000fea:	4622      	mov	r2, r4
 8000fec:	f04f 0e01 	mov.w	lr, #1
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8000ff0:	6835      	ldr	r5, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8000ff2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8001230 <ETH_Prepare_Tx_Descriptors+0x2f4>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8000ff6:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8000ff8:	689d      	ldr	r5, [r3, #8]
 8000ffa:	ea05 0a0a 	and.w	sl, r5, sl
 8000ffe:	6875      	ldr	r5, [r6, #4]
 8001000:	ea4a 0505 	orr.w	r5, sl, r5
 8001004:	609d      	str	r5, [r3, #8]

  if (txbuffer->next != NULL)
 8001006:	68b5      	ldr	r5, [r6, #8]
 8001008:	2d00      	cmp	r5, #0
 800100a:	f000 8133 	beq.w	8001274 <ETH_Prepare_Tx_Descriptors+0x338>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800100e:	682e      	ldr	r6, [r5, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001010:	f8df a220 	ldr.w	sl, [pc, #544]	; 8001234 <ETH_Prepare_Tx_Descriptors+0x2f8>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001014:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001016:	689e      	ldr	r6, [r3, #8]
 8001018:	ea06 0a0a 	and.w	sl, r6, sl
 800101c:	686e      	ldr	r6, [r5, #4]
 800101e:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 8001022:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001024:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001026:	f1b8 0f00 	cmp.w	r8, #0
 800102a:	f000 80e0 	beq.w	80011ee <ETH_Prepare_Tx_Descriptors+0x2b2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800102e:	f426 0cf0 	bic.w	ip, r6, #7864320	; 0x780000
 8001032:	6a0e      	ldr	r6, [r1, #32]
 8001034:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001038:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8001238 <ETH_Prepare_Tx_Descriptors+0x2fc>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800103c:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800103e:	68de      	ldr	r6, [r3, #12]
 8001040:	ea06 0c0c 	and.w	ip, r6, ip
 8001044:	69ce      	ldr	r6, [r1, #28]
 8001046:	ea4c 0606 	orr.w	r6, ip, r6
 800104a:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800104c:	68de      	ldr	r6, [r3, #12]
 800104e:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 8001052:	60de      	str	r6, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001054:	b12f      	cbz	r7, 8001062 <ETH_Prepare_Tx_Descriptors+0x126>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8001056:	689f      	ldr	r7, [r3, #8]
 8001058:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800105a:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 800105e:	433e      	orrs	r6, r7
 8001060:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001062:	68de      	ldr	r6, [r3, #12]
 8001064:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001068:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800106a:	68de      	ldr	r6, [r3, #12]
 800106c:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 8001070:	60de      	str	r6, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001072:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001076:	68de      	ldr	r6, [r3, #12]
 8001078:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800107c:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800107e:	680e      	ldr	r6, [r1, #0]
 8001080:	07b6      	lsls	r6, r6, #30
 8001082:	d505      	bpl.n	8001090 <ETH_Prepare_Tx_Descriptors+0x154>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8001084:	68df      	ldr	r7, [r3, #12]
 8001086:	68ce      	ldr	r6, [r1, #12]
 8001088:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 800108c:	433e      	orrs	r6, r7
 800108e:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001090:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8001094:	f1b8 0f00 	cmp.w	r8, #0
 8001098:	f000 80d2 	beq.w	8001240 <ETH_Prepare_Tx_Descriptors+0x304>
 800109c:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80010a0:	4d63      	ldr	r5, [pc, #396]	; (8001230 <ETH_Prepare_Tx_Descriptors+0x2f4>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80010a2:	4e64      	ldr	r6, [pc, #400]	; (8001234 <ETH_Prepare_Tx_Descriptors+0x2f8>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80010a4:	46a2      	mov	sl, r4
 80010a6:	e01d      	b.n	80010e4 <ETH_Prepare_Tx_Descriptors+0x1a8>
 80010a8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001238 <ETH_Prepare_Tx_Descriptors+0x2fc>
 80010ac:	ea04 0808 	and.w	r8, r4, r8
 80010b0:	69cc      	ldr	r4, [r1, #28]
 80010b2:	ea48 0404 	orr.w	r4, r8, r4
 80010b6:	60dc      	str	r4, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80010b8:	68dc      	ldr	r4, [r3, #12]
 80010ba:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 80010be:	60dc      	str	r4, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 80010c0:	f10c 0c01 	add.w	ip, ip, #1
 80010c4:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80010c8:	68dc      	ldr	r4, [r3, #12]
  while (txbuffer->next != NULL)
 80010ca:	f8d7 8008 	ldr.w	r8, [r7, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80010ce:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80010d2:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80010d4:	68dc      	ldr	r4, [r3, #12]
 80010d6:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 80010da:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 80010dc:	f1b8 0f00 	cmp.w	r8, #0
 80010e0:	f000 80af 	beq.w	8001242 <ETH_Prepare_Tx_Descriptors+0x306>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80010e4:	68dc      	ldr	r4, [r3, #12]
 80010e6:	eb0e 0b0c 	add.w	fp, lr, ip
 80010ea:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 80010ee:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80010f0:	1c53      	adds	r3, r2, #1
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	bf94      	ite	ls
 80010f6:	461a      	movls	r2, r3
 80010f8:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80010fa:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80010fe:	69bb      	ldr	r3, [r7, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001100:	68dc      	ldr	r4, [r3, #12]
 8001102:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8001106:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8001108:	68dc      	ldr	r4, [r3, #12]
 800110a:	2c00      	cmp	r4, #0
 800110c:	db30      	blt.n	8001170 <ETH_Prepare_Tx_Descriptors+0x234>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800110e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001110:	bb74      	cbnz	r4, 8001170 <ETH_Prepare_Tx_Descriptors+0x234>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001112:	f8d8 4000 	ldr.w	r4, [r8]
 8001116:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001118:	689f      	ldr	r7, [r3, #8]
 800111a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800111e:	402f      	ands	r7, r5
 8001120:	433c      	orrs	r4, r7
    if (txbuffer->next != NULL)
 8001122:	f8d8 7008 	ldr.w	r7, [r8, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001126:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8001128:	2f00      	cmp	r7, #0
 800112a:	d05a      	beq.n	80011e2 <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800112c:	683c      	ldr	r4, [r7, #0]
 800112e:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001130:	689c      	ldr	r4, [r3, #8]
 8001132:	ea04 0806 	and.w	r8, r4, r6
 8001136:	687c      	ldr	r4, [r7, #4]
 8001138:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800113c:	609c      	str	r4, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800113e:	f8d1 8000 	ldr.w	r8, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001142:	68dc      	ldr	r4, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001144:	f018 0f10 	tst.w	r8, #16
 8001148:	d1ae      	bne.n	80010a8 <ETH_Prepare_Tx_Descriptors+0x16c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800114a:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 800123c <ETH_Prepare_Tx_Descriptors+0x300>
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800114e:	f018 0f01 	tst.w	r8, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001152:	ea04 0b0b 	and.w	fp, r4, fp
 8001156:	684c      	ldr	r4, [r1, #4]
 8001158:	ea4b 0404 	orr.w	r4, fp, r4
 800115c:	60dc      	str	r4, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800115e:	d0af      	beq.n	80010c0 <ETH_Prepare_Tx_Descriptors+0x184>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001160:	68dc      	ldr	r4, [r3, #12]
 8001162:	f424 3840 	bic.w	r8, r4, #196608	; 0x30000
 8001166:	694c      	ldr	r4, [r1, #20]
 8001168:	ea48 0404 	orr.w	r4, r8, r4
 800116c:	60dc      	str	r4, [r3, #12]
 800116e:	e7a7      	b.n	80010c0 <ETH_Prepare_Tx_Descriptors+0x184>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001170:	4654      	mov	r4, sl
 8001172:	f8d9 2018 	ldr.w	r2, [r9, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001176:	f1bb 0f00 	cmp.w	fp, #0
 800117a:	d011      	beq.n	80011a0 <ETH_Prepare_Tx_Descriptors+0x264>
 800117c:	2100      	movs	r1, #0
 800117e:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001182:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001184:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001186:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8001188:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 800118a:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800118c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001190:	bf98      	it	ls
 8001192:	462c      	movls	r4, r5
 8001194:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8001196:	4559      	cmp	r1, fp
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001198:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800119c:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800119e:	d1ee      	bne.n	800117e <ETH_Prepare_Tx_Descriptors+0x242>
    return HAL_ETH_ERROR_BUSY;
 80011a0:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 80011a2:	b003      	add	sp, #12
 80011a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011ba:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80011bc:	1c62      	adds	r2, r4, #1
 80011be:	2a03      	cmp	r2, #3
 80011c0:	bf88      	it	hi
 80011c2:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80011c4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80011c8:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80011ca:	68dd      	ldr	r5, [r3, #12]
 80011cc:	2d00      	cmp	r5, #0
 80011ce:	db5f      	blt.n	8001290 <ETH_Prepare_Tx_Descriptors+0x354>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80011d0:	f8d1 c000 	ldr.w	ip, [r1]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80011d4:	f04f 0e02 	mov.w	lr, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80011d8:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80011dc:	f00c 0704 	and.w	r7, ip, #4
 80011e0:	e706      	b.n	8000ff0 <ETH_Prepare_Tx_Descriptors+0xb4>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80011e2:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80011e4:	4647      	mov	r7, r8
 80011e6:	689c      	ldr	r4, [r3, #8]
 80011e8:	4034      	ands	r4, r6
 80011ea:	609c      	str	r4, [r3, #8]
 80011ec:	e7a7      	b.n	800113e <ETH_Prepare_Tx_Descriptors+0x202>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80011ee:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800123c <ETH_Prepare_Tx_Descriptors+0x300>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80011f2:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80011f6:	ea06 0808 	and.w	r8, r6, r8
 80011fa:	684e      	ldr	r6, [r1, #4]
 80011fc:	ea48 0606 	orr.w	r6, r8, r6
 8001200:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001202:	d006      	beq.n	8001212 <ETH_Prepare_Tx_Descriptors+0x2d6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001204:	68de      	ldr	r6, [r3, #12]
 8001206:	f426 3840 	bic.w	r8, r6, #196608	; 0x30000
 800120a:	694e      	ldr	r6, [r1, #20]
 800120c:	ea48 0606 	orr.w	r6, r8, r6
 8001210:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8001212:	f01c 0f20 	tst.w	ip, #32
 8001216:	f43f af1d 	beq.w	8001054 <ETH_Prepare_Tx_Descriptors+0x118>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800121a:	68de      	ldr	r6, [r3, #12]
 800121c:	f026 6c40 	bic.w	ip, r6, #201326592	; 0xc000000
 8001220:	690e      	ldr	r6, [r1, #16]
 8001222:	ea4c 0606 	orr.w	r6, ip, r6
 8001226:	60de      	str	r6, [r3, #12]
 8001228:	e714      	b.n	8001054 <ETH_Prepare_Tx_Descriptors+0x118>
 800122a:	bf00      	nop
 800122c:	ffff0000 	.word	0xffff0000
 8001230:	ffffc000 	.word	0xffffc000
 8001234:	c000ffff 	.word	0xc000ffff
 8001238:	fffc0000 	.word	0xfffc0000
 800123c:	ffff8000 	.word	0xffff8000
  while (txbuffer->next != NULL)
 8001240:	46c4      	mov	ip, r8
  if (ItMode != ((uint32_t)RESET))
 8001242:	9901      	ldr	r1, [sp, #4]
 8001244:	b1f9      	cbz	r1, 8001286 <ETH_Prepare_Tx_Descriptors+0x34a>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001246:	6899      	ldr	r1, [r3, #8]
 8001248:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800124c:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800124e:	68d9      	ldr	r1, [r3, #12]
 8001250:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001254:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001256:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800125a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800125c:	62d9      	str	r1, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 800125e:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001262:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001264:	3301      	adds	r3, #1
 8001266:	4463      	add	r3, ip
 8001268:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800126a:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 800126c:	2000      	movs	r0, #0
}
 800126e:	b003      	add	sp, #12
 8001270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001274:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001276:	4635      	mov	r5, r6
 8001278:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800127c:	4e09      	ldr	r6, [pc, #36]	; (80012a4 <ETH_Prepare_Tx_Descriptors+0x368>)
 800127e:	ea0a 0606 	and.w	r6, sl, r6
 8001282:	609e      	str	r6, [r3, #8]
 8001284:	e6ce      	b.n	8001024 <ETH_Prepare_Tx_Descriptors+0xe8>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001286:	6899      	ldr	r1, [r3, #8]
 8001288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800128c:	6099      	str	r1, [r3, #8]
 800128e:	e7de      	b.n	800124e <ETH_Prepare_Tx_Descriptors+0x312>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001290:	f8d9 2018 	ldr.w	r2, [r9, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001294:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001298:	68d3      	ldr	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 800129a:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800129c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012a0:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 80012a2:	e77e      	b.n	80011a2 <ETH_Prepare_Tx_Descriptors+0x266>
 80012a4:	c000ffff 	.word	0xc000ffff

080012a8 <ETH_UpdateDescriptor>:
{
 80012a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 80012ac:	2300      	movs	r3, #0
{
 80012ae:	b083      	sub	sp, #12
  desccount = heth->RxDescList.RxBuildDescCnt;
 80012b0:	e9d0 461a 	ldrd	r4, r6, [r0, #104]	; 0x68
  uint8_t *buff = NULL;
 80012b4:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80012b6:	f104 0312 	add.w	r3, r4, #18
 80012ba:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 80012be:	b37e      	cbz	r6, 8001320 <ETH_UpdateDescriptor+0x78>
 80012c0:	4607      	mov	r7, r0
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80012c2:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80012c6:	f04f 4841 	mov.w	r8, #3238002688	; 0xc1000000
 80012ca:	e00c      	b.n	80012e6 <ETH_UpdateDescriptor+0x3e>
 80012cc:	f8c5 800c 	str.w	r8, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 80012d0:	1c63      	adds	r3, r4, #1
 80012d2:	3c03      	subs	r4, #3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	bf98      	it	ls
 80012d8:	461c      	movls	r4, r3
  while ((desccount > 0U) && (allocStatus != 0U))
 80012da:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80012dc:	f104 0312 	add.w	r3, r4, #18
 80012e0:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 80012e4:	d011      	beq.n	800130a <ETH_UpdateDescriptor+0x62>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80012e6:	692b      	ldr	r3, [r5, #16]
 80012e8:	b13b      	cbz	r3, 80012fa <ETH_UpdateDescriptor+0x52>
 80012ea:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 80012ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1eb      	bne.n	80012cc <ETH_UpdateDescriptor+0x24>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80012f4:	f8c5 900c 	str.w	r9, [r5, #12]
 80012f8:	e7ea      	b.n	80012d0 <ETH_UpdateDescriptor+0x28>
      HAL_ETH_RxAllocateCallback(&buff);
 80012fa:	a801      	add	r0, sp, #4
 80012fc:	f001 ffe6 	bl	80032cc <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001300:	9b01      	ldr	r3, [sp, #4]
 8001302:	b113      	cbz	r3, 800130a <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001304:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001306:	602b      	str	r3, [r5, #0]
 8001308:	e7ef      	b.n	80012ea <ETH_UpdateDescriptor+0x42>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800130a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800130c:	42b3      	cmp	r3, r6
 800130e:	d007      	beq.n	8001320 <ETH_UpdateDescriptor+0x78>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001318:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 800131c:	e9c7 461a 	strd	r4, r6, [r7, #104]	; 0x68
}
 8001320:	b003      	add	sp, #12
 8001322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001326:	bf00      	nop

08001328 <HAL_ETH_Start_IT>:
{
 8001328:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 800132a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800132e:	2b10      	cmp	r3, #16
 8001330:	d001      	beq.n	8001336 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8001332:	2001      	movs	r0, #1
}
 8001334:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001336:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8001338:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 800133a:	2201      	movs	r2, #1
 800133c:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 800133e:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 8001342:	6582      	str	r2, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001344:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_ETH_Start_IT+0x98>)
 800134a:	430a      	orrs	r2, r1
 800134c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_ETH_Start_IT+0x9c>)
 8001352:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001356:	430a      	orrs	r2, r1
 8001358:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800135c:	2304      	movs	r3, #4
 800135e:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001360:	f7ff ffa2 	bl	80012a8 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001364:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8001366:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001368:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800136a:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800136e:	f041 0102 	orr.w	r1, r1, #2
 8001372:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001374:	6811      	ldr	r1, [r2, #0]
 8001376:	f041 0101 	orr.w	r1, r1, #1
 800137a:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800137c:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
 8001380:	f041 0101 	orr.w	r1, r1, #1
 8001384:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001388:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800138c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8001390:	f041 0101 	orr.w	r1, r1, #1
 8001394:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001398:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800139c:	f041 0101 	orr.w	r1, r1, #1
 80013a0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80013a4:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 80013a8:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 80013ac:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80013b0:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80013b4:	430a      	orrs	r2, r1
 80013b6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 80013ba:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	0c020060 	.word	0x0c020060
 80013c4:	0c20c000 	.word	0x0c20c000

080013c8 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013c8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80013cc:	2a23      	cmp	r2, #35	; 0x23
 80013ce:	d001      	beq.n	80013d4 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
}
 80013d2:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80013d4:	4601      	mov	r1, r0
 80013d6:	4603      	mov	r3, r0
{
 80013d8:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 80013da:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80013de:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 80013e2:	f851 2b44 	ldr.w	r2, [r1], #68
 80013e6:	4c19      	ldr	r4, [pc, #100]	; (800144c <HAL_ETH_Stop_IT+0x84>)
 80013e8:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 80013ec:	f8d0 5134 	ldr.w	r5, [r0, #308]	; 0x134
 80013f0:	402c      	ands	r4, r5
 80013f2:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80013f6:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 80013fa:	f024 0401 	bic.w	r4, r4, #1
 80013fe:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001402:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8001406:	f024 0401 	bic.w	r4, r4, #1
 800140a:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800140e:	6810      	ldr	r0, [r2, #0]
 8001410:	f020 0001 	bic.w	r0, r0, #1
 8001414:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001416:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 800141a:	f040 0001 	orr.w	r0, r0, #1
 800141e:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001422:	6810      	ldr	r0, [r2, #0]
 8001424:	f020 0002 	bic.w	r0, r0, #2
 8001428:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800142a:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800142e:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001430:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001432:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001436:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001438:	d1f7      	bne.n	800142a <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 800143a:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 800143c:	2110      	movs	r1, #16
    return HAL_OK;
 800143e:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 8001440:	659a      	str	r2, [r3, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001442:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001446:	bc30      	pop	{r4, r5}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	ffff2f3e 	.word	0xffff2f3e

08001450 <HAL_ETH_Transmit_IT>:
{
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001454:	b329      	cbz	r1, 80014a2 <HAL_ETH_Transmit_IT+0x52>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001456:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800145a:	2a23      	cmp	r2, #35	; 0x23
 800145c:	d001      	beq.n	8001462 <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
}
 8001460:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001462:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001464:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001466:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001468:	f7ff fd68 	bl	8000f3c <ETH_Prepare_Tx_Descriptors>
 800146c:	b138      	cbz	r0, 800147e <HAL_ETH_Transmit_IT+0x2e>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800146e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8001472:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800147c:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 800147e:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001482:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return HAL_OK;
 8001484:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001486:	1c53      	adds	r3, r2, #1
 8001488:	2b03      	cmp	r3, #3
 800148a:	bf88      	it	hi
 800148c:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800148e:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001490:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001492:	3306      	adds	r3, #6
 8001494:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001498:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 800149c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
}
 80014a0:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014a2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014a8:	4303      	orrs	r3, r0
 80014aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80014ae:	bd10      	pop	{r4, pc}

080014b0 <HAL_ETH_ReadData>:
{
 80014b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b4:	b085      	sub	sp, #20
 80014b6:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 80014b8:	9103      	str	r1, [sp, #12]
 80014ba:	2900      	cmp	r1, #0
 80014bc:	d06d      	beq.n	800159a <HAL_ETH_ReadData+0xea>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80014be:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80014c2:	2b23      	cmp	r3, #35	; 0x23
 80014c4:	d15e      	bne.n	8001584 <HAL_ETH_ReadData+0xd4>
  descidx = heth->RxDescList.RxDescIdx;
 80014c6:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80014ca:	f108 0312 	add.w	r3, r8, #18
 80014ce:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80014d2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80014d4:	68ea      	ldr	r2, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80014d6:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 80014da:	2a00      	cmp	r2, #0
 80014dc:	db6a      	blt.n	80015b4 <HAL_ETH_ReadData+0x104>
 80014de:	f1bb 0f00 	cmp.w	fp, #0
 80014e2:	d069      	beq.n	80015b8 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 80014e4:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80014e8:	f100 0180 	add.w	r1, r0, #128	; 0x80
 80014ec:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 80014ee:	46ca      	mov	sl, r9
 80014f0:	e003      	b.n	80014fa <HAL_ETH_ReadData+0x4a>
         && (rxdataready == 0U))
 80014f2:	45cb      	cmp	fp, r9
 80014f4:	d93f      	bls.n	8001576 <HAL_ETH_ReadData+0xc6>
 80014f6:	2e00      	cmp	r6, #0
 80014f8:	d13d      	bne.n	8001576 <HAL_ETH_ReadData+0xc6>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80014fa:	68eb      	ldr	r3, [r5, #12]
 80014fc:	005e      	lsls	r6, r3, #1
 80014fe:	d503      	bpl.n	8001508 <HAL_ETH_ReadData+0x58>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001500:	686b      	ldr	r3, [r5, #4]
 8001502:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001504:	682b      	ldr	r3, [r5, #0]
 8001506:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001508:	68eb      	ldr	r3, [r5, #12]
 800150a:	009a      	lsls	r2, r3, #2
 800150c:	d401      	bmi.n	8001512 <HAL_ETH_ReadData+0x62>
 800150e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001510:	b30e      	cbz	r6, 8001556 <HAL_ETH_ReadData+0xa6>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001512:	68eb      	ldr	r3, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001514:	68ee      	ldr	r6, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001516:	009b      	lsls	r3, r3, #2
      bufflength = heth->Init.RxBuffLen;
 8001518:	6967      	ldr	r7, [r4, #20]
        heth->RxDescList.RxDataLength = 0;
 800151a:	bf48      	it	mi
 800151c:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001520:	f016 5680 	ands.w	r6, r6, #268435456	; 0x10000000
 8001524:	d007      	beq.n	8001536 <HAL_ETH_ReadData+0x86>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001526:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 8001528:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800152a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800152c:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8001530:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001532:	68eb      	ldr	r3, [r5, #12]
 8001534:	6723      	str	r3, [r4, #112]	; 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001536:	b2bb      	uxth	r3, r7
 8001538:	692a      	ldr	r2, [r5, #16]
 800153a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800153e:	f001 fee9 	bl	8003314 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001542:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001544:	3301      	adds	r3, #1
 8001546:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800154a:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 800154e:	443b      	add	r3, r7
 8001550:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001552:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001556:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 800155a:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 800155e:	2b03      	cmp	r3, #3
 8001560:	bf8c      	ite	hi
 8001562:	f1a8 0803 	subhi.w	r8, r8, #3
 8001566:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001568:	f108 0312 	add.w	r3, r8, #18
 800156c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001570:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 8001572:	2b00      	cmp	r3, #0
 8001574:	dabd      	bge.n	80014f2 <HAL_ETH_ReadData+0x42>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001576:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001578:	444b      	add	r3, r9
 800157a:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800157c:	b9b3      	cbnz	r3, 80015ac <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 800157e:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8001582:	b91e      	cbnz	r6, 800158c <HAL_ETH_ReadData+0xdc>
    return HAL_ERROR;
 8001584:	2001      	movs	r0, #1
}
 8001586:	b005      	add	sp, #20
 8001588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 800158c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 800158e:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8001590:	9903      	ldr	r1, [sp, #12]
    return HAL_OK;
 8001592:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 8001594:	600a      	str	r2, [r1, #0]
    heth->RxDescList.pRxStart = NULL;
 8001596:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8001598:	e7f5      	b.n	8001586 <HAL_ETH_ReadData+0xd6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800159a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015a0:	4303      	orrs	r3, r0
 80015a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80015a6:	b005      	add	sp, #20
 80015a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ETH_UpdateDescriptor(heth);
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff fe7b 	bl	80012a8 <ETH_UpdateDescriptor>
 80015b2:	e7e4      	b.n	800157e <HAL_ETH_ReadData+0xce>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0e5      	beq.n	8001584 <HAL_ETH_ReadData+0xd4>
    ETH_UpdateDescriptor(heth);
 80015b8:	f7ff fe76 	bl	80012a8 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 80015bc:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 80015c0:	e7e0      	b.n	8001584 <HAL_ETH_ReadData+0xd4>
 80015c2:	bf00      	nop

080015c4 <HAL_ETH_ReleaseTxPacket>:
{
 80015c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80015c8:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80015cc:	b17d      	cbz	r5, 80015ee <HAL_ETH_ReleaseTxPacket+0x2a>
 80015ce:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 80015d0:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80015d2:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 80015d6:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80015d8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80015dc:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 80015e0:	b140      	cbz	r0, 80015f4 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80015e2:	68f3      	ldr	r3, [r6, #12]
 80015e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da08      	bge.n	8001600 <HAL_ETH_ReleaseTxPacket+0x3c>
}
 80015ee:	2000      	movs	r0, #0
 80015f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80015f4:	3401      	adds	r4, #1
 80015f6:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80015fa:	2d00      	cmp	r5, #0
 80015fc:	d1e9      	bne.n	80015d2 <HAL_ETH_ReleaseTxPacket+0xe>
 80015fe:	e7f6      	b.n	80015ee <HAL_ETH_ReleaseTxPacket+0x2a>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001600:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001602:	f001 feb7 	bl	8003374 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001606:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800160a:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 800160e:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 8001610:	6474      	str	r4, [r6, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001612:	2d00      	cmp	r5, #0
 8001614:	d1dd      	bne.n	80015d2 <HAL_ETH_ReleaseTxPacket+0xe>
 8001616:	e7ea      	b.n	80015ee <HAL_ETH_ReleaseTxPacket+0x2a>

08001618 <HAL_ETH_PMTCallback>:
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <HAL_ETH_EEECallback>:
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <HAL_ETH_WakeUpCallback>:
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop

08001624 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001624:	6803      	ldr	r3, [r0, #0]
 8001626:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800162a:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 800162e:	0649      	lsls	r1, r1, #25
{
 8001630:	b510      	push	{r4, lr}
 8001632:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001634:	d504      	bpl.n	8001640 <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001636:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 800163a:	0649      	lsls	r1, r1, #25
 800163c:	f100 808a 	bmi.w	8001754 <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001640:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8001644:	07c8      	lsls	r0, r1, #31
 8001646:	d503      	bpl.n	8001650 <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001648:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 800164c:	07c9      	lsls	r1, r1, #31
 800164e:	d476      	bmi.n	800173e <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001650:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8001654:	0448      	lsls	r0, r1, #17
 8001656:	d503      	bpl.n	8001660 <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001658:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 800165c:	0449      	lsls	r1, r1, #17
 800165e:	d41b      	bmi.n	8001698 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 8001660:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001664:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8001668:	d133      	bne.n	80016d2 <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800166a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800166e:	06d0      	lsls	r0, r2, #27
 8001670:	d447      	bmi.n	8001702 <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001672:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001676:	0691      	lsls	r1, r2, #26
 8001678:	d454      	bmi.n	8001724 <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001682:	0252      	lsls	r2, r2, #9
 8001684:	d400      	bmi.n	8001688 <HAL_ETH_IRQHandler+0x64>
}
 8001686:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001688:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 800168c:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800168e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 8001692:	f7ff ffc5 	bl	8001620 <HAL_ETH_WakeUpCallback>
}
 8001696:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001698:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80016a4:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 80016a8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80016ac:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80016b0:	d15a      	bne.n	8001768 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80016b2:	f44f 41cd 	mov.w	r1, #26240	; 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80016b6:	400b      	ands	r3, r1
 80016b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80016bc:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
      HAL_ETH_ErrorCallback(heth);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f001 fc61 	bl	8002f88 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80016cc:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 80016d0:	d0cb      	beq.n	800166a <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80016d2:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 80016d6:	21e0      	movs	r1, #224	; 0xe0
    HAL_ETH_ErrorCallback(heth);
 80016d8:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80016da:	f042 0210 	orr.w	r2, r2, #16
 80016de:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80016e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80016e6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 80016ea:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 80016ee:	f001 fc4b 	bl	8002f88 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 80016f2:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80016f4:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 80016f6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80016fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016fe:	06d0      	lsls	r0, r2, #27
 8001700:	d5b7      	bpl.n	8001672 <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001702:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 8001706:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800170c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001710:	f7ff ff82 	bl	8001618 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001714:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001716:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001718:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800171c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001720:	0691      	lsls	r1, r2, #26
 8001722:	d5aa      	bpl.n	800167a <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001724:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 8001728:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 8001732:	f7ff ff73 	bl	800161c <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001736:	2300      	movs	r3, #0
 8001738:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800173c:	e79d      	b.n	800167a <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800173e:	f248 0301 	movw	r3, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 8001742:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001744:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 8001748:	f001 fc18 	bl	8002f7c <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001752:	e77d      	b.n	8001650 <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001754:	f248 0340 	movw	r3, #32832	; 0x8040
 8001758:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 800175c:	f001 fc08 	bl	8002f70 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001766:	e76b      	b.n	8001640 <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001768:	f241 1002 	movw	r0, #4354	; 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 800176c:	21e0      	movs	r1, #224	; 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800176e:	4003      	ands	r3, r0
 8001770:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001774:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8001778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800177c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8001780:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 8001784:	e79c      	b.n	80016c0 <HAL_ETH_IRQHandler+0x9c>
 8001786:	bf00      	nop

08001788 <HAL_ETH_ReadPHYRegister>:
{
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800178c:	6800      	ldr	r0, [r0, #0]
{
 800178e:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001790:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8001794:	07db      	lsls	r3, r3, #31
 8001796:	d501      	bpl.n	800179c <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8001798:	2001      	movs	r0, #1
}
 800179a:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800179c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80017a0:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 80017a4:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80017a8:	f421 13f8 	bic.w	r3, r1, #2031616	; 0x1f0000
 80017ac:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80017b0:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80017b4:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 80017b8:	f7ff f9fe 	bl	8000bb8 <HAL_GetTick>
 80017bc:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80017be:	e005      	b.n	80017cc <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80017c0:	f7ff f9fa 	bl	8000bb8 <HAL_GetTick>
 80017c4:	1b82      	subs	r2, r0, r6
 80017c6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80017ca:	d8e5      	bhi.n	8001798 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80017cc:	6821      	ldr	r1, [r4, #0]
 80017ce:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 80017d2:	f012 0201 	ands.w	r2, r2, #1
 80017d6:	d1f3      	bne.n	80017c0 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80017d8:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 80017dc:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80017de:	b29b      	uxth	r3, r3
 80017e0:	602b      	str	r3, [r5, #0]
}
 80017e2:	bd70      	pop	{r4, r5, r6, pc}

080017e4 <HAL_ETH_WritePHYRegister>:
{
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80017e8:	6800      	ldr	r0, [r0, #0]
 80017ea:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 80017ee:	07ed      	lsls	r5, r5, #31
 80017f0:	d501      	bpl.n	80017f6 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
}
 80017f4:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80017f6:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 8001800:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001804:	480f      	ldr	r0, [pc, #60]	; (8001844 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001806:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800180a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800180e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001812:	f022 030c 	bic.w	r3, r2, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001816:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800181a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 800181e:	f7ff f9cb 	bl	8000bb8 <HAL_GetTick>
 8001822:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001824:	e005      	b.n	8001832 <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001826:	f7ff f9c7 	bl	8000bb8 <HAL_GetTick>
 800182a:	1b43      	subs	r3, r0, r5
 800182c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001830:	d8df      	bhi.n	80017f2 <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001838:	f013 0301 	ands.w	r3, r3, #1
 800183c:	d1f3      	bne.n	8001826 <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 800183e:	4618      	mov	r0, r3
}
 8001840:	bd38      	pop	{r3, r4, r5, pc}
 8001842:	bf00      	nop
 8001844:	40028000 	.word	0x40028000

08001848 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001848:	2900      	cmp	r1, #0
 800184a:	f000 80c4 	beq.w	80019d6 <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800184e:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8001850:	2000      	movs	r0, #0
{
 8001852:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001854:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001856:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001858:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800185c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001860:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001864:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001866:	62cc      	str	r4, [r1, #44]	; 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001868:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800186c:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8001874:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001878:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800187c:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 800187e:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001882:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 800188a:	f3c2 2280 	ubfx	r2, r2, #10, #1
 800188e:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001890:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001892:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001896:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800189e:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80018a0:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80018a2:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80018a4:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80018a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80018ac:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80018b6:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 80018be:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80018c2:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80018ca:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 80018ce:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f3c2 5200 	ubfx	r2, r2, #20, #1
 80018d6:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80018de:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f3c2 5280 	ubfx	r2, r2, #22, #1
 80018e6:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80018e8:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80018ea:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80018ee:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80018f0:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80018f2:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80018f4:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80018f8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80018fc:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80018fe:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001900:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001902:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001904:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001908:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800190c:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800190e:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8001916:	f3c2 4200 	ubfx	r2, r2, #16, #1
 800191a:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001924:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001928:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800192a:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800192e:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001932:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 8001934:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001938:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800193c:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800193e:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001940:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001944:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001948:	63cc      	str	r4, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800194a:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800194e:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001952:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001956:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800195a:	644c      	str	r4, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800195c:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001960:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001962:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001966:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800196a:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800196e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001970:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001972:	f004 0470 	and.w	r4, r4, #112	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001976:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001978:	650c      	str	r4, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800197a:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800197c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001980:	f002 0201 	and.w	r2, r2, #1
 8001984:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001988:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 800198c:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001990:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001994:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001998:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800199c:	f004 0472 	and.w	r4, r4, #114	; 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80019a0:	f002 0223 	and.w	r2, r2, #35	; 0x23
 80019a4:	e9c1 4216 	strd	r4, r2, [r1, #88]	; 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80019a8:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
}
 80019ac:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80019b0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80019b4:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80019b8:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 80019bc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80019c0:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80019c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80019c8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80019cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80019d0:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
}
 80019d4:	4770      	bx	lr
    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop

080019dc <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 80019dc:	b131      	cbz	r1, 80019ec <HAL_ETH_SetMACConfig+0x10>
{
 80019de:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80019e0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d003      	beq.n	80019f0 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
}
 80019ea:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
}
 80019ee:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 80019f0:	f7ff f9a0 	bl	8000d34 <ETH_SetMACConfig>
    return HAL_OK;
 80019f4:	2000      	movs	r0, #0
}
 80019f6:	bd08      	pop	{r3, pc}

080019f8 <HAL_ETH_SetMDIOClockRange>:
{
 80019f8:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 80019fa:	6803      	ldr	r3, [r0, #0]
{
 80019fc:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 80019fe:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8001a02:	f000 ff0f 	bl	8002824 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_ETH_SetMDIOClockRange+0x64>)
 8001a08:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a0a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001a0e:	4403      	add	r3, r0
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d205      	bcs.n	8001a20 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a14:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001a24:	4403      	add	r3, r0
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d805      	bhi.n	8001a36 <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a2a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a2e:	682b      	ldr	r3, [r5, #0]
 8001a30:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_ETH_SetMDIOClockRange+0x74>)
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001a3a:	4403      	add	r3, r0
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d3eb      	bcc.n	8001a18 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001a42:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001a44:	4403      	add	r3, r0
 8001a46:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a48:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a4a:	bf94      	ite	ls
 8001a4c:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a50:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a54:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
 8001a5a:	bf00      	nop
 8001a5c:	feced300 	.word	0xfeced300
 8001a60:	00e4e1c0 	.word	0x00e4e1c0
 8001a64:	fde9f140 	.word	0xfde9f140
 8001a68:	017d783f 	.word	0x017d783f
 8001a6c:	fc6c7900 	.word	0xfc6c7900
 8001a70:	02625a00 	.word	0x02625a00
 8001a74:	fa0a1f00 	.word	0xfa0a1f00
 8001a78:	02faf07f 	.word	0x02faf07f

08001a7c <HAL_ETH_Init>:
  if (heth == NULL)
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	f000 810e 	beq.w	8001c9e <HAL_ETH_Init+0x222>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a82:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8001a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a88:	4605      	mov	r5, r0
 8001a8a:	b0a5      	sub	sp, #148	; 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80b2 	beq.w	8001bf6 <HAL_ETH_Init+0x17a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b84      	ldr	r3, [pc, #528]	; (8001ca4 <HAL_ETH_Init+0x228>)
 8001a94:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001a98:	f042 0202 	orr.w	r2, r2, #2
 8001a9c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001aa4:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	f040 8095 	bne.w	8001bde <HAL_ETH_Init+0x162>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ab4:	f7ff f886 	bl	8000bc4 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ab8:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8001aba:	4a7b      	ldr	r2, [pc, #492]	; (8001ca8 <HAL_ETH_Init+0x22c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  (void)SYSCFG->PMCR;
 8001ac0:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001aca:	f7ff f875 	bl	8000bb8 <HAL_GetTick>
 8001ace:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ad0:	e006      	b.n	8001ae0 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ad2:	f7ff f871 	bl	8000bb8 <HAL_GetTick>
 8001ad6:	1b83      	subs	r3, r0, r6
 8001ad8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001adc:	f200 8082 	bhi.w	8001be4 <HAL_ETH_Init+0x168>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae6:	681c      	ldr	r4, [r3, #0]
 8001ae8:	f014 0401 	ands.w	r4, r4, #1
 8001aec:	d1f1      	bne.n	8001ad2 <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8001aee:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8001af0:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8001af2:	f7ff ff81 	bl	80019f8 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001af6:	f000 fe95 	bl	8002824 <HAL_RCC_GetHCLKFreq>
 8001afa:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <HAL_ETH_Init+0x230>)
 8001afc:	682f      	ldr	r7, [r5, #0]
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001afe:	f04f 0e02 	mov.w	lr, #2
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b02:	fba3 2300 	umull	r2, r3, r3, r0
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b0a:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b0c:	9414      	str	r4, [sp, #80]	; 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b0e:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8001b10:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b14:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b18:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001b1a:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 8001b1c:	941d      	str	r4, [sp, #116]	; 0x74
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001b22:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b26:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001b2a:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b2c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b30:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b34:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  macDefaultConf.RetryTransmission = ENABLE;
 8001b3a:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b3e:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b42:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b46:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b48:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b4c:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b50:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b52:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b56:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b5a:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8001b5c:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b60:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b62:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b66:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8001b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b6e:	4628      	mov	r0, r5
  macDefaultConf.LoopbackMode = DISABLE;
 8001b70:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e9cd e321 	strd	lr, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_ETH_Init+0x234>)
 8001b7a:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8001b7c:	f240 1301 	movw	r3, #257	; 0x101
 8001b80:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b84:	f7ff f8d6 	bl	8000d34 <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b8c:	a902      	add	r1, sp, #8
 8001b8e:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b90:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b94:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b96:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b98:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b9c:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b9e:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ba0:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ba2:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ba6:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001baa:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bae:	f7ff f97d 	bl	8000eac <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001bb2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001bb6:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 8001bba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bc2:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001bc6:	696b      	ldr	r3, [r5, #20]
 8001bc8:	f013 0203 	ands.w	r2, r3, #3
 8001bcc:	d019      	beq.n	8001c02 <HAL_ETH_Init+0x186>
    heth->gState = HAL_ETH_STATE_ERROR;
 8001bce:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 8001bd0:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001bd2:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8001bd6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8001bda:	b025      	add	sp, #148	; 0x94
 8001bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001bde:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001be2:	e767      	b.n	8001ab4 <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001be4:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8001be6:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bea:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bee:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8001bf2:	b025      	add	sp, #148	; 0x94
 8001bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bf6:	2323      	movs	r3, #35	; 0x23
 8001bf8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8001bfc:	f001 fac2 	bl	8003184 <HAL_ETH_MspInit>
 8001c00:	e747      	b.n	8001a92 <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001c02:	f8d1 4108 	ldr.w	r4, [r1, #264]	; 0x108
 8001c06:	482b      	ldr	r0, [pc, #172]	; (8001cb4 <HAL_ETH_Init+0x238>)
 8001c08:	68ee      	ldr	r6, [r5, #12]
 8001c0a:	4020      	ands	r0, r4
 8001c0c:	f106 0460 	add.w	r4, r6, #96	; 0x60
 8001c10:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 8001c14:	4633      	mov	r3, r6
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001c16:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c1a:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c24:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c26:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c2a:	3318      	adds	r3, #24
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	d1f6      	bne.n	8001c1e <HAL_ETH_Init+0x1a2>
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c30:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c32:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8001c34:	62aa      	str	r2, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c36:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8001c3a:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c3e:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c40:	f8c1 6114 	str.w	r6, [r1, #276]	; 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c44:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c46:	f8c1 6120 	str.w	r6, [r1, #288]	; 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c4a:	f105 0654 	add.w	r6, r5, #84	; 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c50:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c54:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c58:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c5a:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c5e:	42b0      	cmp	r0, r6
 8001c60:	f103 0318 	add.w	r3, r3, #24
 8001c64:	d1f3      	bne.n	8001c4e <HAL_ETH_Init+0x1d2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c66:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c68:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c6a:	65aa      	str	r2, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c6c:	e9c5 2217 	strd	r2, r2, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c70:	e9c5 221a 	strd	r2, r2, [r5, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c74:	f8c1 0130 	str.w	r0, [r1, #304]	; 0x130
  return HAL_OK;
 8001c78:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c7a:	f8c1 411c 	str.w	r4, [r1, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c7e:	3448      	adds	r4, #72	; 0x48
 8001c80:	f8c1 4128 	str.w	r4, [r1, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c84:	8899      	ldrh	r1, [r3, #4]
 8001c86:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
  heth->gState = HAL_ETH_STATE_READY;
 8001c8a:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c8c:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c8e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c92:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c96:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
}
 8001c9a:	b025      	add	sp, #148	; 0x94
 8001c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58000400 	.word	0x58000400
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	01010000 	.word	0x01010000
 8001cb4:	ffff8001 	.word	0xffff8001

08001cb8 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001cb8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cc4:	680c      	ldr	r4, [r1, #0]
{
 8001cc6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cc8:	2c00      	cmp	r4, #0
 8001cca:	f000 80a3 	beq.w	8001e14 <HAL_GPIO_Init+0x154>
 8001cce:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4f86      	ldr	r7, [pc, #536]	; (8001eec <HAL_GPIO_Init+0x22c>)
  uint32_t position = 0x00U;
 8001cd4:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8001cda:	ea12 0e04 	ands.w	lr, r2, r4
 8001cde:	f000 8092 	beq.w	8001e06 <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce2:	684d      	ldr	r5, [r1, #4]
 8001ce4:	f005 0903 	and.w	r9, r5, #3
 8001ce8:	f109 36ff 	add.w	r6, r9, #4294967295
 8001cec:	2e01      	cmp	r6, #1
 8001cee:	f240 8094 	bls.w	8001e1a <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf2:	f1b9 0f03 	cmp.w	r9, #3
 8001cf6:	f040 80ce 	bne.w	8001e96 <HAL_GPIO_Init+0x1d6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cfa:	fa09 f20c 	lsl.w	r2, r9, ip
 8001cfe:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8001d02:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d04:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d08:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8001d10:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d12:	d078      	beq.n	8001e06 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001d18:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d1c:	f003 0903 	and.w	r9, r3, #3
 8001d20:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	f042 0202 	orr.w	r2, r2, #2
 8001d26:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d2a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001d32:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8001d36:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d3a:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	f002 0202 	and.w	r2, r2, #2
 8001d42:	9201      	str	r2, [sp, #4]
 8001d44:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d4a:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d4e:	4e68      	ldr	r6, [pc, #416]	; (8001ef0 <HAL_GPIO_Init+0x230>)
 8001d50:	42b0      	cmp	r0, r6
 8001d52:	d024      	beq.n	8001d9e <HAL_GPIO_Init+0xde>
 8001d54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d58:	42b0      	cmp	r0, r6
 8001d5a:	f000 80a8 	beq.w	8001eae <HAL_GPIO_Init+0x1ee>
 8001d5e:	4e65      	ldr	r6, [pc, #404]	; (8001ef4 <HAL_GPIO_Init+0x234>)
 8001d60:	42b0      	cmp	r0, r6
 8001d62:	f000 80a9 	beq.w	8001eb8 <HAL_GPIO_Init+0x1f8>
 8001d66:	4e64      	ldr	r6, [pc, #400]	; (8001ef8 <HAL_GPIO_Init+0x238>)
 8001d68:	42b0      	cmp	r0, r6
 8001d6a:	f000 809b 	beq.w	8001ea4 <HAL_GPIO_Init+0x1e4>
 8001d6e:	4e63      	ldr	r6, [pc, #396]	; (8001efc <HAL_GPIO_Init+0x23c>)
 8001d70:	42b0      	cmp	r0, r6
 8001d72:	f000 80ab 	beq.w	8001ecc <HAL_GPIO_Init+0x20c>
 8001d76:	4e62      	ldr	r6, [pc, #392]	; (8001f00 <HAL_GPIO_Init+0x240>)
 8001d78:	42b0      	cmp	r0, r6
 8001d7a:	f000 80ac 	beq.w	8001ed6 <HAL_GPIO_Init+0x216>
 8001d7e:	4e61      	ldr	r6, [pc, #388]	; (8001f04 <HAL_GPIO_Init+0x244>)
 8001d80:	42b0      	cmp	r0, r6
 8001d82:	f000 809e 	beq.w	8001ec2 <HAL_GPIO_Init+0x202>
 8001d86:	4e60      	ldr	r6, [pc, #384]	; (8001f08 <HAL_GPIO_Init+0x248>)
 8001d88:	42b0      	cmp	r0, r6
 8001d8a:	f000 80a9 	beq.w	8001ee0 <HAL_GPIO_Init+0x220>
 8001d8e:	4e5f      	ldr	r6, [pc, #380]	; (8001f0c <HAL_GPIO_Init+0x24c>)
 8001d90:	42b0      	cmp	r0, r6
 8001d92:	bf0c      	ite	eq
 8001d94:	2609      	moveq	r6, #9
 8001d96:	260a      	movne	r6, #10
 8001d98:	fa06 f609 	lsl.w	r6, r6, r9
 8001d9c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9e:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001daa:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8001dae:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001db0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8001db4:	bf0c      	ite	eq
 8001db6:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8001db8:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dbc:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8001dc0:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8001dc4:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8001dc8:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8001dcc:	bf0c      	ite	eq
 8001dce:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8001dd0:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd4:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8001dd8:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8001ddc:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001de0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8001de4:	bf0c      	ite	eq
 8001de6:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8001de8:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dec:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dee:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8001df2:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8001df6:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 8001dfa:	bf54      	ite	pl
 8001dfc:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8001dfe:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8001e02:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8001e06:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e08:	f10c 0c02 	add.w	ip, ip, #2
 8001e0c:	fa34 f203 	lsrs.w	r2, r4, r3
 8001e10:	f47f af61 	bne.w	8001cd6 <HAL_GPIO_Init+0x16>
  }
}
 8001e14:	b003      	add	sp, #12
 8001e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e1a:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8001e1e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e20:	fa08 f80c 	lsl.w	r8, r8, ip
 8001e24:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e28:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e2a:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001e32:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001e36:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e38:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8001e3c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e40:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e42:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001e48:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001e4a:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4c:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e50:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e52:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e56:	fa06 f60c 	lsl.w	r6, r6, ip
 8001e5a:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8001e5e:	fa09 f20c 	lsl.w	r2, r9, ip
 8001e62:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e64:	f47f af4d 	bne.w	8001d02 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8001e68:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e6c:	f003 0b07 	and.w	fp, r3, #7
 8001e70:	260f      	movs	r6, #15
 8001e72:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001e76:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001e7a:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e7e:	fa06 f60b 	lsl.w	r6, r6, fp
 8001e82:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e86:	690e      	ldr	r6, [r1, #16]
 8001e88:	fa06 f60b 	lsl.w	r6, r6, fp
 8001e8c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001e90:	f8c9 6020 	str.w	r6, [r9, #32]
 8001e94:	e735      	b.n	8001d02 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e96:	f04f 0803 	mov.w	r8, #3
 8001e9a:	fa08 f80c 	lsl.w	r8, r8, ip
 8001e9e:	ea6f 0808 	mvn.w	r8, r8
 8001ea2:	e7d2      	b.n	8001e4a <HAL_GPIO_Init+0x18a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ea4:	2603      	movs	r6, #3
 8001ea6:	fa06 f609 	lsl.w	r6, r6, r9
 8001eaa:	4332      	orrs	r2, r6
 8001eac:	e777      	b.n	8001d9e <HAL_GPIO_Init+0xde>
 8001eae:	2601      	movs	r6, #1
 8001eb0:	fa06 f609 	lsl.w	r6, r6, r9
 8001eb4:	4332      	orrs	r2, r6
 8001eb6:	e772      	b.n	8001d9e <HAL_GPIO_Init+0xde>
 8001eb8:	2602      	movs	r6, #2
 8001eba:	fa06 f609 	lsl.w	r6, r6, r9
 8001ebe:	4332      	orrs	r2, r6
 8001ec0:	e76d      	b.n	8001d9e <HAL_GPIO_Init+0xde>
 8001ec2:	2606      	movs	r6, #6
 8001ec4:	fa06 f609 	lsl.w	r6, r6, r9
 8001ec8:	4332      	orrs	r2, r6
 8001eca:	e768      	b.n	8001d9e <HAL_GPIO_Init+0xde>
 8001ecc:	2604      	movs	r6, #4
 8001ece:	fa06 f609 	lsl.w	r6, r6, r9
 8001ed2:	4332      	orrs	r2, r6
 8001ed4:	e763      	b.n	8001d9e <HAL_GPIO_Init+0xde>
 8001ed6:	2605      	movs	r6, #5
 8001ed8:	fa06 f609 	lsl.w	r6, r6, r9
 8001edc:	4332      	orrs	r2, r6
 8001ede:	e75e      	b.n	8001d9e <HAL_GPIO_Init+0xde>
 8001ee0:	2607      	movs	r6, #7
 8001ee2:	fa06 f609 	lsl.w	r6, r6, r9
 8001ee6:	4332      	orrs	r2, r6
 8001ee8:	e759      	b.n	8001d9e <HAL_GPIO_Init+0xde>
 8001eea:	bf00      	nop
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	58020000 	.word	0x58020000
 8001ef4:	58020800 	.word	0x58020800
 8001ef8:	58020c00 	.word	0x58020c00
 8001efc:	58021000 	.word	0x58021000
 8001f00:	58021400 	.word	0x58021400
 8001f04:	58021800 	.word	0x58021800
 8001f08:	58021c00 	.word	0x58021c00
 8001f0c:	58022400 	.word	0x58022400

08001f10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f10:	b902      	cbnz	r2, 8001f14 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f12:	0409      	lsls	r1, r1, #16
 8001f14:	6181      	str	r1, [r0, #24]
  }
}
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f18:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f1a:	ea01 0203 	and.w	r2, r1, r3
 8001f1e:	ea21 0103 	bic.w	r1, r1, r3
 8001f22:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001f26:	6181      	str	r1, [r0, #24]
}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop

08001f2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f2c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f2e:	4c10      	ldr	r4, [pc, #64]	; (8001f70 <HAL_PWREx_ConfigSupply+0x44>)
 8001f30:	68e3      	ldr	r3, [r4, #12]
 8001f32:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f36:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f38:	d105      	bne.n	8001f46 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f3a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f3e:	1a18      	subs	r0, r3, r0
 8001f40:	bf18      	it	ne
 8001f42:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001f44:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f46:	f023 0307 	bic.w	r3, r3, #7
 8001f4a:	4303      	orrs	r3, r0
 8001f4c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8001f4e:	f7fe fe33 	bl	8000bb8 <HAL_GetTick>
 8001f52:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f54:	e005      	b.n	8001f62 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f56:	f7fe fe2f 	bl	8000bb8 <HAL_GetTick>
 8001f5a:	1b40      	subs	r0, r0, r5
 8001f5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f60:	d804      	bhi.n	8001f6c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f62:	6863      	ldr	r3, [r4, #4]
 8001f64:	049b      	lsls	r3, r3, #18
 8001f66:	d5f6      	bpl.n	8001f56 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8001f68:	2000      	movs	r0, #0
}
 8001f6a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001f6c:	2001      	movs	r0, #1
}
 8001f6e:	bd38      	pop	{r3, r4, r5, pc}
 8001f70:	58024800 	.word	0x58024800

08001f74 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8001f76:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f7c:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8001f7e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f82:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f84:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8001f88:	d038      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f8a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f8e:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f92:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f96:	fb05 f101 	mul.w	r1, r5, r1
 8001f9a:	2a01      	cmp	r2, #1
 8001f9c:	ee07 1a90 	vmov	s15, r1
 8001fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8001fa6:	2a02      	cmp	r2, #2
 8001fa8:	d04e      	beq.n	8002048 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8001faa:	b34a      	cbz	r2, 8002000 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fac:	ee07 0a90 	vmov	s15, r0
 8001fb0:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8002068 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8001fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8001fbe:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800206c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8001fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8001fd6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001fda:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001fe6:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff8:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001ffc:	bc30      	pop	{r4, r5}
 8001ffe:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	0692      	lsls	r2, r2, #26
 8002004:	d527      	bpl.n	8002056 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002006:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002008:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800200e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002014:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800206c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8002020:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002024:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002026:	ee06 3a90 	vmov	s13, r3
 800202a:	ee06 2a10 	vmov	s12, r2
 800202e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002032:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002036:	eee7 6a05 	vfma.f32	s13, s14, s10
 800203a:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800203e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002042:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002046:	e7ca      	b.n	8001fde <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002048:	ee07 0a90 	vmov	s15, r0
 800204c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8002074 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8002050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002054:	e7b0      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002056:	ee07 0a90 	vmov	s15, r0
 800205a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8002078 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002062:	e7a9      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002064:	58024400 	.word	0x58024400
 8002068:	4a742400 	.word	0x4a742400
 800206c:	39000000 	.word	0x39000000
 8002070:	03d09000 	.word	0x03d09000
 8002074:	4af42400 	.word	0x4af42400
 8002078:	4c742400 	.word	0x4c742400

0800207c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800207c:	2800      	cmp	r0, #0
 800207e:	f000 81bd 	beq.w	80023fc <HAL_RCC_OscConfig+0x380>
{
 8002082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002084:	6803      	ldr	r3, [r0, #0]
 8002086:	4604      	mov	r4, r0
 8002088:	07d9      	lsls	r1, r3, #31
 800208a:	d52e      	bpl.n	80020ea <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208c:	4993      	ldr	r1, [pc, #588]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 800208e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002090:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002092:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002096:	2a10      	cmp	r2, #16
 8002098:	f000 80f0 	beq.w	800227c <HAL_RCC_OscConfig+0x200>
 800209c:	2a18      	cmp	r2, #24
 800209e:	f000 80e8 	beq.w	8002272 <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a2:	6863      	ldr	r3, [r4, #4]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	f000 8108 	beq.w	80022bc <HAL_RCC_OscConfig+0x240>
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8146 	beq.w	800233e <HAL_RCC_OscConfig+0x2c2>
 80020b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f000 8234 	beq.w	8002526 <HAL_RCC_OscConfig+0x4aa>
 80020be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020cc:	f7fe fd74 	bl	8000bb8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020d0:	4e82      	ldr	r6, [pc, #520]	; (80022dc <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80020d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020d4:	e005      	b.n	80020e2 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d6:	f7fe fd6f 	bl	8000bb8 <HAL_GetTick>
 80020da:	1b40      	subs	r0, r0, r5
 80020dc:	2864      	cmp	r0, #100	; 0x64
 80020de:	f200 812c 	bhi.w	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020e2:	6833      	ldr	r3, [r6, #0]
 80020e4:	039b      	lsls	r3, r3, #14
 80020e6:	d5f6      	bpl.n	80020d6 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	079d      	lsls	r5, r3, #30
 80020ec:	d47e      	bmi.n	80021ec <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020ee:	06d9      	lsls	r1, r3, #27
 80020f0:	d528      	bpl.n	8002144 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	497a      	ldr	r1, [pc, #488]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 80020f4:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020f6:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020fc:	2a08      	cmp	r2, #8
 80020fe:	f000 80cd 	beq.w	800229c <HAL_RCC_OscConfig+0x220>
 8002102:	2a18      	cmp	r2, #24
 8002104:	f000 80c5 	beq.w	8002292 <HAL_RCC_OscConfig+0x216>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002108:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800210a:	4d74      	ldr	r5, [pc, #464]	; (80022dc <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 814e 	beq.w	80023ae <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 8002112:	682b      	ldr	r3, [r5, #0]
 8002114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002118:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800211a:	f7fe fd4d 	bl	8000bb8 <HAL_GetTick>
 800211e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002120:	e005      	b.n	800212e <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002122:	f7fe fd49 	bl	8000bb8 <HAL_GetTick>
 8002126:	1b80      	subs	r0, r0, r6
 8002128:	2802      	cmp	r0, #2
 800212a:	f200 8106 	bhi.w	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800212e:	682b      	ldr	r3, [r5, #0]
 8002130:	05db      	lsls	r3, r3, #23
 8002132:	d5f6      	bpl.n	8002122 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002134:	68eb      	ldr	r3, [r5, #12]
 8002136:	6a22      	ldr	r2, [r4, #32]
 8002138:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800213c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002140:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	071d      	lsls	r5, r3, #28
 8002146:	d516      	bpl.n	8002176 <HAL_RCC_OscConfig+0xfa>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002148:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800214a:	4d64      	ldr	r5, [pc, #400]	; (80022dc <HAL_RCC_OscConfig+0x260>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 810c 	beq.w	800236a <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 8002152:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800215a:	f7fe fd2d 	bl	8000bb8 <HAL_GetTick>
 800215e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002160:	e005      	b.n	800216e <HAL_RCC_OscConfig+0xf2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002162:	f7fe fd29 	bl	8000bb8 <HAL_GetTick>
 8002166:	1b80      	subs	r0, r0, r6
 8002168:	2802      	cmp	r0, #2
 800216a:	f200 80e6 	bhi.w	800233a <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800216e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002170:	0798      	lsls	r0, r3, #30
 8002172:	d5f6      	bpl.n	8002162 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	069a      	lsls	r2, r3, #26
 8002178:	d516      	bpl.n	80021a8 <HAL_RCC_OscConfig+0x12c>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800217a:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800217c:	4d57      	ldr	r5, [pc, #348]	; (80022dc <HAL_RCC_OscConfig+0x260>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8104 	beq.w	800238c <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8002184:	682b      	ldr	r3, [r5, #0]
 8002186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800218a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800218c:	f7fe fd14 	bl	8000bb8 <HAL_GetTick>
 8002190:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002192:	e005      	b.n	80021a0 <HAL_RCC_OscConfig+0x124>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002194:	f7fe fd10 	bl	8000bb8 <HAL_GetTick>
 8002198:	1b80      	subs	r0, r0, r6
 800219a:	2802      	cmp	r0, #2
 800219c:	f200 80cd 	bhi.w	800233a <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	049f      	lsls	r7, r3, #18
 80021a4:	d5f6      	bpl.n	8002194 <HAL_RCC_OscConfig+0x118>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	0759      	lsls	r1, r3, #29
 80021aa:	f100 808d 	bmi.w	80022c8 <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80021b0:	b1d0      	cbz	r0, 80021e8 <HAL_RCC_OscConfig+0x16c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021b2:	4d4a      	ldr	r5, [pc, #296]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 80021b4:	692b      	ldr	r3, [r5, #16]
 80021b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ba:	2b18      	cmp	r3, #24
 80021bc:	f000 8185 	beq.w	80024ca <HAL_RCC_OscConfig+0x44e>
        __HAL_RCC_PLL_DISABLE();
 80021c0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80021c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ca:	f000 8119 	beq.w	8002400 <HAL_RCC_OscConfig+0x384>
        tickstart = HAL_GetTick();
 80021ce:	f7fe fcf3 	bl	8000bb8 <HAL_GetTick>
 80021d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021d4:	e005      	b.n	80021e2 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d6:	f7fe fcef 	bl	8000bb8 <HAL_GetTick>
 80021da:	1b00      	subs	r0, r0, r4
 80021dc:	2802      	cmp	r0, #2
 80021de:	f200 80ac 	bhi.w	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e2:	682b      	ldr	r3, [r5, #0]
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	d4f6      	bmi.n	80021d6 <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 80021e8:	2000      	movs	r0, #0
}
 80021ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ec:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 80021ee:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021f2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80021f6:	d122      	bne.n	800223e <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f8:	4b38      	ldr	r3, [pc, #224]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 80021fa:	68e2      	ldr	r2, [r4, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0759      	lsls	r1, r3, #29
 8002200:	d501      	bpl.n	8002206 <HAL_RCC_OscConfig+0x18a>
 8002202:	2a00      	cmp	r2, #0
 8002204:	d043      	beq.n	800228e <HAL_RCC_OscConfig+0x212>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002206:	4d35      	ldr	r5, [pc, #212]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 8002208:	682b      	ldr	r3, [r5, #0]
 800220a:	f023 0319 	bic.w	r3, r3, #25
 800220e:	4313      	orrs	r3, r2
 8002210:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8002212:	f7fe fcd1 	bl	8000bb8 <HAL_GetTick>
 8002216:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002218:	e005      	b.n	8002226 <HAL_RCC_OscConfig+0x1aa>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fccd 	bl	8000bb8 <HAL_GetTick>
 800221e:	1b80      	subs	r0, r0, r6
 8002220:	2802      	cmp	r0, #2
 8002222:	f200 808a 	bhi.w	800233a <HAL_RCC_OscConfig+0x2be>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	075b      	lsls	r3, r3, #29
 800222a:	d5f6      	bpl.n	800221a <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	686b      	ldr	r3, [r5, #4]
 800222e:	6922      	ldr	r2, [r4, #16]
 8002230:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002234:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002238:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	e757      	b.n	80020ee <HAL_RCC_OscConfig+0x72>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800223e:	2b18      	cmp	r3, #24
 8002240:	f000 80d8 	beq.w	80023f4 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002244:	4d25      	ldr	r5, [pc, #148]	; (80022dc <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002246:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002248:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800224a:	2a00      	cmp	r2, #0
 800224c:	f000 80c1 	beq.w	80023d2 <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002250:	f023 0319 	bic.w	r3, r3, #25
 8002254:	4313      	orrs	r3, r2
 8002256:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002258:	f7fe fcae 	bl	8000bb8 <HAL_GetTick>
 800225c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800225e:	e004      	b.n	800226a <HAL_RCC_OscConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002260:	f7fe fcaa 	bl	8000bb8 <HAL_GetTick>
 8002264:	1b80      	subs	r0, r0, r6
 8002266:	2802      	cmp	r0, #2
 8002268:	d867      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800226a:	682b      	ldr	r3, [r5, #0]
 800226c:	075f      	lsls	r7, r3, #29
 800226e:	d5f7      	bpl.n	8002260 <HAL_RCC_OscConfig+0x1e4>
 8002270:	e7dc      	b.n	800222c <HAL_RCC_OscConfig+0x1b0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002272:	f001 0103 	and.w	r1, r1, #3
 8002276:	2902      	cmp	r1, #2
 8002278:	f47f af13 	bne.w	80020a2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	0392      	lsls	r2, r2, #14
 8002282:	f57f af32 	bpl.w	80020ea <HAL_RCC_OscConfig+0x6e>
 8002286:	6862      	ldr	r2, [r4, #4]
 8002288:	2a00      	cmp	r2, #0
 800228a:	f47f af2e 	bne.w	80020ea <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800228e:	2001      	movs	r0, #1
}
 8002290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002292:	f001 0103 	and.w	r1, r1, #3
 8002296:	2901      	cmp	r1, #1
 8002298:	f47f af36 	bne.w	8002108 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	05d2      	lsls	r2, r2, #23
 80022a2:	d502      	bpl.n	80022aa <HAL_RCC_OscConfig+0x22e>
 80022a4:	69e2      	ldr	r2, [r4, #28]
 80022a6:	2a80      	cmp	r2, #128	; 0x80
 80022a8:	d1f1      	bne.n	800228e <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022aa:	490c      	ldr	r1, [pc, #48]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 80022ac:	6a20      	ldr	r0, [r4, #32]
 80022ae:	68ca      	ldr	r2, [r1, #12]
 80022b0:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80022b4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80022b8:	60ca      	str	r2, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022ba:	e743      	b.n	8002144 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_RCC_OscConfig+0x260>)
 80022be:	6813      	ldr	r3, [r2, #0]
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c6:	e701      	b.n	80020cc <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80022c8:	4d05      	ldr	r5, [pc, #20]	; (80022e0 <HAL_RCC_OscConfig+0x264>)
 80022ca:	682b      	ldr	r3, [r5, #0]
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80022d2:	f7fe fc71 	bl	8000bb8 <HAL_GetTick>
 80022d6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_OscConfig+0x272>
 80022da:	bf00      	nop
 80022dc:	58024400 	.word	0x58024400
 80022e0:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80022e4:	f7fe fc68 	bl	8000bb8 <HAL_GetTick>
 80022e8:	1b80      	subs	r0, r0, r6
 80022ea:	2864      	cmp	r0, #100	; 0x64
 80022ec:	d825      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022ee:	682b      	ldr	r3, [r5, #0]
 80022f0:	05da      	lsls	r2, r3, #23
 80022f2:	d5f7      	bpl.n	80022e4 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	68a3      	ldr	r3, [r4, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f000 8136 	beq.w	8002568 <HAL_RCC_OscConfig+0x4ec>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 811a 	beq.w	8002536 <HAL_RCC_OscConfig+0x4ba>
 8002302:	2b05      	cmp	r3, #5
 8002304:	4b9f      	ldr	r3, [pc, #636]	; (8002584 <HAL_RCC_OscConfig+0x508>)
 8002306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002308:	f000 8134 	beq.w	8002574 <HAL_RCC_OscConfig+0x4f8>
 800230c:	f022 0201 	bic.w	r2, r2, #1
 8002310:	671a      	str	r2, [r3, #112]	; 0x70
 8002312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002314:	f022 0204 	bic.w	r2, r2, #4
 8002318:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800231a:	f7fe fc4d 	bl	8000bb8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800231e:	4e99      	ldr	r6, [pc, #612]	; (8002584 <HAL_RCC_OscConfig+0x508>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002324:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002326:	e004      	b.n	8002332 <HAL_RCC_OscConfig+0x2b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7fe fc46 	bl	8000bb8 <HAL_GetTick>
 800232c:	1b40      	subs	r0, r0, r5
 800232e:	42b8      	cmp	r0, r7
 8002330:	d803      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002332:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002334:	079b      	lsls	r3, r3, #30
 8002336:	d5f7      	bpl.n	8002328 <HAL_RCC_OscConfig+0x2ac>
 8002338:	e739      	b.n	80021ae <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 800233a:	2003      	movs	r0, #3
}
 800233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233e:	4d91      	ldr	r5, [pc, #580]	; (8002584 <HAL_RCC_OscConfig+0x508>)
 8002340:	682b      	ldr	r3, [r5, #0]
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	602b      	str	r3, [r5, #0]
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002350:	f7fe fc32 	bl	8000bb8 <HAL_GetTick>
 8002354:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002356:	e004      	b.n	8002362 <HAL_RCC_OscConfig+0x2e6>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fc2e 	bl	8000bb8 <HAL_GetTick>
 800235c:	1b80      	subs	r0, r0, r6
 800235e:	2864      	cmp	r0, #100	; 0x64
 8002360:	d8eb      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002362:	682b      	ldr	r3, [r5, #0]
 8002364:	039f      	lsls	r7, r3, #14
 8002366:	d4f7      	bmi.n	8002358 <HAL_RCC_OscConfig+0x2dc>
 8002368:	e6be      	b.n	80020e8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800236a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002372:	f7fe fc21 	bl	8000bb8 <HAL_GetTick>
 8002376:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002378:	e004      	b.n	8002384 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237a:	f7fe fc1d 	bl	8000bb8 <HAL_GetTick>
 800237e:	1b80      	subs	r0, r0, r6
 8002380:	2802      	cmp	r0, #2
 8002382:	d8da      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002384:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002386:	0799      	lsls	r1, r3, #30
 8002388:	d4f7      	bmi.n	800237a <HAL_RCC_OscConfig+0x2fe>
 800238a:	e6f3      	b.n	8002174 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002392:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002394:	f7fe fc10 	bl	8000bb8 <HAL_GetTick>
 8002398:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800239a:	e004      	b.n	80023a6 <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800239c:	f7fe fc0c 	bl	8000bb8 <HAL_GetTick>
 80023a0:	1b80      	subs	r0, r0, r6
 80023a2:	2802      	cmp	r0, #2
 80023a4:	d8c9      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023a6:	682b      	ldr	r3, [r5, #0]
 80023a8:	0498      	lsls	r0, r3, #18
 80023aa:	d4f7      	bmi.n	800239c <HAL_RCC_OscConfig+0x320>
 80023ac:	e6fb      	b.n	80021a6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023b6:	f7fe fbff 	bl	8000bb8 <HAL_GetTick>
 80023ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023bc:	e004      	b.n	80023c8 <HAL_RCC_OscConfig+0x34c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023be:	f7fe fbfb 	bl	8000bb8 <HAL_GetTick>
 80023c2:	1b80      	subs	r0, r0, r6
 80023c4:	2802      	cmp	r0, #2
 80023c6:	d8b8      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	05df      	lsls	r7, r3, #23
 80023cc:	d4f7      	bmi.n	80023be <HAL_RCC_OscConfig+0x342>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	e6b8      	b.n	8002144 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023d8:	f7fe fbee 	bl	8000bb8 <HAL_GetTick>
 80023dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023de:	e004      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe fbea 	bl	8000bb8 <HAL_GetTick>
 80023e4:	1b80      	subs	r0, r0, r6
 80023e6:	2802      	cmp	r0, #2
 80023e8:	d8a7      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023ea:	682b      	ldr	r3, [r5, #0]
 80023ec:	0758      	lsls	r0, r3, #29
 80023ee:	d4f7      	bmi.n	80023e0 <HAL_RCC_OscConfig+0x364>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	e67c      	b.n	80020ee <HAL_RCC_OscConfig+0x72>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023f4:	0790      	lsls	r0, r2, #30
 80023f6:	f47f af25 	bne.w	8002244 <HAL_RCC_OscConfig+0x1c8>
 80023fa:	e6fd      	b.n	80021f8 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 80023fc:	2001      	movs	r0, #1
}
 80023fe:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002400:	f7fe fbda 	bl	8000bb8 <HAL_GetTick>
 8002404:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002406:	e004      	b.n	8002412 <HAL_RCC_OscConfig+0x396>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe fbd6 	bl	8000bb8 <HAL_GetTick>
 800240c:	1b80      	subs	r0, r0, r6
 800240e:	2802      	cmp	r0, #2
 8002410:	d893      	bhi.n	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002412:	682b      	ldr	r3, [r5, #0]
 8002414:	0199      	lsls	r1, r3, #6
 8002416:	d4f7      	bmi.n	8002408 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002418:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800241a:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <HAL_RCC_OscConfig+0x50c>)
 800241c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800241e:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002420:	495a      	ldr	r1, [pc, #360]	; (800258c <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002422:	4e58      	ldr	r6, [pc, #352]	; (8002584 <HAL_RCC_OscConfig+0x508>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002424:	4313      	orrs	r3, r2
 8002426:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002428:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800242c:	62ab      	str	r3, [r5, #40]	; 0x28
 800242e:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8002432:	3b01      	subs	r3, #1
 8002434:	3a01      	subs	r2, #1
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	0412      	lsls	r2, r2, #16
 800243a:	b29b      	uxth	r3, r3
 800243c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002440:	4313      	orrs	r3, r2
 8002442:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002444:	3a01      	subs	r2, #1
 8002446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800244a:	4313      	orrs	r3, r2
 800244c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800244e:	3a01      	subs	r2, #1
 8002450:	0612      	lsls	r2, r2, #24
 8002452:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002456:	4313      	orrs	r3, r2
 8002458:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800245a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002462:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002464:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002466:	4011      	ands	r1, r2
 8002468:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800246c:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800246e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002470:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002472:	f023 030c 	bic.w	r3, r3, #12
 8002476:	4313      	orrs	r3, r2
 8002478:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800247a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800247c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800247e:	f023 0302 	bic.w	r3, r3, #2
 8002482:	4313      	orrs	r3, r2
 8002484:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002486:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800248e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002496:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800249e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80024a6:	682b      	ldr	r3, [r5, #0]
 80024a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024ae:	f7fe fb83 	bl	8000bb8 <HAL_GetTick>
 80024b2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024b4:	e005      	b.n	80024c2 <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe fb7f 	bl	8000bb8 <HAL_GetTick>
 80024ba:	1b00      	subs	r0, r0, r4
 80024bc:	2802      	cmp	r0, #2
 80024be:	f63f af3c 	bhi.w	800233a <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024c2:	6833      	ldr	r3, [r6, #0]
 80024c4:	019a      	lsls	r2, r3, #6
 80024c6:	d5f6      	bpl.n	80024b6 <HAL_RCC_OscConfig+0x43a>
 80024c8:	e68e      	b.n	80021e8 <HAL_RCC_OscConfig+0x16c>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ca:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024ce:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d0:	f43f ae8b 	beq.w	80021ea <HAL_RCC_OscConfig+0x16e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d4:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80024da:	428b      	cmp	r3, r1
 80024dc:	f47f aed7 	bne.w	800228e <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e0:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024e6:	429a      	cmp	r2, r3
 80024e8:	f47f aed1 	bne.w	800228e <HAL_RCC_OscConfig+0x212>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024ee:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80024f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f47f aeca 	bne.w	800228e <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024fc:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8002500:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	f47f aec3 	bne.w	800228e <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002508:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800250a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800250e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	f47f aebc 	bne.w	800228e <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002516:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002518:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800251c:	3801      	subs	r0, #1
    return HAL_ERROR;
 800251e:	1a28      	subs	r0, r5, r0
 8002520:	bf18      	it	ne
 8002522:	2001      	movne	r0, #1
}
 8002524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002526:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e5ca      	b.n	80020cc <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002536:	4d13      	ldr	r5, [pc, #76]	; (8002584 <HAL_RCC_OscConfig+0x508>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	672b      	str	r3, [r5, #112]	; 0x70
 8002544:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800254c:	f7fe fb34 	bl	8000bb8 <HAL_GetTick>
 8002550:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002552:	e005      	b.n	8002560 <HAL_RCC_OscConfig+0x4e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe fb30 	bl	8000bb8 <HAL_GetTick>
 8002558:	1b80      	subs	r0, r0, r6
 800255a:	42b8      	cmp	r0, r7
 800255c:	f63f aeed 	bhi.w	800233a <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002560:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002562:	0798      	lsls	r0, r3, #30
 8002564:	d4f6      	bmi.n	8002554 <HAL_RCC_OscConfig+0x4d8>
 8002566:	e622      	b.n	80021ae <HAL_RCC_OscConfig+0x132>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <HAL_RCC_OscConfig+0x508>)
 800256a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002572:	e6d2      	b.n	800231a <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002574:	f042 0204 	orr.w	r2, r2, #4
 8002578:	671a      	str	r2, [r3, #112]	; 0x70
 800257a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	671a      	str	r2, [r3, #112]	; 0x70
 8002582:	e6ca      	b.n	800231a <HAL_RCC_OscConfig+0x29e>
 8002584:	58024400 	.word	0x58024400
 8002588:	fffffc0c 	.word	0xfffffc0c
 800258c:	ffff0007 	.word	0xffff0007

08002590 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x34>)
 8002592:	6913      	ldr	r3, [r2, #16]
 8002594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002598:	2b10      	cmp	r3, #16
 800259a:	d004      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x16>
 800259c:	2b18      	cmp	r3, #24
 800259e:	d00d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x2c>
 80025a0:	b11b      	cbz	r3, 80025aa <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80025a2:	4809      	ldr	r0, [pc, #36]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x38>)
 80025a4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80025a8:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025aa:	6813      	ldr	r3, [r2, #0]
 80025ac:	069b      	lsls	r3, r3, #26
 80025ae:	d507      	bpl.n	80025c0 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	4807      	ldr	r0, [pc, #28]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x40>)
 80025b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80025b8:	40d8      	lsrs	r0, r3
 80025ba:	4770      	bx	lr
 80025bc:	f7ff bcda 	b.w	8001f74 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025c0:	4803      	ldr	r0, [pc, #12]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80025c2:	4770      	bx	lr
 80025c4:	58024400 	.word	0x58024400
 80025c8:	003d0900 	.word	0x003d0900
 80025cc:	007a1200 	.word	0x007a1200
 80025d0:	03d09000 	.word	0x03d09000

080025d4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80025d4:	2800      	cmp	r0, #0
 80025d6:	f000 810c 	beq.w	80027f2 <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025da:	4a8c      	ldr	r2, [pc, #560]	; (800280c <HAL_RCC_ClockConfig+0x238>)
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	428b      	cmp	r3, r1
{
 80025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e8:	4604      	mov	r4, r0
 80025ea:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	d20c      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	6813      	ldr	r3, [r2, #0]
 80025f0:	f023 030f 	bic.w	r3, r3, #15
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	428b      	cmp	r3, r1
 8002600:	d002      	beq.n	8002608 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
}
 8002604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	075f      	lsls	r7, r3, #29
 800260c:	d50b      	bpl.n	8002626 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800260e:	4980      	ldr	r1, [pc, #512]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 8002610:	6920      	ldr	r0, [r4, #16]
 8002612:	698a      	ldr	r2, [r1, #24]
 8002614:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002618:	4290      	cmp	r0, r2
 800261a:	d904      	bls.n	8002626 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800261c:	698a      	ldr	r2, [r1, #24]
 800261e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002622:	4302      	orrs	r2, r0
 8002624:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002626:	071e      	lsls	r6, r3, #28
 8002628:	d50b      	bpl.n	8002642 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800262a:	4979      	ldr	r1, [pc, #484]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 800262c:	6960      	ldr	r0, [r4, #20]
 800262e:	69ca      	ldr	r2, [r1, #28]
 8002630:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002634:	4290      	cmp	r0, r2
 8002636:	d904      	bls.n	8002642 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002638:	69ca      	ldr	r2, [r1, #28]
 800263a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800263e:	4302      	orrs	r2, r0
 8002640:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	06d8      	lsls	r0, r3, #27
 8002644:	d50b      	bpl.n	800265e <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002646:	4972      	ldr	r1, [pc, #456]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 8002648:	69a0      	ldr	r0, [r4, #24]
 800264a:	69ca      	ldr	r2, [r1, #28]
 800264c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002650:	4290      	cmp	r0, r2
 8002652:	d904      	bls.n	800265e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002654:	69ca      	ldr	r2, [r1, #28]
 8002656:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800265a:	4302      	orrs	r2, r0
 800265c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800265e:	0699      	lsls	r1, r3, #26
 8002660:	d50b      	bpl.n	800267a <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002662:	496b      	ldr	r1, [pc, #428]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 8002664:	69e0      	ldr	r0, [r4, #28]
 8002666:	6a0a      	ldr	r2, [r1, #32]
 8002668:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800266c:	4290      	cmp	r0, r2
 800266e:	d904      	bls.n	800267a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002670:	6a0a      	ldr	r2, [r1, #32]
 8002672:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002676:	4302      	orrs	r2, r0
 8002678:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267a:	079a      	lsls	r2, r3, #30
 800267c:	f140 80ab 	bpl.w	80027d6 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002680:	4863      	ldr	r0, [pc, #396]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 8002682:	68e1      	ldr	r1, [r4, #12]
 8002684:	6982      	ldr	r2, [r0, #24]
 8002686:	f002 020f 	and.w	r2, r2, #15
 800268a:	4291      	cmp	r1, r2
 800268c:	d904      	bls.n	8002698 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268e:	6982      	ldr	r2, [r0, #24]
 8002690:	f022 020f 	bic.w	r2, r2, #15
 8002694:	430a      	orrs	r2, r1
 8002696:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002698:	07d8      	lsls	r0, r3, #31
 800269a:	d530      	bpl.n	80026fe <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800269c:	4a5c      	ldr	r2, [pc, #368]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 800269e:	68a1      	ldr	r1, [r4, #8]
 80026a0:	6993      	ldr	r3, [r2, #24]
 80026a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a6:	430b      	orrs	r3, r1
 80026a8:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ac:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ae:	2902      	cmp	r1, #2
 80026b0:	f000 80a1 	beq.w	80027f6 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b4:	2903      	cmp	r1, #3
 80026b6:	f000 8098 	beq.w	80027ea <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026ba:	2901      	cmp	r1, #1
 80026bc:	f000 80a1 	beq.w	8002802 <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c0:	0758      	lsls	r0, r3, #29
 80026c2:	d59e      	bpl.n	8002602 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c4:	4e52      	ldr	r6, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	6933      	ldr	r3, [r6, #16]
 80026cc:	f023 0307 	bic.w	r3, r3, #7
 80026d0:	430b      	orrs	r3, r1
 80026d2:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 80026d4:	f7fe fa70 	bl	8000bb8 <HAL_GetTick>
 80026d8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e005      	b.n	80026e8 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7fe fa6c 	bl	8000bb8 <HAL_GetTick>
 80026e0:	1bc0      	subs	r0, r0, r7
 80026e2:	4540      	cmp	r0, r8
 80026e4:	f200 808b 	bhi.w	80027fe <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e8:	6933      	ldr	r3, [r6, #16]
 80026ea:	6862      	ldr	r2, [r4, #4]
 80026ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80026f4:	d1f2      	bne.n	80026dc <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	0799      	lsls	r1, r3, #30
 80026fa:	d506      	bpl.n	800270a <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026fc:	68e1      	ldr	r1, [r4, #12]
 80026fe:	4844      	ldr	r0, [pc, #272]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 8002700:	6982      	ldr	r2, [r0, #24]
 8002702:	f002 020f 	and.w	r2, r2, #15
 8002706:	428a      	cmp	r2, r1
 8002708:	d869      	bhi.n	80027de <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270a:	4940      	ldr	r1, [pc, #256]	; (800280c <HAL_RCC_ClockConfig+0x238>)
 800270c:	680a      	ldr	r2, [r1, #0]
 800270e:	f002 020f 	and.w	r2, r2, #15
 8002712:	42aa      	cmp	r2, r5
 8002714:	d90a      	bls.n	800272c <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	680a      	ldr	r2, [r1, #0]
 8002718:	f022 020f 	bic.w	r2, r2, #15
 800271c:	432a      	orrs	r2, r5
 800271e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002720:	680a      	ldr	r2, [r1, #0]
 8002722:	f002 020f 	and.w	r2, r2, #15
 8002726:	42aa      	cmp	r2, r5
 8002728:	f47f af6b 	bne.w	8002602 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800272c:	075a      	lsls	r2, r3, #29
 800272e:	d50b      	bpl.n	8002748 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002730:	4937      	ldr	r1, [pc, #220]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 8002732:	6920      	ldr	r0, [r4, #16]
 8002734:	698a      	ldr	r2, [r1, #24]
 8002736:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800273a:	4290      	cmp	r0, r2
 800273c:	d204      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800273e:	698a      	ldr	r2, [r1, #24]
 8002740:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002744:	4302      	orrs	r2, r0
 8002746:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	071f      	lsls	r7, r3, #28
 800274a:	d50b      	bpl.n	8002764 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800274c:	4930      	ldr	r1, [pc, #192]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 800274e:	6960      	ldr	r0, [r4, #20]
 8002750:	69ca      	ldr	r2, [r1, #28]
 8002752:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002756:	4290      	cmp	r0, r2
 8002758:	d204      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800275a:	69ca      	ldr	r2, [r1, #28]
 800275c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002760:	4302      	orrs	r2, r0
 8002762:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	06de      	lsls	r6, r3, #27
 8002766:	d50b      	bpl.n	8002780 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002768:	4929      	ldr	r1, [pc, #164]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 800276a:	69a0      	ldr	r0, [r4, #24]
 800276c:	69ca      	ldr	r2, [r1, #28]
 800276e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002772:	4290      	cmp	r0, r2
 8002774:	d204      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002776:	69ca      	ldr	r2, [r1, #28]
 8002778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800277c:	4302      	orrs	r2, r0
 800277e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002780:	069d      	lsls	r5, r3, #26
 8002782:	d50b      	bpl.n	800279c <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002784:	4a22      	ldr	r2, [pc, #136]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 8002786:	69e1      	ldr	r1, [r4, #28]
 8002788:	6a13      	ldr	r3, [r2, #32]
 800278a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800278e:	4299      	cmp	r1, r3
 8002790:	d204      	bcs.n	800279c <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002792:	6a13      	ldr	r3, [r2, #32]
 8002794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002798:	430b      	orrs	r3, r1
 800279a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800279c:	f7ff fef8 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 80027a0:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <HAL_RCC_ClockConfig+0x23c>)
 80027a2:	4603      	mov	r3, r0
 80027a4:	481b      	ldr	r0, [pc, #108]	; (8002814 <HAL_RCC_ClockConfig+0x240>)
 80027a6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027a8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027aa:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80027ae:	4d1a      	ldr	r5, [pc, #104]	; (8002818 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027b0:	f002 020f 	and.w	r2, r2, #15
 80027b4:	4c19      	ldr	r4, [pc, #100]	; (800281c <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027b6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027b8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027ba:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 80027be:	4818      	ldr	r0, [pc, #96]	; (8002820 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027c0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027c4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 80027c6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80027c8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ca:	40d3      	lsrs	r3, r2
 80027cc:	6023      	str	r3, [r4, #0]
}
 80027ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80027d2:	f7fd bf9d 	b.w	8000710 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	07da      	lsls	r2, r3, #31
 80027d8:	f53f af60 	bmi.w	800269c <HAL_RCC_ClockConfig+0xc8>
 80027dc:	e795      	b.n	800270a <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027de:	6982      	ldr	r2, [r0, #24]
 80027e0:	f022 020f 	bic.w	r2, r2, #15
 80027e4:	430a      	orrs	r2, r1
 80027e6:	6182      	str	r2, [r0, #24]
 80027e8:	e78f      	b.n	800270a <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027ea:	019f      	lsls	r7, r3, #6
 80027ec:	f53f af6a 	bmi.w	80026c4 <HAL_RCC_ClockConfig+0xf0>
 80027f0:	e707      	b.n	8002602 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80027f2:	2001      	movs	r0, #1
}
 80027f4:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f6:	039b      	lsls	r3, r3, #14
 80027f8:	f53f af64 	bmi.w	80026c4 <HAL_RCC_ClockConfig+0xf0>
 80027fc:	e701      	b.n	8002602 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80027fe:	2003      	movs	r0, #3
 8002800:	e700      	b.n	8002604 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002802:	05de      	lsls	r6, r3, #23
 8002804:	f53f af5e 	bmi.w	80026c4 <HAL_RCC_ClockConfig+0xf0>
 8002808:	e6fb      	b.n	8002602 <HAL_RCC_ClockConfig+0x2e>
 800280a:	bf00      	nop
 800280c:	52002000 	.word	0x52002000
 8002810:	58024400 	.word	0x58024400
 8002814:	0800dd24 	.word	0x0800dd24
 8002818:	24000000 	.word	0x24000000
 800281c:	24000004 	.word	0x24000004
 8002820:	2400000c 	.word	0x2400000c

08002824 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4a18      	ldr	r2, [pc, #96]	; (8002888 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002826:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002828:	6913      	ldr	r3, [r2, #16]
 800282a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800282e:	2b10      	cmp	r3, #16
 8002830:	d01a      	beq.n	8002868 <HAL_RCC_GetHCLKFreq+0x44>
 8002832:	2b18      	cmp	r3, #24
 8002834:	d023      	beq.n	800287e <HAL_RCC_GetHCLKFreq+0x5a>
 8002836:	b1cb      	cbz	r3, 800286c <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8002838:	4814      	ldr	r0, [pc, #80]	; (800288c <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_GetHCLKFreq+0x64>)
 800283c:	4914      	ldr	r1, [pc, #80]	; (8002890 <HAL_RCC_GetHCLKFreq+0x6c>)
 800283e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002840:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002842:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002846:	4c13      	ldr	r4, [pc, #76]	; (8002894 <HAL_RCC_GetHCLKFreq+0x70>)
 8002848:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800284c:	4d12      	ldr	r5, [pc, #72]	; (8002898 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800284e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002850:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002852:	f002 021f 	and.w	r2, r2, #31
 8002856:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800285a:	f003 001f 	and.w	r0, r3, #31
 800285e:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8002862:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002864:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002866:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <HAL_RCC_GetHCLKFreq+0x78>)
 800286a:	e7e6      	b.n	800283a <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800286c:	6813      	ldr	r3, [r2, #0]
 800286e:	069b      	lsls	r3, r3, #26
 8002870:	d508      	bpl.n	8002884 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	480a      	ldr	r0, [pc, #40]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002876:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800287a:	40d8      	lsrs	r0, r3
 800287c:	e7dd      	b.n	800283a <HAL_RCC_GetHCLKFreq+0x16>
 800287e:	f7ff fb79 	bl	8001f74 <HAL_RCC_GetSysClockFreq.part.0>
 8002882:	e7da      	b.n	800283a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002884:	4806      	ldr	r0, [pc, #24]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002886:	e7d8      	b.n	800283a <HAL_RCC_GetHCLKFreq+0x16>
 8002888:	58024400 	.word	0x58024400
 800288c:	003d0900 	.word	0x003d0900
 8002890:	0800dd24 	.word	0x0800dd24
 8002894:	24000004 	.word	0x24000004
 8002898:	24000000 	.word	0x24000000
 800289c:	007a1200 	.word	0x007a1200
 80028a0:	03d09000 	.word	0x03d09000

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028a6:	f7ff ffbd 	bl	8002824 <HAL_RCC_GetHCLKFreq>
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028ac:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028ba:	40d8      	lsrs	r0, r3
 80028bc:	bd08      	pop	{r3, pc}
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
 80028c4:	0800dd24 	.word	0x0800dd24

080028c8 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80028ca:	223f      	movs	r2, #63	; 0x3f
 80028cc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	f002 0207 	and.w	r2, r2, #7
 80028d4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80028dc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	f002 020f 	and.w	r2, r2, #15
 80028e4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80028ec:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80028f4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80028fc:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80028fe:	6a1b      	ldr	r3, [r3, #32]
{
 8002900:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002902:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002906:	4c05      	ldr	r4, [pc, #20]	; (800291c <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002908:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800290a:	6823      	ldr	r3, [r4, #0]
}
 800290c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	600b      	str	r3, [r1, #0]
}
 8002916:	4770      	bx	lr
 8002918:	58024400 	.word	0x58024400
 800291c:	52002000 	.word	0x52002000

08002920 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop

08002924 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002924:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002928:	2b01      	cmp	r3, #1
 800292a:	d14d      	bne.n	80029c8 <HAL_TIM_Base_Start_IT+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800292e:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_TIM_Base_Start_IT+0xb8>)
 8002932:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002936:	bf18      	it	ne
 8002938:	429a      	cmpne	r2, r3
{
 800293a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	4d27      	ldr	r5, [pc, #156]	; (80029e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002944:	4c27      	ldr	r4, [pc, #156]	; (80029e4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002946:	42aa      	cmp	r2, r5
 8002948:	bf08      	it	eq
 800294a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800294e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002952:	4825      	ldr	r0, [pc, #148]	; (80029e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002954:	42a2      	cmp	r2, r4
 8002956:	bf08      	it	eq
 8002958:	f043 0301 	orreq.w	r3, r3, #1
 800295c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002960:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002962:	42a2      	cmp	r2, r4
 8002964:	bf08      	it	eq
 8002966:	f043 0301 	orreq.w	r3, r3, #1
 800296a:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800296e:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002972:	4282      	cmp	r2, r0
 8002974:	bf08      	it	eq
 8002976:	f043 0301 	orreq.w	r3, r3, #1
 800297a:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800297e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002980:	42a2      	cmp	r2, r4
 8002982:	bf08      	it	eq
 8002984:	f043 0301 	orreq.w	r3, r3, #1
 8002988:	4918      	ldr	r1, [pc, #96]	; (80029ec <HAL_TIM_Base_Start_IT+0xc8>)
 800298a:	4282      	cmp	r2, r0
 800298c:	bf08      	it	eq
 800298e:	f043 0301 	orreq.w	r3, r3, #1
 8002992:	428a      	cmp	r2, r1
 8002994:	bf08      	it	eq
 8002996:	f043 0301 	orreq.w	r3, r3, #1
 800299a:	b933      	cbnz	r3, 80029aa <HAL_TIM_Base_Start_IT+0x86>
 800299c:	f5a0 40b8 	sub.w	r0, r0, #23552	; 0x5c00
 80029a0:	1a10      	subs	r0, r2, r0
 80029a2:	fab0 f080 	clz	r0, r0
 80029a6:	0940      	lsrs	r0, r0, #5
 80029a8:	b198      	cbz	r0, 80029d2 <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029aa:	6891      	ldr	r1, [r2, #8]
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_TIM_Base_Start_IT+0xcc>)
 80029ae:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	d00b      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0xa8>
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b8:	d008      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0xa8>
    {
      __HAL_TIM_ENABLE(htim);
 80029ba:	6813      	ldr	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80029bc:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bc30      	pop	{r4, r5}
 80029c6:	4770      	bx	lr
    return HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
}
 80029ca:	4770      	bx	lr
  return HAL_OK;
 80029cc:	2000      	movs	r0, #0
}
 80029ce:	bc30      	pop	{r4, r5}
 80029d0:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e7f3      	b.n	80029c4 <HAL_TIM_Base_Start_IT+0xa0>
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40010400 	.word	0x40010400
 80029ec:	4000e000 	.word	0x4000e000
 80029f0:	00010007 	.word	0x00010007

080029f4 <HAL_TIM_OC_DelayElapsedCallback>:
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <HAL_TIM_IC_CaptureCallback>:
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop

080029fc <HAL_TIM_PWM_PulseFinishedCallback>:
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <HAL_TIM_TriggerCallback>:
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a04:	6803      	ldr	r3, [r0, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	0791      	lsls	r1, r2, #30
{
 8002a0a:	b510      	push	{r4, lr}
 8002a0c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a0e:	d502      	bpl.n	8002a16 <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	0792      	lsls	r2, r2, #30
 8002a14:	d468      	bmi.n	8002ae8 <HAL_TIM_IRQHandler+0xe4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	0752      	lsls	r2, r2, #29
 8002a1a:	d502      	bpl.n	8002a22 <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	0750      	lsls	r0, r2, #29
 8002a20:	d44f      	bmi.n	8002ac2 <HAL_TIM_IRQHandler+0xbe>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	0711      	lsls	r1, r2, #28
 8002a26:	d502      	bpl.n	8002a2e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	0712      	lsls	r2, r2, #28
 8002a2c:	d437      	bmi.n	8002a9e <HAL_TIM_IRQHandler+0x9a>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	06d0      	lsls	r0, r2, #27
 8002a32:	d502      	bpl.n	8002a3a <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	06d1      	lsls	r1, r2, #27
 8002a38:	d41e      	bmi.n	8002a78 <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	07d2      	lsls	r2, r2, #31
 8002a3e:	d502      	bpl.n	8002a46 <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	07d0      	lsls	r0, r2, #31
 8002a44:	d469      	bmi.n	8002b1a <HAL_TIM_IRQHandler+0x116>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	0611      	lsls	r1, r2, #24
 8002a4a:	d502      	bpl.n	8002a52 <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	0612      	lsls	r2, r2, #24
 8002a50:	d46b      	bmi.n	8002b2a <HAL_TIM_IRQHandler+0x126>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	05d0      	lsls	r0, r2, #23
 8002a56:	d502      	bpl.n	8002a5e <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	0611      	lsls	r1, r2, #24
 8002a5c:	d46d      	bmi.n	8002b3a <HAL_TIM_IRQHandler+0x136>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	0652      	lsls	r2, r2, #25
 8002a62:	d502      	bpl.n	8002a6a <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	0650      	lsls	r0, r2, #25
 8002a68:	d46f      	bmi.n	8002b4a <HAL_TIM_IRQHandler+0x146>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	0691      	lsls	r1, r2, #26
 8002a6e:	d502      	bpl.n	8002a76 <HAL_TIM_IRQHandler+0x72>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	0692      	lsls	r2, r2, #26
 8002a74:	d449      	bmi.n	8002b0a <HAL_TIM_IRQHandler+0x106>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a76:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a78:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a7c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a80:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a82:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002a8a:	d16f      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8c:	f7ff ffb2 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff ffb3 	bl	80029fc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a98:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	7722      	strb	r2, [r4, #28]
 8002a9c:	e7cd      	b.n	8002a3a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a9e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	079b      	lsls	r3, r3, #30
 8002aae:	d15a      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab0:	f7ff ffa0 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f7ff ffa1 	bl	80029fc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002abc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	7722      	strb	r2, [r4, #28]
 8002ac0:	e7b5      	b.n	8002a2e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aca:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002acc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002ad4:	d144      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	f7ff ff8d 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff ff8e 	bl	80029fc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae4:	7722      	strb	r2, [r4, #28]
 8002ae6:	e79c      	b.n	8002a22 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aec:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aee:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	0799      	lsls	r1, r3, #30
 8002af6:	d130      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af8:	f7ff ff7c 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	4620      	mov	r0, r4
 8002afe:	f7ff ff7d 	bl	80029fc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b04:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	7722      	strb	r2, [r4, #28]
 8002b08:	e785      	b.n	8002a16 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b0a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002b0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b10:	611a      	str	r2, [r3, #16]
}
 8002b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002b16:	f000 b8f5 	b.w	8002d04 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b1a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b22:	f7fd fdcf 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	e78d      	b.n	8002a46 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002b2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b32:	f000 f8e9 	bl	8002d08 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	e78b      	b.n	8002a52 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8002b3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002b42:	f000 f8e3 	bl	8002d0c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	e789      	b.n	8002a5e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002b4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b50:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b52:	f7ff ff55 	bl	8002a00 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	e787      	b.n	8002a6a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	f7ff ff4d 	bl	80029f8 <HAL_TIM_IC_CaptureCallback>
 8002b5e:	e7d0      	b.n	8002b02 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b60:	f7ff ff4a 	bl	80029f8 <HAL_TIM_IC_CaptureCallback>
 8002b64:	e7bc      	b.n	8002ae0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	f7ff ff47 	bl	80029f8 <HAL_TIM_IC_CaptureCallback>
 8002b6a:	e7a6      	b.n	8002aba <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6c:	f7ff ff44 	bl	80029f8 <HAL_TIM_IC_CaptureCallback>
 8002b70:	e791      	b.n	8002a96 <HAL_TIM_IRQHandler+0x92>
 8002b72:	bf00      	nop

08002b74 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b74:	4a43      	ldr	r2, [pc, #268]	; (8002c84 <TIM_Base_SetConfig+0x110>)
 8002b76:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8002b7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b7c:	eba0 0202 	sub.w	r2, r0, r2
 8002b80:	fab2 f282 	clz	r2, r2
{
 8002b84:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b86:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8002b8a:	d02b      	beq.n	8002be4 <TIM_Base_SetConfig+0x70>
 8002b8c:	bb52      	cbnz	r2, 8002be4 <TIM_Base_SetConfig+0x70>
 8002b8e:	4c3e      	ldr	r4, [pc, #248]	; (8002c88 <TIM_Base_SetConfig+0x114>)
 8002b90:	42a0      	cmp	r0, r4
 8002b92:	d04f      	beq.n	8002c34 <TIM_Base_SetConfig+0xc0>
 8002b94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b98:	42a0      	cmp	r0, r4
 8002b9a:	d04b      	beq.n	8002c34 <TIM_Base_SetConfig+0xc0>
 8002b9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ba0:	42a0      	cmp	r0, r4
 8002ba2:	d051      	beq.n	8002c48 <TIM_Base_SetConfig+0xd4>
 8002ba4:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002ba8:	42a0      	cmp	r0, r4
 8002baa:	d04d      	beq.n	8002c48 <TIM_Base_SetConfig+0xd4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bac:	4a37      	ldr	r2, [pc, #220]	; (8002c8c <TIM_Base_SetConfig+0x118>)
 8002bae:	4290      	cmp	r0, r2
 8002bb0:	d05a      	beq.n	8002c68 <TIM_Base_SetConfig+0xf4>
 8002bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bb6:	4290      	cmp	r0, r2
 8002bb8:	d056      	beq.n	8002c68 <TIM_Base_SetConfig+0xf4>
 8002bba:	4c35      	ldr	r4, [pc, #212]	; (8002c90 <TIM_Base_SetConfig+0x11c>)
 8002bbc:	f5a2 42c8 	sub.w	r2, r2, #25600	; 0x6400
 8002bc0:	4290      	cmp	r0, r2
 8002bc2:	bf18      	it	ne
 8002bc4:	42a0      	cmpne	r0, r4
 8002bc6:	d04f      	beq.n	8002c68 <TIM_Base_SetConfig+0xf4>
 8002bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bcc:	4290      	cmp	r0, r2
 8002bce:	d04b      	beq.n	8002c68 <TIM_Base_SetConfig+0xf4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd0:	694d      	ldr	r5, [r1, #20]
 8002bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd6:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bda:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002bdc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bde:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002be0:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be2:	e023      	b.n	8002c2c <TIM_Base_SetConfig+0xb8>
    tmpcr1 |= Structure->CounterMode;
 8002be4:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002bea:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bec:	4c29      	ldr	r4, [pc, #164]	; (8002c94 <TIM_Base_SetConfig+0x120>)
 8002bee:	1b04      	subs	r4, r0, r4
 8002bf0:	fab4 f484 	clz	r4, r4
 8002bf4:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf6:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfe:	694d      	ldr	r5, [r1, #20]
 8002c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c04:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002c06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c08:	688b      	ldr	r3, [r1, #8]
 8002c0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c0c:	680b      	ldr	r3, [r1, #0]
 8002c0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c10:	b952      	cbnz	r2, 8002c28 <TIM_Base_SetConfig+0xb4>
 8002c12:	b94c      	cbnz	r4, 8002c28 <TIM_Base_SetConfig+0xb4>
 8002c14:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <TIM_Base_SetConfig+0x118>)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <TIM_Base_SetConfig+0x124>)
 8002c18:	4298      	cmp	r0, r3
 8002c1a:	bf18      	it	ne
 8002c1c:	4290      	cmpne	r0, r2
 8002c1e:	d003      	beq.n	8002c28 <TIM_Base_SetConfig+0xb4>
 8002c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c24:	4298      	cmp	r0, r3
 8002c26:	d101      	bne.n	8002c2c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c28:	690b      	ldr	r3, [r1, #16]
 8002c2a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c2c:	2301      	movs	r3, #1
}
 8002c2e:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8002c30:	6143      	str	r3, [r0, #20]
}
 8002c32:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	4c17      	ldr	r4, [pc, #92]	; (8002c94 <TIM_Base_SetConfig+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c3a:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c3c:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 8002c3e:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c40:	fab4 f484 	clz	r4, r4
 8002c44:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c46:	e7d6      	b.n	8002bf6 <TIM_Base_SetConfig+0x82>
    tmpcr1 |= Structure->CounterMode;
 8002c48:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c4e:	4c11      	ldr	r4, [pc, #68]	; (8002c94 <TIM_Base_SetConfig+0x120>)
    tmpcr1 |= Structure->CounterMode;
 8002c50:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c52:	4d12      	ldr	r5, [pc, #72]	; (8002c9c <TIM_Base_SetConfig+0x128>)
 8002c54:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c56:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	fab4 f484 	clz	r4, r4
 8002c5c:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c60:	d0c9      	beq.n	8002bf6 <TIM_Base_SetConfig+0x82>
 8002c62:	2c00      	cmp	r4, #0
 8002c64:	d1c7      	bne.n	8002bf6 <TIM_Base_SetConfig+0x82>
 8002c66:	e7a1      	b.n	8002bac <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c68:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c6e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c70:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c72:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c78:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8002c7a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8002c7c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c80:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c82:	e7c7      	b.n	8002c14 <TIM_Base_SetConfig+0xa0>
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40014800 	.word	0x40014800
 8002c94:	40010400 	.word	0x40010400
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40000c00 	.word	0x40000c00

08002ca0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002ca0:	b370      	cbz	r0, 8002d00 <HAL_TIM_Base_Init+0x60>
{
 8002ca2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ca8:	4604      	mov	r4, r0
 8002caa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cae:	b313      	cbz	r3, 8002cf6 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	f851 0b04 	ldr.w	r0, [r1], #4
 8002cbc:	f7ff ff5a 	bl	8002b74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	2301      	movs	r3, #1
  return HAL_OK;
 8002cc2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002ccc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002cd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002cd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ce8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002cec:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002cf4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002cf6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	f7ff fe11 	bl	8002920 <HAL_TIM_Base_MspInit>
 8002cfe:	e7d7      	b.n	8002cb0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002d00:	2001      	movs	r0, #1
}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIMEx_CommutCallback>:
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <HAL_TIMEx_BreakCallback>:
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop

08002d0c <HAL_TIMEx_Break2Callback>:
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop

08002d14 <MX_LWIP_Init>:
{
 8002d14:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <MX_LWIP_Init+0x98>)
  GATEWAY_ADDRESS[0] = 0;
 8002d18:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 8002d1a:	4f25      	ldr	r7, [pc, #148]	; (8002db0 <MX_LWIP_Init+0x9c>)
{
 8002d1c:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 8002d1e:	4e25      	ldr	r6, [pc, #148]	; (8002db4 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 8002d20:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 8002d22:	4d25      	ldr	r5, [pc, #148]	; (8002db8 <MX_LWIP_Init+0xa4>)
	tcpip_init(tcpip_init_done, arg);
 8002d24:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 8002d26:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 8002d28:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 8002d2c:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 8002d2e:	6033      	str	r3, [r6, #0]
	tcpip_init(tcpip_init_done, arg);
 8002d30:	f003 f898 	bl	8005e64 <tcpip_init>
	LOCK_TCPIP_CORE();
 8002d34:	f000 fb20 	bl	8003378 <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002d38:	4920      	ldr	r1, [pc, #128]	; (8002dbc <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002d3a:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002d3c:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002d3e:	6830      	ldr	r0, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8002d40:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002d42:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002d44:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002d46:	6828      	ldr	r0, [r5, #0]
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8002d4a:	4c1f      	ldr	r4, [pc, #124]	; (8002dc8 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002d4c:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8002d4e:	481f      	ldr	r0, [pc, #124]	; (8002dcc <MX_LWIP_Init+0xb8>)
 8002d50:	9002      	str	r0, [sp, #8]
 8002d52:	481f      	ldr	r0, [pc, #124]	; (8002dd0 <MX_LWIP_Init+0xbc>)
 8002d54:	9001      	str	r0, [sp, #4]
 8002d56:	4620      	mov	r0, r4
 8002d58:	f003 fd76 	bl	8006848 <netif_add>
  netif_set_default(&gnetif);
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f003 fe29 	bl	80069b4 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8002d62:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    netif_set_up(&gnetif);
 8002d66:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8002d68:	075b      	lsls	r3, r3, #29
 8002d6a:	d51c      	bpl.n	8002da6 <MX_LWIP_Init+0x92>
    netif_set_up(&gnetif);
 8002d6c:	f003 fe2c 	bl	80069c8 <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002d70:	4c18      	ldr	r4, [pc, #96]	; (8002dd4 <MX_LWIP_Init+0xc0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8002d72:	4919      	ldr	r1, [pc, #100]	; (8002dd8 <MX_LWIP_Init+0xc4>)
 8002d74:	4814      	ldr	r0, [pc, #80]	; (8002dc8 <MX_LWIP_Init+0xb4>)
 8002d76:	f003 febb 	bl	8006af0 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	1d20      	adds	r0, r4, #4
 8002d80:	f00a f89d 	bl	800cebe <memset>
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8002d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
  attributes.name = "EthLink";
 8002d88:	4814      	ldr	r0, [pc, #80]	; (8002ddc <MX_LWIP_Init+0xc8>)
  attributes.priority = osPriorityBelowNormal;
 8002d8a:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8002d8c:	6161      	str	r1, [r4, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8002d8e:	4622      	mov	r2, r4
 8002d90:	490d      	ldr	r1, [pc, #52]	; (8002dc8 <MX_LWIP_Init+0xb4>)
  attributes.name = "EthLink";
 8002d92:	6020      	str	r0, [r4, #0]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8002d94:	4812      	ldr	r0, [pc, #72]	; (8002de0 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 8002d96:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8002d98:	f000 fbf0 	bl	800357c <osThreadNew>
}
 8002d9c:	b005      	add	sp, #20
 8002d9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 8002da2:	f000 bb67 	b.w	8003474 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 8002da6:	f003 fe33 	bl	8006a10 <netif_set_down>
 8002daa:	e7e1      	b.n	8002d70 <MX_LWIP_Init+0x5c>
 8002dac:	0a01a8c0 	.word	0x0a01a8c0
 8002db0:	24000104 	.word	0x24000104
 8002db4:	24000108 	.word	0x24000108
 8002db8:	24000100 	.word	0x24000100
 8002dbc:	24000168 	.word	0x24000168
 8002dc0:	2400016c 	.word	0x2400016c
 8002dc4:	24000164 	.word	0x24000164
 8002dc8:	24000130 	.word	0x24000130
 8002dcc:	08005de5 	.word	0x08005de5
 8002dd0:	08002fa5 	.word	0x08002fa5
 8002dd4:	2400010c 	.word	0x2400010c
 8002dd8:	08002d11 	.word	0x08002d11
 8002ddc:	0800dd34 	.word	0x0800dd34
 8002de0:	08003395 	.word	0x08003395

08002de4 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8002de4:	2000      	movs	r0, #0
 8002de6:	4770      	bx	lr

08002de8 <low_level_output>:
{
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8002dee:	2230      	movs	r2, #48	; 0x30
 8002df0:	2100      	movs	r1, #0
 8002df2:	4668      	mov	r0, sp
 8002df4:	f00a f863 	bl	800cebe <memset>
  for(q = p; q != NULL; q = q->next)
 8002df8:	b1fc      	cbz	r4, 8002e3a <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 8002dfa:	8962      	ldrh	r2, [r4, #10]
 8002dfc:	466b      	mov	r3, sp
    Txbuffer[i].buffer = q->payload;
 8002dfe:	6861      	ldr	r1, [r4, #4]
  uint32_t i = 0U;
 8002e00:	f04f 0c00 	mov.w	ip, #0
    if(i >= ETH_TX_DESC_CNT)
 8002e04:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 8002e06:	e9cd 1200 	strd	r1, r2, [sp]
 8002e0a:	4622      	mov	r2, r4
    if(q->next == NULL)
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	b16a      	cbz	r2, 8002e2c <low_level_output+0x44>
    i++;
 8002e10:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 8002e14:	f1bc 0f04 	cmp.w	ip, #4
 8002e18:	d02b      	beq.n	8002e72 <low_level_output+0x8a>
    Txbuffer[i].buffer = q->payload;
 8002e1a:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 8002e1c:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 8002e1e:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8002e20:	6059      	str	r1, [r3, #4]
    Txbuffer[i].buffer = q->payload;
 8002e22:	e943 3001 	strd	r3, r0, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 8002e26:	330c      	adds	r3, #12
    if(q->next == NULL)
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d1f1      	bne.n	8002e10 <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 8002e2c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8002e30:	ab0c      	add	r3, sp, #48	; 0x30
 8002e32:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8002e36:	f84c 2c28 	str.w	r2, [ip, #-40]
  TxConfig.Length = p->tot_len;
 8002e3a:	4e10      	ldr	r6, [pc, #64]	; (8002e7c <low_level_output+0x94>)
  pbuf_ref(p);
 8002e3c:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8002e3e:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 8002e40:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.Length = p->tot_len;
 8002e44:	6073      	str	r3, [r6, #4]
  TxConfig.pData = p;
 8002e46:	6374      	str	r4, [r6, #52]	; 0x34
  pbuf_ref(p);
 8002e48:	f004 f98e 	bl	8007168 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8002e4c:	4631      	mov	r1, r6
 8002e4e:	480c      	ldr	r0, [pc, #48]	; (8002e80 <low_level_output+0x98>)
 8002e50:	4d0c      	ldr	r5, [pc, #48]	; (8002e84 <low_level_output+0x9c>)
 8002e52:	f7fe fafd 	bl	8001450 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8002e56:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5a:	6828      	ldr	r0, [r5, #0]
 8002e5c:	f000 fcc0 	bl	80037e0 <osSemaphoreAcquire>
 8002e60:	4604      	mov	r4, r0
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d1f7      	bne.n	8002e56 <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8002e66:	4806      	ldr	r0, [pc, #24]	; (8002e80 <low_level_output+0x98>)
 8002e68:	f7fe fbac 	bl	80015c4 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8002e6c:	4620      	mov	r0, r4
}
 8002e6e:	b00c      	add	sp, #48	; 0x30
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 8002e72:	f06f 000b 	mvn.w	r0, #11
}
 8002e76:	b00c      	add	sp, #48	; 0x30
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
 8002e7a:	bf00      	nop
 8002e7c:	24000198 	.word	0x24000198
 8002e80:	240001d4 	.word	0x240001d4
 8002e84:	240001d0 	.word	0x240001d0

08002e88 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8002e88:	f7fd be96 	b.w	8000bb8 <HAL_GetTick>

08002e8c <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <ETH_PHY_IO_Init+0xc>)
{
 8002e8e:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8002e90:	f7fe fdb2 	bl	80019f8 <HAL_ETH_SetMDIOClockRange>
}
 8002e94:	2000      	movs	r0, #0
 8002e96:	bd08      	pop	{r3, pc}
 8002e98:	240001d4 	.word	0x240001d4

08002e9c <ETH_PHY_IO_ReadReg>:
{
 8002e9c:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8002e9e:	4806      	ldr	r0, [pc, #24]	; (8002eb8 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8002ea0:	b508      	push	{r3, lr}
 8002ea2:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	4661      	mov	r1, ip
 8002ea8:	f7fe fc6e 	bl	8001788 <HAL_ETH_ReadPHYRegister>
 8002eac:	3800      	subs	r0, #0
 8002eae:	bf18      	it	ne
 8002eb0:	2001      	movne	r0, #1
}
 8002eb2:	4240      	negs	r0, r0
 8002eb4:	bd08      	pop	{r3, pc}
 8002eb6:	bf00      	nop
 8002eb8:	240001d4 	.word	0x240001d4

08002ebc <ETH_PHY_IO_WriteReg>:
{
 8002ebc:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8002ebe:	4806      	ldr	r0, [pc, #24]	; (8002ed8 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8002ec0:	b508      	push	{r3, lr}
 8002ec2:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	4661      	mov	r1, ip
 8002ec8:	f7fe fc8c 	bl	80017e4 <HAL_ETH_WritePHYRegister>
 8002ecc:	3800      	subs	r0, #0
 8002ece:	bf18      	it	ne
 8002ed0:	2001      	movne	r0, #1
}
 8002ed2:	4240      	negs	r0, r0
 8002ed4:	bd08      	pop	{r3, pc}
 8002ed6:	bf00      	nop
 8002ed8:	240001d4 	.word	0x240001d4

08002edc <pbuf_free_custom>:
{
 8002edc:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8002ede:	4808      	ldr	r0, [pc, #32]	; (8002f00 <pbuf_free_custom+0x24>)
{
 8002ee0:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8002ee2:	f003 fbcf 	bl	8006684 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <pbuf_free_custom+0x28>)
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	2a01      	cmp	r2, #1
 8002eec:	d000      	beq.n	8002ef0 <pbuf_free_custom+0x14>
}
 8002eee:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 8002ef0:	4905      	ldr	r1, [pc, #20]	; (8002f08 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 8002ef2:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8002ef4:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8002ef6:	701a      	strb	r2, [r3, #0]
}
 8002ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8002efc:	f000 bca4 	b.w	8003848 <osSemaphoreRelease>
 8002f00:	0800de1c 	.word	0x0800de1c
 8002f04:	24000190 	.word	0x24000190
 8002f08:	24000194 	.word	0x24000194

08002f0c <ethernetif_input>:
{
 8002f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f10:	4c14      	ldr	r4, [pc, #80]	; (8002f64 <ethernetif_input+0x58>)
 8002f12:	b083      	sub	sp, #12
 8002f14:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002f68 <ethernetif_input+0x5c>
 8002f18:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8002f1a:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8002f1c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8002f6c <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	6820      	ldr	r0, [r4, #0]
 8002f26:	f000 fc5b 	bl	80037e0 <osSemaphoreAcquire>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d1f8      	bne.n	8002f20 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8002f2e:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8002f32:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f3      	bne.n	8002f20 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8002f38:	a901      	add	r1, sp, #4
 8002f3a:	4648      	mov	r0, r9
 8002f3c:	f7fe fab8 	bl	80014b0 <HAL_ETH_ReadData>
  return p;
 8002f40:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 8002f42:	4631      	mov	r1, r6
 8002f44:	4628      	mov	r0, r5
        if (p != NULL)
 8002f46:	2d00      	cmp	r5, #0
 8002f48:	d0ea      	beq.n	8002f20 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8002f4a:	6933      	ldr	r3, [r6, #16]
 8002f4c:	4798      	blx	r3
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	d0ed      	beq.n	8002f2e <ethernetif_input+0x22>
            pbuf_free(p);
 8002f52:	4628      	mov	r0, r5
 8002f54:	f003 ff86 	bl	8006e64 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8002f58:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8002f5c:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1de      	bne.n	8002f20 <ethernetif_input+0x14>
 8002f62:	e7e9      	b.n	8002f38 <ethernetif_input+0x2c>
 8002f64:	24000194 	.word	0x24000194
 8002f68:	24000190 	.word	0x24000190
 8002f6c:	240001d4 	.word	0x240001d4

08002f70 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8002f70:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <HAL_ETH_RxCpltCallback+0x8>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	f000 bc68 	b.w	8003848 <osSemaphoreRelease>
 8002f78:	24000194 	.word	0x24000194

08002f7c <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8002f7c:	4b01      	ldr	r3, [pc, #4]	; (8002f84 <HAL_ETH_TxCpltCallback+0x8>)
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	f000 bc62 	b.w	8003848 <osSemaphoreRelease>
 8002f84:	240001d0 	.word	0x240001d0

08002f88 <HAL_ETH_ErrorCallback>:
{
 8002f88:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8002f8a:	f7fe fe95 	bl	8001cb8 <HAL_ETH_GetDMAError>
 8002f8e:	0603      	lsls	r3, r0, #24
 8002f90:	d400      	bmi.n	8002f94 <HAL_ETH_ErrorCallback+0xc>
}
 8002f92:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <HAL_ETH_ErrorCallback+0x18>)
 8002f96:	6818      	ldr	r0, [r3, #0]
}
 8002f98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8002f9c:	f000 bc54 	b.w	8003848 <osSemaphoreRelease>
 8002fa0:	24000194 	.word	0x24000194

08002fa4 <ethernetif_init>:
{
 8002fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002fa8:	4604      	mov	r4, r0
{
 8002faa:	b0a5      	sub	sp, #148	; 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002fac:	2800      	cmp	r0, #0
 8002fae:	f000 80b7 	beq.w	8003120 <ethernetif_init+0x17c>
  netif->linkoutput = low_level_output;
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 8002fb4:	f247 4173 	movw	r1, #29811	; 0x7473
  netif->output = etharp_output;
 8002fb8:	4a5e      	ldr	r2, [pc, #376]	; (8003134 <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 8002fba:	a80b      	add	r0, sp, #44	; 0x2c
  netif->name[0] = IFNAME0;
 8002fbc:	85e1      	strh	r1, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 8002fbe:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8002fc0:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8002fc2:	2264      	movs	r2, #100	; 0x64
  netif->linkoutput = low_level_output;
 8002fc4:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8002fc6:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8002fc8:	f009 ff79 	bl	800cebe <memset>
  heth.Instance = ETH;
 8002fcc:	4d5a      	ldr	r5, [pc, #360]	; (8003138 <ethernetif_init+0x194>)
 8002fce:	4b5b      	ldr	r3, [pc, #364]	; (800313c <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002fd0:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002fd2:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800317c <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002fd6:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8002fd8:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8002fda:	4b59      	ldr	r3, [pc, #356]	; (8003140 <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 8002fdc:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 8002fe0:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8002fe2:	4b58      	ldr	r3, [pc, #352]	; (8003144 <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 8002fe4:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8002fe8:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002fea:	4b57      	ldr	r3, [pc, #348]	; (8003148 <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002fec:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 8002fee:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8002ff0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ff4:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002ff6:	f7fe fd41 	bl	8001a7c <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002ffa:	2234      	movs	r2, #52	; 0x34
 8002ffc:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002ffe:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003000:	f109 0004 	add.w	r0, r9, #4
 8003004:	f009 ff5b 	bl	800cebe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003008:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 800300a:	4850      	ldr	r0, [pc, #320]	; (800314c <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800300c:	f8c9 3000 	str.w	r3, [r9]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003010:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003014:	f8c9 3014 	str.w	r3, [r9, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003018:	f003 fabc 	bl	8006594 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800301c:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800301e:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003020:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003022:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800302c:	785a      	ldrb	r2, [r3, #1]
 800302e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003032:	789a      	ldrb	r2, [r3, #2]
 8003034:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003038:	78da      	ldrb	r2, [r3, #3]
 800303a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800303e:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003040:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003044:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003048:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800304a:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800304c:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003050:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8003054:	f240 53dc 	movw	r3, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003058:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800305c:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 800305e:	84a3      	strh	r3, [r4, #36]	; 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003060:	f000 fb6e 	bl	8003740 <osSemaphoreNew>
 8003064:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003066:	4632      	mov	r2, r6
 8003068:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800306a:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800306c:	4638      	mov	r0, r7
 800306e:	f000 fb67 	bl	8003740 <osSemaphoreNew>
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003074:	4631      	mov	r1, r6
 8003076:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003078:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800307a:	a803      	add	r0, sp, #12
 800307c:	f009 ff1f 	bl	800cebe <memset>
  attributes.name = "EthIf";
 8003080:	4b35      	ldr	r3, [pc, #212]	; (8003158 <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8003082:	f44f 6180 	mov.w	r1, #1024	; 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8003086:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8003088:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 800308a:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 800308c:	4833      	ldr	r0, [pc, #204]	; (800315c <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 800308e:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8003092:	4621      	mov	r1, r4
 8003094:	f000 fa72 	bl	800357c <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003098:	4931      	ldr	r1, [pc, #196]	; (8003160 <ethernetif_init+0x1bc>)
 800309a:	4832      	ldr	r0, [pc, #200]	; (8003164 <ethernetif_init+0x1c0>)
 800309c:	f7fd fc7e 	bl	800099c <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 80030a0:	4830      	ldr	r0, [pc, #192]	; (8003164 <ethernetif_init+0x1c0>)
 80030a2:	f7fd fc95 	bl	80009d0 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 80030a6:	f1b8 0f00 	cmp.w	r8, #0
 80030aa:	d124      	bne.n	80030f6 <ethernetif_init+0x152>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80030ac:	482d      	ldr	r0, [pc, #180]	; (8003164 <ethernetif_init+0x1c0>)
 80030ae:	f7fd fcf9 	bl	8000aa4 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80030b2:	42b8      	cmp	r0, r7
 80030b4:	dd2a      	ble.n	800310c <ethernetif_init+0x168>
      switch (PHYLinkState)
 80030b6:	3803      	subs	r0, #3
 80030b8:	2802      	cmp	r0, #2
 80030ba:	d822      	bhi.n	8003102 <ethernetif_init+0x15e>
 80030bc:	4a2a      	ldr	r2, [pc, #168]	; (8003168 <ethernetif_init+0x1c4>)
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <ethernetif_init+0x1c8>)
 80030c0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80030c4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80030c8:	a90b      	add	r1, sp, #44	; 0x2c
 80030ca:	481b      	ldr	r0, [pc, #108]	; (8003138 <ethernetif_init+0x194>)
 80030cc:	f7fe fbbc 	bl	8001848 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80030d0:	a90b      	add	r1, sp, #44	; 0x2c
 80030d2:	4819      	ldr	r0, [pc, #100]	; (8003138 <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 80030d4:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80030d8:	f7fe fc80 	bl	80019dc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80030dc:	4816      	ldr	r0, [pc, #88]	; (8003138 <ethernetif_init+0x194>)
 80030de:	f7fe f923 	bl	8001328 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f003 fc70 	bl	80069c8 <netif_set_up>
    netif_set_link_up(netif);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f003 fcb5 	bl	8006a58 <netif_set_link_up>
}
 80030ee:	2000      	movs	r0, #0
 80030f0:	b025      	add	sp, #148	; 0x94
 80030f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 80030f6:	f7fd faef 	bl	80006d8 <Error_Handler>
}
 80030fa:	2000      	movs	r0, #0
 80030fc:	b025      	add	sp, #148	; 0x94
 80030fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8003102:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8003106:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 800310a:	e7dd      	b.n	80030c8 <ethernetif_init+0x124>
      netif_set_link_down(netif);
 800310c:	4620      	mov	r0, r4
 800310e:	f003 fccb 	bl	8006aa8 <netif_set_link_down>
      netif_set_down(netif);
 8003112:	4620      	mov	r0, r4
 8003114:	f003 fc7c 	bl	8006a10 <netif_set_down>
}
 8003118:	2000      	movs	r0, #0
 800311a:	b025      	add	sp, #148	; 0x94
 800311c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <ethernetif_init+0x1cc>)
 8003122:	f240 2217 	movw	r2, #535	; 0x217
 8003126:	4913      	ldr	r1, [pc, #76]	; (8003174 <ethernetif_init+0x1d0>)
 8003128:	4813      	ldr	r0, [pc, #76]	; (8003178 <ethernetif_init+0x1d4>)
 800312a:	f009 fe63 	bl	800cdf4 <iprintf>
 800312e:	e740      	b.n	8002fb2 <ethernetif_init+0xe>
 8003130:	08002de9 	.word	0x08002de9
 8003134:	0800b9f5 	.word	0x0800b9f5
 8003138:	240001d4 	.word	0x240001d4
 800313c:	40028000 	.word	0x40028000
 8003140:	00e18000 	.word	0x00e18000
 8003144:	30000100 	.word	0x30000100
 8003148:	30000000 	.word	0x30000000
 800314c:	0800de1c 	.word	0x0800de1c
 8003150:	24000194 	.word	0x24000194
 8003154:	240001d0 	.word	0x240001d0
 8003158:	0800dd90 	.word	0x0800dd90
 800315c:	08002f0d 	.word	0x08002f0d
 8003160:	24000010 	.word	0x24000010
 8003164:	24000170 	.word	0x24000170
 8003168:	0800dde4 	.word	0x0800dde4
 800316c:	0800ddf0 	.word	0x0800ddf0
 8003170:	0800dd3c 	.word	0x0800dd3c
 8003174:	0800dd58 	.word	0x0800dd58
 8003178:	0800dd68 	.word	0x0800dd68
 800317c:	24000198 	.word	0x24000198

08003180 <sys_now>:
  return HAL_GetTick();
 8003180:	f7fd bd1a 	b.w	8000bb8 <HAL_GetTick>

08003184 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8003184:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <HAL_ETH_MspInit+0x130>)
 8003186:	6802      	ldr	r2, [r0, #0]
{
 8003188:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800318a:	429a      	cmp	r2, r3
{
 800318c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318e:	f04f 0400 	mov.w	r4, #0
 8003192:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003196:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800319a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800319c:	d001      	beq.n	80031a2 <HAL_ETH_MspInit+0x1e>
}
 800319e:	b00d      	add	sp, #52	; 0x34
 80031a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80031a2:	4b45      	ldr	r3, [pc, #276]	; (80032b8 <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80031a6:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a8:	2603      	movs	r6, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80031aa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031ae:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b0:	4842      	ldr	r0, [pc, #264]	; (80032bc <HAL_ETH_MspInit+0x138>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80031b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80031ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80031be:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80031c2:	9200      	str	r2, [sp, #0]
 80031c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80031c6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80031ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80031d2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80031d6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80031da:	9201      	str	r2, [sp, #4]
 80031dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80031de:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80031e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80031ea:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80031ee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80031f2:	9202      	str	r2, [sp, #8]
 80031f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80031fa:	f042 0204 	orr.w	r2, r2, #4
 80031fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003202:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003206:	f002 0204 	and.w	r2, r2, #4
 800320a:	9203      	str	r2, [sp, #12]
 800320c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800321a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800321e:	f002 0201 	and.w	r2, r2, #1
 8003222:	9204      	str	r2, [sp, #16]
 8003224:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003226:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800322a:	433a      	orrs	r2, r7
 800322c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003230:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003234:	403a      	ands	r2, r7
 8003236:	9205      	str	r2, [sp, #20]
 8003238:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800323a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800323e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003242:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003250:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003256:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003258:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800325a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325c:	f7fe fd30 	bl	8001cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003260:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003262:	a907      	add	r1, sp, #28
 8003264:	4816      	ldr	r0, [pc, #88]	; (80032c0 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003266:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800326c:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003270:	f7fe fd26 	bl	8001cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003278:	a907      	add	r1, sp, #28
 800327a:	4812      	ldr	r0, [pc, #72]	; (80032c4 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800327c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003282:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003286:	f7fe fd1b 	bl	8001cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800328a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800328e:	a907      	add	r1, sp, #28
 8003290:	480d      	ldr	r0, [pc, #52]	; (80032c8 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003292:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003296:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003298:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800329c:	f7fe fd10 	bl	8001cc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80032a0:	4622      	mov	r2, r4
 80032a2:	2105      	movs	r1, #5
 80032a4:	203d      	movs	r0, #61	; 0x3d
 80032a6:	f7fd fca9 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80032aa:	203d      	movs	r0, #61	; 0x3d
 80032ac:	f7fd fce4 	bl	8000c78 <HAL_NVIC_EnableIRQ>
}
 80032b0:	b00d      	add	sp, #52	; 0x34
 80032b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b4:	40028000 	.word	0x40028000
 80032b8:	58024400 	.word	0x58024400
 80032bc:	58020800 	.word	0x58020800
 80032c0:	58020000 	.word	0x58020000
 80032c4:	58020400 	.word	0x58020400
 80032c8:	58021800 	.word	0x58021800

080032cc <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80032cc:	b530      	push	{r4, r5, lr}
 80032ce:	4604      	mov	r4, r0
 80032d0:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80032d2:	480d      	ldr	r0, [pc, #52]	; (8003308 <HAL_ETH_RxAllocateCallback+0x3c>)
 80032d4:	f003 f9a6 	bl	8006624 <memp_malloc_pool>
  if (p)
 80032d8:	4603      	mov	r3, r0
 80032da:	b178      	cbz	r0, 80032fc <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80032dc:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 80032e0:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80032e2:	2100      	movs	r1, #0
 80032e4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80032e8:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 80032ea:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80032ec:	2241      	movs	r2, #65	; 0x41
 80032ee:	9001      	str	r0, [sp, #4]
 80032f0:	4608      	mov	r0, r1
 80032f2:	9500      	str	r5, [sp, #0]
 80032f4:	f003 fcfa 	bl	8006cec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80032f8:	b003      	add	sp, #12
 80032fa:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_ETH_RxAllocateCallback+0x44>)
 80032fe:	2101      	movs	r1, #1
    *buff = NULL;
 8003300:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8003302:	7011      	strb	r1, [r2, #0]
}
 8003304:	b003      	add	sp, #12
 8003306:	bd30      	pop	{r4, r5, pc}
 8003308:	0800de1c 	.word	0x0800de1c
 800330c:	08002edd 	.word	0x08002edd
 8003310:	24000190 	.word	0x24000190

08003314 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003314:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8003316:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003318:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 800331c:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8003320:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8003324:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8003328:	6805      	ldr	r5, [r0, #0]
 800332a:	b1f5      	cbz	r5, 800336a <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800332c:	680d      	ldr	r5, [r1, #0]
 800332e:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8003330:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003332:	6801      	ldr	r1, [r0, #0]
 8003334:	b129      	cbz	r1, 8003342 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8003336:	8908      	ldrh	r0, [r1, #8]
 8003338:	4418      	add	r0, r3
 800333a:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800333c:	6809      	ldr	r1, [r1, #0]
 800333e:	2900      	cmp	r1, #0
 8003340:	d1f9      	bne.n	8003336 <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003342:	b183      	cbz	r3, 8003366 <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003344:	f002 011f 	and.w	r1, r2, #31
 8003348:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 800334a:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800334e:	4808      	ldr	r0, [pc, #32]	; (8003370 <HAL_ETH_RxLinkCallback+0x5c>)
 8003350:	4411      	add	r1, r2
 8003352:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003356:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8003358:	1a8b      	subs	r3, r1, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	dcf9      	bgt.n	8003352 <HAL_ETH_RxLinkCallback+0x3e>
 800335e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003362:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003366:	bc30      	pop	{r4, r5}
 8003368:	4770      	bx	lr
    *ppStart = p;
 800336a:	6004      	str	r4, [r0, #0]
 800336c:	e7e0      	b.n	8003330 <HAL_ETH_RxLinkCallback+0x1c>
 800336e:	bf00      	nop
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003374:	f003 bd76 	b.w	8006e64 <pbuf_free>

08003378 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8003378:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 800337a:	4804      	ldr	r0, [pc, #16]	; (800338c <sys_lock_tcpip_core+0x14>)
 800337c:	f009 fc08 	bl	800cb90 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8003380:	f000 f948 	bl	8003614 <osThreadGetId>
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <sys_lock_tcpip_core+0x18>)
 8003386:	6018      	str	r0, [r3, #0]
}
 8003388:	bd08      	pop	{r3, pc}
 800338a:	bf00      	nop
 800338c:	24009a74 	.word	0x24009a74
 8003390:	24000284 	.word	0x24000284

08003394 <ethernet_link_thread>:
{
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	b09b      	sub	sp, #108	; 0x6c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800339a:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 800339e:	2264      	movs	r2, #100	; 0x64
 80033a0:	2100      	movs	r1, #0
{
 80033a2:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 80033a4:	a801      	add	r0, sp, #4
 80033a6:	f009 fd8a 	bl	800cebe <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80033aa:	46cb      	mov	fp, r9
 80033ac:	46ca      	mov	sl, r9
 80033ae:	4d2b      	ldr	r5, [pc, #172]	; (800345c <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80033b0:	4f2b      	ldr	r7, [pc, #172]	; (8003460 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 80033b2:	f7ff ffe1 	bl	8003378 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80033b6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003470 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 80033ba:	4c2a      	ldr	r4, [pc, #168]	; (8003464 <ethernet_link_thread+0xd0>)
 80033bc:	e018      	b.n	80033f0 <ethernet_link_thread+0x5c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80033be:	2801      	cmp	r0, #1
 80033c0:	dc42      	bgt.n	8003448 <ethernet_link_thread+0xb4>
    HAL_ETH_Stop_IT(&heth);
 80033c2:	4640      	mov	r0, r8
 80033c4:	f7fe f800 	bl	80013c8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80033c8:	4630      	mov	r0, r6
 80033ca:	f003 fb21 	bl	8006a10 <netif_set_down>
    netif_set_link_down(netif);
 80033ce:	4630      	mov	r0, r6
 80033d0:	f003 fb6a 	bl	8006aa8 <netif_set_link_down>
	lwip_core_lock_holder_thread_id = 0;
 80033d4:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 80033d6:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 80033d8:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80033da:	f009 fbdf 	bl	800cb9c <sys_mutex_unlock>
  osDelay(100);
 80033de:	2064      	movs	r0, #100	; 0x64
 80033e0:	f000 f91a 	bl	8003618 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 80033e4:	4620      	mov	r0, r4
 80033e6:	f009 fbd3 	bl	800cb90 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80033ea:	f000 f913 	bl	8003614 <osThreadGetId>
 80033ee:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80033f0:	4638      	mov	r0, r7
 80033f2:	f7fd fb57 	bl	8000aa4 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80033f6:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 80033fa:	0759      	lsls	r1, r3, #29
 80033fc:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8003400:	d4dd      	bmi.n	80033be <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003402:	07d2      	lsls	r2, r2, #31
 8003404:	d4e6      	bmi.n	80033d4 <ethernet_link_thread+0x40>
 8003406:	2801      	cmp	r0, #1
 8003408:	dde4      	ble.n	80033d4 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 800340a:	3802      	subs	r0, #2
 800340c:	2803      	cmp	r0, #3
 800340e:	d820      	bhi.n	8003452 <ethernet_link_thread+0xbe>
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <ethernet_link_thread+0xd4>)
 8003412:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <ethernet_link_thread+0xd8>)
 8003418:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800341c:	a901      	add	r1, sp, #4
 800341e:	4640      	mov	r0, r8
 8003420:	f7fe fa12 	bl	8001848 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003424:	a901      	add	r1, sp, #4
 8003426:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8003428:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 800342c:	e9cd b906 	strd	fp, r9, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003430:	f7fe fad4 	bl	80019dc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003434:	4640      	mov	r0, r8
 8003436:	f7fd ff77 	bl	8001328 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800343a:	4630      	mov	r0, r6
 800343c:	f003 fac4 	bl	80069c8 <netif_set_up>
      netif_set_link_up(netif);
 8003440:	4630      	mov	r0, r6
 8003442:	f003 fb09 	bl	8006a58 <netif_set_link_up>
 8003446:	e7c5      	b.n	80033d4 <ethernet_link_thread+0x40>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003448:	075b      	lsls	r3, r3, #29
 800344a:	d4c3      	bmi.n	80033d4 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 800344c:	3802      	subs	r0, #2
 800344e:	2803      	cmp	r0, #3
 8003450:	d9de      	bls.n	8003410 <ethernet_link_thread+0x7c>
    if(linkchanged)
 8003452:	f1ba 0f00 	cmp.w	sl, #0
 8003456:	d0bd      	beq.n	80033d4 <ethernet_link_thread+0x40>
 8003458:	e7e0      	b.n	800341c <ethernet_link_thread+0x88>
 800345a:	bf00      	nop
 800345c:	24000284 	.word	0x24000284
 8003460:	24000170 	.word	0x24000170
 8003464:	24009a74 	.word	0x24009a74
 8003468:	0800ddfc 	.word	0x0800ddfc
 800346c:	0800de0c 	.word	0x0800de0c
 8003470:	240001d4 	.word	0x240001d4

08003474 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 8003474:	4b02      	ldr	r3, [pc, #8]	; (8003480 <sys_unlock_tcpip_core+0xc>)
 8003476:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 800347a:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 800347c:	f009 bb8e 	b.w	800cb9c <sys_mutex_unlock>
 8003480:	24000284 	.word	0x24000284
 8003484:	24009a74 	.word	0x24009a74

08003488 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <sys_check_core_locking+0x44>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
void sys_check_core_locking(void){
 8003490:	b510      	push	{r4, lr}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8003492:	b993      	cbnz	r3, 80034ba <sys_check_core_locking+0x32>

  if (lwip_tcpip_thread_id != 0) {
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <sys_check_core_locking+0x48>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b173      	cbz	r3, 80034b8 <sys_check_core_locking+0x30>
	  osThreadId_t current_thread_id = osThreadGetId();
 800349a:	f000 f8bb 	bl	8003614 <osThreadGetId>

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <sys_check_core_locking+0x4c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4283      	cmp	r3, r0
 80034a4:	d008      	beq.n	80034b8 <sys_check_core_locking+0x30>
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <sys_check_core_locking+0x50>)
 80034a8:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 80034ac:	490b      	ldr	r1, [pc, #44]	; (80034dc <sys_check_core_locking+0x54>)
 80034ae:	480c      	ldr	r0, [pc, #48]	; (80034e0 <sys_check_core_locking+0x58>)
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 80034b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 80034b4:	f009 bc9e 	b.w	800cdf4 <iprintf>
}
 80034b8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <sys_check_core_locking+0x50>)
 80034bc:	f240 32ca 	movw	r2, #970	; 0x3ca
 80034c0:	4908      	ldr	r1, [pc, #32]	; (80034e4 <sys_check_core_locking+0x5c>)
 80034c2:	4807      	ldr	r0, [pc, #28]	; (80034e0 <sys_check_core_locking+0x58>)
 80034c4:	f009 fc96 	bl	800cdf4 <iprintf>
 80034c8:	e7e4      	b.n	8003494 <sys_check_core_locking+0xc>
 80034ca:	bf00      	nop
 80034cc:	e000ed00 	.word	0xe000ed00
 80034d0:	24000288 	.word	0x24000288
 80034d4:	24000284 	.word	0x24000284
 80034d8:	0800dd3c 	.word	0x0800dd3c
 80034dc:	0800ddc0 	.word	0x0800ddc0
 80034e0:	0800dd68 	.word	0x0800dd68
 80034e4:	0800dd98 	.word	0x0800dd98

080034e8 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 80034e8:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 80034ea:	f000 f893 	bl	8003614 <osThreadGetId>
 80034ee:	4b01      	ldr	r3, [pc, #4]	; (80034f4 <sys_mark_tcpip_thread+0xc>)
 80034f0:	6018      	str	r0, [r3, #0]
}
 80034f2:	bd08      	pop	{r3, pc}
 80034f4:	24000288 	.word	0x24000288

080034f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80034f8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80034fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80034fe:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003500:	f001 fe02 	bl	8005108 <xTaskGetSchedulerState>
 8003504:	2801      	cmp	r0, #1
 8003506:	d100      	bne.n	800350a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003508:	bd08      	pop	{r3, pc}
 800350a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800350e:	f002 b9e1 	b.w	80058d4 <xPortSysTickHandler>
 8003512:	bf00      	nop

08003514 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003514:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003518:	b92b      	cbnz	r3, 8003526 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <osKernelInitialize+0x20>)
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	b928      	cbnz	r0, 800352c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003524:	4770      	bx	lr
    stat = osErrorISR;
 8003526:	f06f 0005 	mvn.w	r0, #5
 800352a:	4770      	bx	lr
    } else {
      stat = osError;
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	24000b38 	.word	0x24000b38

08003538 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003538:	b510      	push	{r4, lr}
 800353a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800353e:	b974      	cbnz	r4, 800355e <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <osKernelStart+0x2c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2a01      	cmp	r2, #1
 8003546:	d107      	bne.n	8003558 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	4907      	ldr	r1, [pc, #28]	; (8003568 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800354a:	2202      	movs	r2, #2
 800354c:	77cc      	strb	r4, [r1, #31]
 800354e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003550:	f001 fabe 	bl	8004ad0 <vTaskStartScheduler>
      stat = osOK;
 8003554:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8003556:	bd10      	pop	{r4, pc}
      stat = osError;
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
}
 800355c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800355e:	f06f 0005 	mvn.w	r0, #5
}
 8003562:	bd10      	pop	{r4, pc}
 8003564:	24000b38 	.word	0x24000b38
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <osKernelGetTickCount>:
 800356c:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8003570:	b10b      	cbz	r3, 8003576 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8003572:	f001 bb0b 	b.w	8004b8c <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8003576:	f001 bb03 	b.w	8004b80 <xTaskGetTickCount>
 800357a:	bf00      	nop

0800357c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800357e:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003580:	b087      	sub	sp, #28
 8003582:	4614      	mov	r4, r2
  hTask = NULL;
 8003584:	9505      	str	r5, [sp, #20]
 8003586:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800358a:	bb62      	cbnz	r2, 80035e6 <osThreadNew+0x6a>
 800358c:	4606      	mov	r6, r0
 800358e:	b350      	cbz	r0, 80035e6 <osThreadNew+0x6a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003590:	b1e4      	cbz	r4, 80035cc <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003592:	69a7      	ldr	r7, [r4, #24]
 8003594:	bb57      	cbnz	r7, 80035ec <osThreadNew+0x70>
 8003596:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	07db      	lsls	r3, r3, #31
 800359c:	d423      	bmi.n	80035e6 <osThreadNew+0x6a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800359e:	6963      	ldr	r3, [r4, #20]
 80035a0:	b343      	cbz	r3, 80035f4 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035a2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035a6:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
 80035a8:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035aa:	b340      	cbz	r0, 80035fe <osThreadNew+0x82>
 80035ac:	68e2      	ldr	r2, [r4, #12]
 80035ae:	2aa7      	cmp	r2, #167	; 0xa7
 80035b0:	d919      	bls.n	80035e6 <osThreadNew+0x6a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035b2:	6924      	ldr	r4, [r4, #16]
 80035b4:	b1bb      	cbz	r3, 80035e6 <osThreadNew+0x6a>
 80035b6:	b1b4      	cbz	r4, 80035e6 <osThreadNew+0x6a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035b8:	460b      	mov	r3, r1
 80035ba:	4662      	mov	r2, ip
 80035bc:	4629      	mov	r1, r5
 80035be:	9700      	str	r7, [sp, #0]
 80035c0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80035c4:	4630      	mov	r0, r6
 80035c6:	f001 fa17 	bl	80049f8 <xTaskCreateStatic>
 80035ca:	e00d      	b.n	80035e8 <osThreadNew+0x6c>
 80035cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 80035d0:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035d2:	460b      	mov	r3, r1
 80035d4:	4621      	mov	r1, r4
 80035d6:	ac05      	add	r4, sp, #20
 80035d8:	4630      	mov	r0, r6
 80035da:	9700      	str	r7, [sp, #0]
 80035dc:	9401      	str	r4, [sp, #4]
 80035de:	f001 fa45 	bl	8004a6c <xTaskCreate>
 80035e2:	2801      	cmp	r0, #1
 80035e4:	d009      	beq.n	80035fa <osThreadNew+0x7e>
        return (NULL);
 80035e6:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 80035e8:	b007      	add	sp, #28
 80035ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035ec:	1e7a      	subs	r2, r7, #1
 80035ee:	2a37      	cmp	r2, #55	; 0x37
 80035f0:	d9d2      	bls.n	8003598 <osThreadNew+0x1c>
 80035f2:	e7f8      	b.n	80035e6 <osThreadNew+0x6a>
    stack = configMINIMAL_STACK_SIZE;
 80035f4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80035f8:	e7d5      	b.n	80035a6 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
 80035fa:	9805      	ldr	r0, [sp, #20]
 80035fc:	e7f4      	b.n	80035e8 <osThreadNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035fe:	68e3      	ldr	r3, [r4, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f1      	bne.n	80035e8 <osThreadNew+0x6c>
 8003604:	6923      	ldr	r3, [r4, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ee      	bne.n	80035e8 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800360a:	fa1f f28c 	uxth.w	r2, ip
 800360e:	462c      	mov	r4, r5
 8003610:	e7df      	b.n	80035d2 <osThreadNew+0x56>
 8003612:	bf00      	nop

08003614 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8003614:	f001 bd72 	b.w	80050fc <xTaskGetCurrentTaskHandle>

08003618 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003618:	b510      	push	{r4, lr}
 800361a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800361e:	b92c      	cbnz	r4, 800362c <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003620:	b900      	cbnz	r0, 8003624 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003622:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8003624:	f001 fc08 	bl	8004e38 <vTaskDelay>
    stat = osOK;
 8003628:	4620      	mov	r0, r4
}
 800362a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800362c:	f06f 0005 	mvn.w	r0, #5
}
 8003630:	bd10      	pop	{r4, pc}
 8003632:	bf00      	nop

08003634 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800363a:	b9db      	cbnz	r3, 8003674 <osMutexNew+0x40>
    if (attr != NULL) {
 800363c:	4604      	mov	r4, r0
 800363e:	b1e0      	cbz	r0, 800367a <osMutexNew+0x46>
      type = attr->attr_bits;
 8003640:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003642:	0733      	lsls	r3, r6, #28
 8003644:	d416      	bmi.n	8003674 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003646:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003648:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800364c:	68c3      	ldr	r3, [r0, #12]
 800364e:	b181      	cbz	r1, 8003672 <osMutexNew+0x3e>
 8003650:	2b4f      	cmp	r3, #79	; 0x4f
 8003652:	d90f      	bls.n	8003674 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003654:	b31e      	cbz	r6, 800369e <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003656:	2004      	movs	r0, #4
 8003658:	f000 fc9a 	bl	8003f90 <xQueueCreateMutexStatic>
 800365c:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800365e:	b14d      	cbz	r5, 8003674 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8003660:	6821      	ldr	r1, [r4, #0]
 8003662:	4628      	mov	r0, r5
 8003664:	f001 f812 	bl	800468c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003668:	b12e      	cbz	r6, 8003676 <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800366a:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800366e:	4628      	mov	r0, r5
 8003670:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003672:	b163      	cbz	r3, 800368e <osMutexNew+0x5a>
  hMutex = NULL;
 8003674:	2500      	movs	r5, #0
}
 8003676:	4628      	mov	r0, r5
 8003678:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
 800367a:	2001      	movs	r0, #1
 800367c:	f000 fcde 	bl	800403c <xQueueCreateMutex>
      if (hMutex != NULL) {
 8003680:	4605      	mov	r5, r0
 8003682:	2800      	cmp	r0, #0
 8003684:	d0f6      	beq.n	8003674 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
 8003686:	4621      	mov	r1, r4
 8003688:	f001 f800 	bl	800468c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800368c:	e7f3      	b.n	8003676 <osMutexNew+0x42>
            if (rmtx != 0U) {
 800368e:	b15e      	cbz	r6, 80036a8 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003690:	2004      	movs	r0, #4
 8003692:	f000 fcd3 	bl	800403c <xQueueCreateMutex>
      if (hMutex != NULL) {
 8003696:	4605      	mov	r5, r0
 8003698:	2800      	cmp	r0, #0
 800369a:	d1e1      	bne.n	8003660 <osMutexNew+0x2c>
 800369c:	e7ea      	b.n	8003674 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800369e:	2001      	movs	r0, #1
 80036a0:	f000 fc76 	bl	8003f90 <xQueueCreateMutexStatic>
 80036a4:	4605      	mov	r5, r0
 80036a6:	e7da      	b.n	800365e <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 80036a8:	2001      	movs	r0, #1
 80036aa:	f000 fcc7 	bl	800403c <xQueueCreateMutex>
      if (hMutex != NULL) {
 80036ae:	4605      	mov	r5, r0
 80036b0:	e7d5      	b.n	800365e <osMutexNew+0x2a>
 80036b2:	bf00      	nop

080036b4 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80036b4:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80036b8:	f000 0301 	and.w	r3, r0, #1
 80036bc:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80036c0:	b9a8      	cbnz	r0, 80036ee <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80036c2:	b1ba      	cbz	r2, 80036f4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80036c4:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80036c6:	b510      	push	{r4, lr}
 80036c8:	460c      	mov	r4, r1
    if (rmtx != 0U) {
 80036ca:	b953      	cbnz	r3, 80036e2 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80036cc:	f000 fe58 	bl	8004380 <xQueueSemaphoreTake>
 80036d0:	2801      	cmp	r0, #1
 80036d2:	d00a      	beq.n	80036ea <osMutexAcquire+0x36>
          stat = osErrorResource;
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	bf14      	ite	ne
 80036d8:	f06f 0001 	mvnne.w	r0, #1
 80036dc:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 80036e0:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80036e2:	f000 ff29 	bl	8004538 <xQueueTakeMutexRecursive>
 80036e6:	2801      	cmp	r0, #1
 80036e8:	d1f4      	bne.n	80036d4 <osMutexAcquire+0x20>
  stat = osOK;
 80036ea:	2000      	movs	r0, #0
}
 80036ec:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80036ee:	f06f 0005 	mvn.w	r0, #5
 80036f2:	4770      	bx	lr
    stat = osErrorParameter;
 80036f4:	f06f 0003 	mvn.w	r0, #3
}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop

080036fc <osMutexRelease>:
 80036fc:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003700:	b9ba      	cbnz	r2, 8003732 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003702:	b510      	push	{r4, lr}
 8003704:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003708:	b1b4      	cbz	r4, 8003738 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800370a:	f000 0301 	and.w	r3, r0, #1
 800370e:	b943      	cbnz	r3, 8003722 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003710:	461a      	mov	r2, r3
 8003712:	4619      	mov	r1, r3
 8003714:	4620      	mov	r0, r4
 8003716:	f000 fb77 	bl	8003e08 <xQueueGenericSend>
 800371a:	2801      	cmp	r0, #1
 800371c:	d106      	bne.n	800372c <osMutexRelease+0x30>
  stat = osOK;
 800371e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003720:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003722:	4620      	mov	r0, r4
 8003724:	f000 fc6a 	bl	8003ffc <xQueueGiveMutexRecursive>
 8003728:	2801      	cmp	r0, #1
 800372a:	d0f8      	beq.n	800371e <osMutexRelease+0x22>
        stat = osErrorResource;
 800372c:	f06f 0002 	mvn.w	r0, #2
}
 8003730:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003732:	f06f 0005 	mvn.w	r0, #5
}
 8003736:	4770      	bx	lr
    stat = osErrorParameter;
 8003738:	f06f 0003 	mvn.w	r0, #3
}
 800373c:	bd10      	pop	{r4, pc}
 800373e:	bf00      	nop

08003740 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003742:	b083      	sub	sp, #12
 8003744:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003748:	b98e      	cbnz	r6, 800376e <osSemaphoreNew+0x2e>
 800374a:	4605      	mov	r5, r0
 800374c:	b178      	cbz	r0, 800376e <osSemaphoreNew+0x2e>
 800374e:	4288      	cmp	r0, r1
 8003750:	460f      	mov	r7, r1
 8003752:	d30c      	bcc.n	800376e <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8003754:	4614      	mov	r4, r2
 8003756:	b182      	cbz	r2, 800377a <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003758:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 800375c:	b15a      	cbz	r2, 8003776 <osSemaphoreNew+0x36>
 800375e:	2b4f      	cmp	r3, #79	; 0x4f
 8003760:	d905      	bls.n	800376e <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8003762:	2801      	cmp	r0, #1
 8003764:	d032      	beq.n	80037cc <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003766:	f000 fb0d 	bl	8003d84 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800376a:	4605      	mov	r5, r0
 800376c:	b978      	cbnz	r0, 800378e <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
 800376e:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8003770:	4628      	mov	r0, r5
 8003772:	b003      	add	sp, #12
 8003774:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f9      	bne.n	800376e <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 800377a:	2d01      	cmp	r5, #1
 800377c:	d00f      	beq.n	800379e <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800377e:	4628      	mov	r0, r5
 8003780:	4639      	mov	r1, r7
 8003782:	f000 fb23 	bl	8003dcc <xQueueCreateCountingSemaphore>
 8003786:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8003788:	2d00      	cmp	r5, #0
 800378a:	d0f0      	beq.n	800376e <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 800378c:	b104      	cbz	r4, 8003790 <osSemaphoreNew+0x50>
          name = attr->name;
 800378e:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8003790:	4628      	mov	r0, r5
 8003792:	4621      	mov	r1, r4
 8003794:	f000 ff7a 	bl	800468c <vQueueAddToRegistry>
}
 8003798:	4628      	mov	r0, r5
 800379a:	b003      	add	sp, #12
 800379c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 800379e:	4628      	mov	r0, r5
 80037a0:	2203      	movs	r2, #3
 80037a2:	2100      	movs	r1, #0
 80037a4:	f000 fac6 	bl	8003d34 <xQueueGenericCreate>
 80037a8:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	d0df      	beq.n	800376e <osSemaphoreNew+0x2e>
 80037ae:	2f00      	cmp	r7, #0
 80037b0:	d0ea      	beq.n	8003788 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80037b2:	2300      	movs	r3, #0
 80037b4:	4628      	mov	r0, r5
 80037b6:	461a      	mov	r2, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	f000 fb25 	bl	8003e08 <xQueueGenericSend>
 80037be:	2801      	cmp	r0, #1
 80037c0:	d0e4      	beq.n	800378c <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 80037c2:	4628      	mov	r0, r5
            hSemaphore = NULL;
 80037c4:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
 80037c6:	f000 ff37 	bl	8004638 <vQueueDelete>
      if (hSemaphore != NULL) {
 80037ca:	e7d1      	b.n	8003770 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80037cc:	4613      	mov	r3, r2
 80037ce:	2203      	movs	r2, #3
 80037d0:	4631      	mov	r1, r6
 80037d2:	9200      	str	r2, [sp, #0]
 80037d4:	4632      	mov	r2, r6
 80037d6:	f000 fa5b 	bl	8003c90 <xQueueGenericCreateStatic>
 80037da:	4605      	mov	r5, r0
 80037dc:	e7e5      	b.n	80037aa <osSemaphoreNew+0x6a>
 80037de:	bf00      	nop

080037e0 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80037e0:	b370      	cbz	r0, 8003840 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80037e2:	b510      	push	{r4, lr}
 80037e4:	460c      	mov	r4, r1
 80037e6:	b082      	sub	sp, #8
 80037e8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80037ec:	b1c3      	cbz	r3, 8003820 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 80037ee:	bb21      	cbnz	r1, 800383a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80037f0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80037f2:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80037f4:	f000 fec0 	bl	8004578 <xQueueReceiveFromISR>
 80037f8:	2801      	cmp	r0, #1
 80037fa:	d11a      	bne.n	8003832 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80037fc:	9b01      	ldr	r3, [sp, #4]
 80037fe:	b913      	cbnz	r3, 8003806 <osSemaphoreAcquire+0x26>
  stat = osOK;
 8003800:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003802:	b002      	add	sp, #8
 8003804:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8003806:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800380a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800381a:	4620      	mov	r0, r4
}
 800381c:	b002      	add	sp, #8
 800381e:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003820:	f000 fdae 	bl	8004380 <xQueueSemaphoreTake>
 8003824:	2801      	cmp	r0, #1
 8003826:	d0eb      	beq.n	8003800 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 8003828:	b11c      	cbz	r4, 8003832 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
 800382a:	f06f 0001 	mvn.w	r0, #1
}
 800382e:	b002      	add	sp, #8
 8003830:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 8003832:	f06f 0002 	mvn.w	r0, #2
}
 8003836:	b002      	add	sp, #8
 8003838:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 800383a:	f06f 0003 	mvn.w	r0, #3
 800383e:	e7e0      	b.n	8003802 <osSemaphoreAcquire+0x22>
 8003840:	f06f 0003 	mvn.w	r0, #3
}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop

08003848 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003848:	b330      	cbz	r0, 8003898 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800384a:	b510      	push	{r4, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003852:	b1ab      	cbz	r3, 8003880 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8003854:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003856:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8003858:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800385a:	f000 fc77 	bl	800414c <xQueueGiveFromISR>
 800385e:	2801      	cmp	r0, #1
 8003860:	d117      	bne.n	8003892 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8003862:	9b01      	ldr	r3, [sp, #4]
 8003864:	b193      	cbz	r3, 800388c <osSemaphoreRelease+0x44>
 8003866:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800386a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800387a:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800387c:	b002      	add	sp, #8
 800387e:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003880:	461a      	mov	r2, r3
 8003882:	4619      	mov	r1, r3
 8003884:	f000 fac0 	bl	8003e08 <xQueueGenericSend>
 8003888:	2801      	cmp	r0, #1
 800388a:	d102      	bne.n	8003892 <osSemaphoreRelease+0x4a>
  stat = osOK;
 800388c:	2000      	movs	r0, #0
}
 800388e:	b002      	add	sp, #8
 8003890:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 8003892:	f06f 0002 	mvn.w	r0, #2
 8003896:	e7fa      	b.n	800388e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8003898:	f06f 0003 	mvn.w	r0, #3
}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b083      	sub	sp, #12
 80038a4:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80038a8:	b987      	cbnz	r7, 80038cc <osMessageQueueNew+0x2c>
 80038aa:	4605      	mov	r5, r0
 80038ac:	b170      	cbz	r0, 80038cc <osMessageQueueNew+0x2c>
 80038ae:	b169      	cbz	r1, 80038cc <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 80038b0:	4614      	mov	r4, r2
 80038b2:	b17a      	cbz	r2, 80038d4 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80038b4:	6893      	ldr	r3, [r2, #8]
 80038b6:	b1cb      	cbz	r3, 80038ec <osMessageQueueNew+0x4c>
 80038b8:	68d2      	ldr	r2, [r2, #12]
 80038ba:	2a4f      	cmp	r2, #79	; 0x4f
 80038bc:	d906      	bls.n	80038cc <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80038be:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80038c0:	b122      	cbz	r2, 80038cc <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80038c2:	fb01 f505 	mul.w	r5, r1, r5
 80038c6:	6966      	ldr	r6, [r4, #20]
 80038c8:	42ae      	cmp	r6, r5
 80038ca:	d21f      	bcs.n	800390c <osMessageQueueNew+0x6c>
  hQueue = NULL;
 80038cc:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80038ce:	4628      	mov	r0, r5
 80038d0:	b003      	add	sp, #12
 80038d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 80038d4:	f000 fa2e 	bl	8003d34 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80038d8:	4605      	mov	r5, r0
 80038da:	2800      	cmp	r0, #0
 80038dc:	d0f6      	beq.n	80038cc <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 80038de:	4628      	mov	r0, r5
 80038e0:	4621      	mov	r1, r4
 80038e2:	f000 fed3 	bl	800468c <vQueueAddToRegistry>
}
 80038e6:	4628      	mov	r0, r5
 80038e8:	b003      	add	sp, #12
 80038ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80038ec:	68d3      	ldr	r3, [r2, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ec      	bne.n	80038cc <osMessageQueueNew+0x2c>
 80038f2:	6913      	ldr	r3, [r2, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e9      	bne.n	80038cc <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80038f8:	6952      	ldr	r2, [r2, #20]
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	d1e6      	bne.n	80038cc <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 80038fe:	f000 fa19 	bl	8003d34 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003902:	4605      	mov	r5, r0
 8003904:	2800      	cmp	r0, #0
 8003906:	d0e1      	beq.n	80038cc <osMessageQueueNew+0x2c>
        name = attr->name;
 8003908:	6824      	ldr	r4, [r4, #0]
 800390a:	e7e8      	b.n	80038de <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800390c:	9700      	str	r7, [sp, #0]
 800390e:	f000 f9bf 	bl	8003c90 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003912:	4605      	mov	r5, r0
 8003914:	2800      	cmp	r0, #0
 8003916:	d1f7      	bne.n	8003908 <osMessageQueueNew+0x68>
 8003918:	e7d8      	b.n	80038cc <osMessageQueueNew+0x2c>
 800391a:	bf00      	nop

0800391c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800391c:	b530      	push	{r4, r5, lr}
 800391e:	461c      	mov	r4, r3
 8003920:	b083      	sub	sp, #12
 8003922:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003926:	b30b      	cbz	r3, 800396c <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003928:	3c00      	subs	r4, #0
 800392a:	bf18      	it	ne
 800392c:	2401      	movne	r4, #1
 800392e:	2900      	cmp	r1, #0
 8003930:	bf08      	it	eq
 8003932:	f044 0401 	orreq.w	r4, r4, #1
 8003936:	bb7c      	cbnz	r4, 8003998 <osMessageQueuePut+0x7c>
 8003938:	fab0 f480 	clz	r4, r0
 800393c:	0964      	lsrs	r4, r4, #5
 800393e:	b358      	cbz	r0, 8003998 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003940:	4623      	mov	r3, r4
 8003942:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8003944:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003946:	f000 fb97 	bl	8004078 <xQueueGenericSendFromISR>
 800394a:	2801      	cmp	r0, #1
 800394c:	d120      	bne.n	8003990 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800394e:	9b01      	ldr	r3, [sp, #4]
 8003950:	b1db      	cbz	r3, 800398a <osMessageQueuePut+0x6e>
 8003952:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003966:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 8003968:	b003      	add	sp, #12
 800396a:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800396c:	b1a0      	cbz	r0, 8003998 <osMessageQueuePut+0x7c>
 800396e:	fab1 f381 	clz	r3, r1
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	b181      	cbz	r1, 8003998 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003976:	4622      	mov	r2, r4
 8003978:	f000 fa46 	bl	8003e08 <xQueueGenericSend>
 800397c:	2801      	cmp	r0, #1
 800397e:	d004      	beq.n	800398a <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
 8003980:	b134      	cbz	r4, 8003990 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
 8003982:	f06f 0001 	mvn.w	r0, #1
}
 8003986:	b003      	add	sp, #12
 8003988:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 800398a:	2000      	movs	r0, #0
}
 800398c:	b003      	add	sp, #12
 800398e:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8003990:	f06f 0002 	mvn.w	r0, #2
}
 8003994:	b003      	add	sp, #12
 8003996:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 8003998:	f06f 0003 	mvn.w	r0, #3
 800399c:	e7e4      	b.n	8003968 <osMessageQueuePut+0x4c>
 800399e:	bf00      	nop

080039a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80039a0:	b530      	push	{r4, r5, lr}
 80039a2:	461c      	mov	r4, r3
 80039a4:	b083      	sub	sp, #12
 80039a6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80039aa:	b303      	cbz	r3, 80039ee <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039ac:	3c00      	subs	r4, #0
 80039ae:	bf18      	it	ne
 80039b0:	2401      	movne	r4, #1
 80039b2:	2900      	cmp	r1, #0
 80039b4:	bf08      	it	eq
 80039b6:	f044 0401 	orreq.w	r4, r4, #1
 80039ba:	bb5c      	cbnz	r4, 8003a14 <osMessageQueueGet+0x74>
 80039bc:	fab0 f480 	clz	r4, r0
 80039c0:	0964      	lsrs	r4, r4, #5
 80039c2:	b338      	cbz	r0, 8003a14 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80039c4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80039c6:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80039c8:	f000 fdd6 	bl	8004578 <xQueueReceiveFromISR>
 80039cc:	2801      	cmp	r0, #1
 80039ce:	d11d      	bne.n	8003a0c <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80039d0:	9b01      	ldr	r3, [sp, #4]
 80039d2:	b1c3      	cbz	r3, 8003a06 <osMessageQueueGet+0x66>
 80039d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80039d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80039e8:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 80039ea:	b003      	add	sp, #12
 80039ec:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80039ee:	b188      	cbz	r0, 8003a14 <osMessageQueueGet+0x74>
 80039f0:	b181      	cbz	r1, 8003a14 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80039f2:	4622      	mov	r2, r4
 80039f4:	f000 fc02 	bl	80041fc <xQueueReceive>
 80039f8:	2801      	cmp	r0, #1
 80039fa:	d004      	beq.n	8003a06 <osMessageQueueGet+0x66>
        if (timeout != 0U) {
 80039fc:	b134      	cbz	r4, 8003a0c <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
 80039fe:	f06f 0001 	mvn.w	r0, #1
}
 8003a02:	b003      	add	sp, #12
 8003a04:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 8003a06:	2000      	movs	r0, #0
}
 8003a08:	b003      	add	sp, #12
 8003a0a:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8003a0c:	f06f 0002 	mvn.w	r0, #2
}
 8003a10:	b003      	add	sp, #12
 8003a12:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 8003a14:	f06f 0003 	mvn.w	r0, #3
 8003a18:	e7e7      	b.n	80039ea <osMessageQueueGet+0x4a>
 8003a1a:	bf00      	nop

08003a1c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a1e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a20:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a22:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a26:	4c04      	ldr	r4, [pc, #16]	; (8003a38 <vApplicationGetIdleTaskMemory+0x1c>)
 8003a28:	600c      	str	r4, [r1, #0]
}
 8003a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a2e:	6013      	str	r3, [r2, #0]
}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	24000a90 	.word	0x24000a90
 8003a38:	24000290 	.word	0x24000290

08003a3c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a3e:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a40:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a46:	4c04      	ldr	r4, [pc, #16]	; (8003a58 <vApplicationGetTimerTaskMemory+0x1c>)
 8003a48:	600c      	str	r4, [r1, #0]
}
 8003a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	24001b3c 	.word	0x24001b3c
 8003a58:	24000b3c 	.word	0x24000b3c

08003a5c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a5c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a64:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a66:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a68:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop

08003a74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop

08003a7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a7c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003a7e:	6802      	ldr	r2, [r0, #0]
{
 8003a80:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a82:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8003a84:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8003a86:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a88:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a8a:	689c      	ldr	r4, [r3, #8]
 8003a8c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a8e:	6099      	str	r1, [r3, #8]
}
 8003a90:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8003a94:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003a96:	6002      	str	r2, [r0, #0]
}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop

08003a9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a9c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a9e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003aa0:	1c6b      	adds	r3, r5, #1
 8003aa2:	d010      	beq.n	8003ac6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003aa4:	f100 0308 	add.w	r3, r0, #8
 8003aa8:	461c      	mov	r4, r3
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	42aa      	cmp	r2, r5
 8003ab0:	d9fa      	bls.n	8003aa8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003ab2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ab4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8003ab6:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ab8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aba:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003abc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8003abe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003ac0:	6002      	str	r2, [r0, #0]
}
 8003ac2:	bc30      	pop	{r4, r5}
 8003ac4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ac6:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ac8:	6863      	ldr	r3, [r4, #4]
 8003aca:	e7f2      	b.n	8003ab2 <vListInsert+0x16>

08003acc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003acc:	6903      	ldr	r3, [r0, #16]
{
 8003ace:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ad0:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ad2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8003ad6:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8003ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003adc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ade:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8003ae0:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ae4:	bf08      	it	eq
 8003ae6:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8003ae8:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8003aea:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003aec:	3a01      	subs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8003af0:	6818      	ldr	r0, [r3, #0]
}
 8003af2:	4770      	bx	lr

08003af4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003af8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003afa:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003afc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003afe:	b92a      	cbnz	r2, 8003b0c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b00:	6805      	ldr	r5, [r0, #0]
 8003b02:	b365      	cbz	r5, 8003b5e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b04:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8003b06:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b08:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003b0c:	b97d      	cbnz	r5, 8003b2e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b0e:	6840      	ldr	r0, [r0, #4]
 8003b10:	f009 faa1 	bl	800d056 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b14:	6863      	ldr	r3, [r4, #4]
 8003b16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b18:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1a:	68a2      	ldr	r2, [r4, #8]
 8003b1c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b1e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b20:	d319      	bcc.n	8003b56 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b22:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b24:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8003b26:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b28:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b2a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b2e:	68c0      	ldr	r0, [r0, #12]
 8003b30:	f009 fa91 	bl	800d056 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	4251      	negs	r1, r2
 8003b3a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b3c:	6822      	ldr	r2, [r4, #0]
 8003b3e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b40:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b42:	d202      	bcs.n	8003b4a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b44:	68a3      	ldr	r3, [r4, #8]
 8003b46:	440b      	add	r3, r1
 8003b48:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003b4a:	2d02      	cmp	r5, #2
 8003b4c:	d00d      	beq.n	8003b6a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b4e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8003b50:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b52:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003b54:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b56:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8003b58:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b5a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b5e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b60:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b62:	f001 fb27 	bl	80051b4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b66:	60a5      	str	r5, [r4, #8]
 8003b68:	e7ce      	b.n	8003b08 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b6a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8003b6c:	f04f 0000 	mov.w	r0, #0
 8003b70:	bf38      	it	cc
 8003b72:	2601      	movcc	r6, #1
 8003b74:	e7c8      	b.n	8003b08 <prvCopyDataToQueue+0x14>
 8003b76:	bf00      	nop

08003b78 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b7c:	f001 fe42 	bl	8005804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b80:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8003b84:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b86:	2c00      	cmp	r4, #0
 8003b88:	dd14      	ble.n	8003bb4 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b8a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8003b8e:	e003      	b.n	8003b98 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b90:	1e63      	subs	r3, r4, #1
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b96:	b16a      	cbz	r2, 8003bb4 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b9a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b9c:	b153      	cbz	r3, 8003bb4 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b9e:	f001 fa09 	bl	8004fb4 <xTaskRemoveFromEventList>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d0f4      	beq.n	8003b90 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8003ba6:	f001 faa3 	bl	80050f0 <vTaskMissedYield>
			--cTxLock;
 8003baa:	1e63      	subs	r3, r4, #1
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bb0:	2a00      	cmp	r2, #0
 8003bb2:	d1f1      	bne.n	8003b98 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bb4:	23ff      	movs	r3, #255	; 0xff
 8003bb6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bba:	f001 fe45 	bl	8005848 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bbe:	f001 fe21 	bl	8005804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bc2:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8003bc6:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	dd14      	ble.n	8003bf6 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bcc:	f105 0610 	add.w	r6, r5, #16
 8003bd0:	e003      	b.n	8003bda <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bd2:	1e63      	subs	r3, r4, #1
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bd8:	b16a      	cbz	r2, 8003bf6 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bda:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bdc:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bde:	b153      	cbz	r3, 8003bf6 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003be0:	f001 f9e8 	bl	8004fb4 <xTaskRemoveFromEventList>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d0f4      	beq.n	8003bd2 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8003be8:	f001 fa82 	bl	80050f0 <vTaskMissedYield>
				--cRxLock;
 8003bec:	1e63      	subs	r3, r4, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	d1f1      	bne.n	8003bda <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bf6:	23ff      	movs	r3, #255	; 0xff
 8003bf8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8003bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003c00:	f001 be22 	b.w	8005848 <vPortExitCritical>

08003c04 <xQueueGenericReset>:
{
 8003c04:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003c06:	b1e0      	cbz	r0, 8003c42 <xQueueGenericReset+0x3e>
 8003c08:	4604      	mov	r4, r0
 8003c0a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003c0c:	f001 fdfa 	bl	8005804 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c16:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c1c:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c1e:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c20:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c22:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c24:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003c26:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c28:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c2a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8003c2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003c34:	b975      	cbnz	r5, 8003c54 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	b9c3      	cbnz	r3, 8003c6c <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8003c3a:	f001 fe05 	bl	8005848 <vPortExitCritical>
}
 8003c3e:	2001      	movs	r0, #1
 8003c40:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003c52:	e7fe      	b.n	8003c52 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c54:	f104 0010 	add.w	r0, r4, #16
 8003c58:	f7ff ff00 	bl	8003a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c60:	f7ff fefc 	bl	8003a5c <vListInitialise>
	taskEXIT_CRITICAL();
 8003c64:	f001 fdf0 	bl	8005848 <vPortExitCritical>
}
 8003c68:	2001      	movs	r0, #1
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c6c:	f104 0010 	add.w	r0, r4, #16
 8003c70:	f001 f9a0 	bl	8004fb4 <xTaskRemoveFromEventList>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d0e0      	beq.n	8003c3a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003c78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c80:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	e7d5      	b.n	8003c3a <xQueueGenericReset+0x36>
 8003c8e:	bf00      	nop

08003c90 <xQueueGenericCreateStatic>:
	{
 8003c90:	b530      	push	{r4, r5, lr}
 8003c92:	b085      	sub	sp, #20
 8003c94:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c98:	b940      	cbnz	r0, 8003cac <xQueueGenericCreateStatic+0x1c>
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	e7fe      	b.n	8003caa <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8003cac:	b153      	cbz	r3, 8003cc4 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cae:	b30a      	cbz	r2, 8003cf4 <xQueueGenericCreateStatic+0x64>
 8003cb0:	b989      	cbnz	r1, 8003cd6 <xQueueGenericCreateStatic+0x46>
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	e7fe      	b.n	8003cc2 <xQueueGenericCreateStatic+0x32>
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003cd4:	e7fe      	b.n	8003cd4 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cd6:	b16a      	cbz	r2, 8003cf4 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cd8:	2550      	movs	r5, #80	; 0x50
 8003cda:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cdc:	9d03      	ldr	r5, [sp, #12]
 8003cde:	2d50      	cmp	r5, #80	; 0x50
 8003ce0:	d013      	beq.n	8003d0a <xQueueGenericCreateStatic+0x7a>
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	e7fe      	b.n	8003cf2 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cf4:	2900      	cmp	r1, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <xQueueGenericCreateStatic+0x48>
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	e7fe      	b.n	8003d08 <xQueueGenericCreateStatic+0x78>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d0a:	2900      	cmp	r1, #0
 8003d0c:	bf08      	it	eq
 8003d0e:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8003d10:	6419      	str	r1, [r3, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d12:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8003d14:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003d16:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d18:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d1a:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8003d1e:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d20:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d22:	f7ff ff6f 	bl	8003c04 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003d26:	9b01      	ldr	r3, [sp, #4]
	}
 8003d28:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8003d2a:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
	}
 8003d2e:	b005      	add	sp, #20
 8003d30:	bd30      	pop	{r4, r5, pc}
 8003d32:	bf00      	nop

08003d34 <xQueueGenericCreate>:
	{
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d36:	b940      	cbnz	r0, 8003d4a <xQueueGenericCreate+0x16>
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	e7fe      	b.n	8003d48 <xQueueGenericCreate+0x14>
 8003d4a:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d4c:	fb01 f000 	mul.w	r0, r1, r0
 8003d50:	460d      	mov	r5, r1
 8003d52:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d54:	3050      	adds	r0, #80	; 0x50
 8003d56:	f001 fed1 	bl	8005afc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003d5a:	4607      	mov	r7, r0
 8003d5c:	b170      	cbz	r0, 8003d7c <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d64:	b165      	cbz	r5, 8003d80 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d66:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8003d70:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d74:	f7ff ff46 	bl	8003c04 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003d78:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
	}
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d80:	4603      	mov	r3, r0
 8003d82:	e7f2      	b.n	8003d6a <xQueueGenericCreate+0x36>

08003d84 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8003d84:	b940      	cbnz	r0, 8003d98 <xQueueCreateCountingSemaphoreStatic+0x14>
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	e7fe      	b.n	8003d96 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003d98:	4288      	cmp	r0, r1
	{
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8003da0:	d208      	bcs.n	8003db4 <xQueueCreateCountingSemaphoreStatic+0x30>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	e7fe      	b.n	8003db2 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003db4:	2102      	movs	r1, #2
 8003db6:	4613      	mov	r3, r2
 8003db8:	2200      	movs	r2, #0
 8003dba:	9100      	str	r1, [sp, #0]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	f7ff ff67 	bl	8003c90 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8003dc2:	b100      	cbz	r0, 8003dc6 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003dc4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	bf00      	nop

08003dcc <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8003dcc:	b940      	cbnz	r0, 8003de0 <xQueueCreateCountingSemaphore+0x14>
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	e7fe      	b.n	8003dde <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003de0:	4288      	cmp	r0, r1
	{
 8003de2:	b510      	push	{r4, lr}
 8003de4:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8003de6:	d208      	bcs.n	8003dfa <xQueueCreateCountingSemaphore+0x2e>
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	e7fe      	b.n	8003df8 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	f7ff ff99 	bl	8003d34 <xQueueGenericCreate>
		if( xHandle != NULL )
 8003e02:	b100      	cbz	r0, 8003e06 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003e04:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8003e06:	bd10      	pop	{r4, pc}

08003e08 <xQueueGenericSend>:
{
 8003e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d07e      	beq.n	8003f12 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e14:	460f      	mov	r7, r1
 8003e16:	4604      	mov	r4, r0
 8003e18:	461e      	mov	r6, r3
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	d069      	beq.n	8003ef2 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e1e:	2e02      	cmp	r6, #2
 8003e20:	d10b      	bne.n	8003e3a <xQueueGenericSend+0x32>
 8003e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d008      	beq.n	8003e3a <xQueueGenericSend+0x32>
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	e7fe      	b.n	8003e38 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e3a:	f001 f965 	bl	8005108 <xTaskGetSchedulerState>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d070      	beq.n	8003f24 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e42:	f1a6 0802 	sub.w	r8, r6, #2
 8003e46:	2500      	movs	r5, #0
 8003e48:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8003e4c:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e4e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003e52:	e007      	b.n	8003e64 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003e54:	f001 fcf8 	bl	8005848 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f7ff fe8d 	bl	8003b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e5e:	f000 ffdb 	bl	8004e18 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e62:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8003e64:	f001 fcce 	bl	8005804 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e6a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003e6c:	4290      	cmp	r0, r2
 8003e6e:	d365      	bcc.n	8003f3c <xQueueGenericSend+0x134>
 8003e70:	f1b8 0f00 	cmp.w	r8, #0
 8003e74:	d162      	bne.n	8003f3c <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e76:	9b01      	ldr	r3, [sp, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d077      	beq.n	8003f6c <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8003e7c:	2d00      	cmp	r5, #0
 8003e7e:	d044      	beq.n	8003f0a <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8003e80:	f001 fce2 	bl	8005848 <vPortExitCritical>
		vTaskSuspendAll();
 8003e84:	f000 fe74 	bl	8004b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e88:	f001 fcbc 	bl	8005804 <vPortEnterCritical>
 8003e8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003e90:	2bff      	cmp	r3, #255	; 0xff
 8003e92:	d101      	bne.n	8003e98 <xQueueGenericSend+0x90>
 8003e94:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8003e98:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003e9c:	2bff      	cmp	r3, #255	; 0xff
 8003e9e:	d101      	bne.n	8003ea4 <xQueueGenericSend+0x9c>
 8003ea0:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8003ea4:	f001 fcd0 	bl	8005848 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ea8:	a901      	add	r1, sp, #4
 8003eaa:	a802      	add	r0, sp, #8
 8003eac:	f001 f8d8 	bl	8005060 <xTaskCheckForTimeOut>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d15f      	bne.n	8003f74 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8003eb4:	f001 fca6 	bl	8005804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003eb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003eba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d1c9      	bne.n	8003e54 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8003ec0:	f001 fcc2 	bl	8005848 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ec4:	9901      	ldr	r1, [sp, #4]
 8003ec6:	f104 0010 	add.w	r0, r4, #16
 8003eca:	f001 f83b 	bl	8004f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7ff fe52 	bl	8003b78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ed4:	f000 ffa0 	bl	8004e18 <xTaskResumeAll>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d1c2      	bne.n	8003e62 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8003edc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	e7b7      	b.n	8003e62 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ef2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d092      	beq.n	8003e1e <xQueueGenericSend+0x16>
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	e7fe      	b.n	8003f08 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f0a:	a802      	add	r0, sp, #8
 8003f0c:	f001 f89c 	bl	8005048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f10:	e7b6      	b.n	8003e80 <xQueueGenericSend+0x78>
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003f22:	e7fe      	b.n	8003f22 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f24:	9b01      	ldr	r3, [sp, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d08b      	beq.n	8003e42 <xQueueGenericSend+0x3a>
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	e7fe      	b.n	8003f3a <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	4639      	mov	r1, r7
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff fdd7 	bl	8003af4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f48:	b9db      	cbnz	r3, 8003f82 <xQueueGenericSend+0x17a>
					else if( xYieldRequired != pdFALSE )
 8003f4a:	b148      	cbz	r0, 8003f60 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8003f4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003f60:	f001 fc72 	bl	8005848 <vPortExitCritical>
				return pdPASS;
 8003f64:	2001      	movs	r0, #1
}
 8003f66:	b005      	add	sp, #20
 8003f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8003f6c:	f001 fc6c 	bl	8005848 <vPortExitCritical>
					return errQUEUE_FULL;
 8003f70:	4640      	mov	r0, r8
 8003f72:	e7f8      	b.n	8003f66 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8003f74:	4620      	mov	r0, r4
 8003f76:	f7ff fdff 	bl	8003b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f7a:	f000 ff4d 	bl	8004e18 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e7f1      	b.n	8003f66 <xQueueGenericSend+0x15e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f86:	f001 f815 	bl	8004fb4 <xTaskRemoveFromEventList>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d0e8      	beq.n	8003f60 <xQueueGenericSend+0x158>
 8003f8e:	e7dd      	b.n	8003f4c <xQueueGenericSend+0x144>

08003f90 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8003f90:	b179      	cbz	r1, 8003fb2 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f92:	2350      	movs	r3, #80	; 0x50
	{
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f98:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f9a:	9b01      	ldr	r3, [sp, #4]
 8003f9c:	2b50      	cmp	r3, #80	; 0x50
 8003f9e:	d011      	beq.n	8003fc4 <xQueueCreateMutexStatic+0x34>
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueCreateMutexStatic+0x20>
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003fc2:	e7fe      	b.n	8003fc2 <xQueueCreateMutexStatic+0x32>
 8003fc4:	460c      	mov	r4, r1
	pxNewQueue->uxItemSize = uxItemSize;
 8003fc6:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fcc:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fce:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fd0:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fd4:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
 8003fd6:	e9c4 160f 	strd	r1, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fda:	f7ff fe13 	bl	8003c04 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003fde:	4633      	mov	r3, r6
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8003fe6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fea:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003fec:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003fee:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ff0:	f7ff ff0a 	bl	8003e08 <xQueueGenericSend>
	}
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
 8003ffa:	bf00      	nop

08003ffc <xQueueGiveMutexRecursive>:
	{
 8003ffc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8003ffe:	b138      	cbz	r0, 8004010 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004000:	6885      	ldr	r5, [r0, #8]
 8004002:	4604      	mov	r4, r0
 8004004:	f001 f87a 	bl	80050fc <xTaskGetCurrentTaskHandle>
 8004008:	4285      	cmp	r5, r0
 800400a:	d00a      	beq.n	8004022 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800400c:	2000      	movs	r0, #0
	}
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004020:	e7fe      	b.n	8004020 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	3b01      	subs	r3, #1
 8004026:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004028:	b10b      	cbz	r3, 800402e <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800402a:	2001      	movs	r0, #1
	}
 800402c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800402e:	461a      	mov	r2, r3
 8004030:	4619      	mov	r1, r3
 8004032:	4620      	mov	r0, r4
 8004034:	f7ff fee8 	bl	8003e08 <xQueueGenericSend>
			xReturn = pdPASS;
 8004038:	2001      	movs	r0, #1
	}
 800403a:	bd38      	pop	{r3, r4, r5, pc}

0800403c <xQueueCreateMutex>:
	{
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004040:	2050      	movs	r0, #80	; 0x50
 8004042:	f001 fd5b 	bl	8005afc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004046:	4604      	mov	r4, r0
 8004048:	b198      	cbz	r0, 8004072 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800404a:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 800404c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800404e:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004050:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8004054:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004058:	f7ff fdd4 	bl	8003c04 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800405c:	4633      	mov	r3, r6
 800405e:	4632      	mov	r2, r6
 8004060:	4631      	mov	r1, r6
 8004062:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004064:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004068:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800406a:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800406c:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800406e:	f7ff fecb 	bl	8003e08 <xQueueGenericSend>
	}
 8004072:	4620      	mov	r0, r4
 8004074:	bd70      	pop	{r4, r5, r6, pc}
 8004076:	bf00      	nop

08004078 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004078:	2800      	cmp	r0, #0
 800407a:	d04e      	beq.n	800411a <xQueueGenericSendFromISR+0xa2>
{
 800407c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004080:	460e      	mov	r6, r1
 8004082:	4604      	mov	r4, r0
 8004084:	4617      	mov	r7, r2
 8004086:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004088:	b339      	cbz	r1, 80040da <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800408a:	2d02      	cmp	r5, #2
 800408c:	d10b      	bne.n	80040a6 <xQueueGenericSendFromISR+0x2e>
 800408e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d008      	beq.n	80040a6 <xQueueGenericSendFromISR+0x2e>
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	e7fe      	b.n	80040a4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040a6:	f001 fcc9 	bl	8005a3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040aa:	f3ef 8811 	mrs	r8, BASEPRI
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d315      	bcc.n	80040f2 <xQueueGenericSendFromISR+0x7a>
 80040c6:	f1a5 0002 	sub.w	r0, r5, #2
 80040ca:	fab0 f080 	clz	r0, r0
 80040ce:	0940      	lsrs	r0, r0, #5
 80040d0:	b978      	cbnz	r0, 80040f2 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040d2:	f388 8811 	msr	BASEPRI, r8
}
 80040d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0d4      	beq.n	800408a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	e7fe      	b.n	80040f0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040f2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 80040f4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040f8:	4631      	mov	r1, r6
 80040fa:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80040fc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004100:	f7ff fcf8 	bl	8003af4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004104:	1c6b      	adds	r3, r5, #1
 8004106:	d011      	beq.n	800412c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004108:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 800410a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800410c:	b25b      	sxtb	r3, r3
 800410e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8004112:	f388 8811 	msr	BASEPRI, r8
}
 8004116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800412a:	e7fe      	b.n	800412a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800412c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412e:	b90b      	cbnz	r3, 8004134 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8004130:	2001      	movs	r0, #1
 8004132:	e7ce      	b.n	80040d2 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004134:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004138:	f000 ff3c 	bl	8004fb4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800413c:	2800      	cmp	r0, #0
 800413e:	d0f7      	beq.n	8004130 <xQueueGenericSendFromISR+0xb8>
 8004140:	2f00      	cmp	r7, #0
 8004142:	d0f5      	beq.n	8004130 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004144:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8004146:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	e7c2      	b.n	80040d2 <xQueueGenericSendFromISR+0x5a>

0800414c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800414c:	b360      	cbz	r0, 80041a8 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800414e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004154:	b143      	cbz	r3, 8004168 <xQueueGiveFromISR+0x1c>
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	e7fe      	b.n	8004166 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004168:	6803      	ldr	r3, [r0, #0]
 800416a:	460d      	mov	r5, r1
 800416c:	b32b      	cbz	r3, 80041ba <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800416e:	f001 fc65 	bl	8005a3c <vPortValidateInterruptPriority>
	__asm volatile
 8004172:	f3ef 8611 	mrs	r6, BASEPRI
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004188:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800418a:	429a      	cmp	r2, r3
 800418c:	d921      	bls.n	80041d2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 800418e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004192:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8004194:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004196:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8004198:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 800419a:	d01e      	beq.n	80041da <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800419c:	3301      	adds	r3, #1
			xReturn = pdPASS;
 800419e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041a6:	e015      	b.n	80041d4 <xQueueGiveFromISR+0x88>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80041b8:	e7fe      	b.n	80041b8 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80041ba:	6883      	ldr	r3, [r0, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0d6      	beq.n	800416e <xQueueGiveFromISR+0x22>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	e7fe      	b.n	80041d0 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80041d2:	2000      	movs	r0, #0
	__asm volatile
 80041d4:	f386 8811 	msr	BASEPRI, r6
}
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041dc:	b90b      	cbnz	r3, 80041e2 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
 80041de:	2001      	movs	r0, #1
 80041e0:	e7f8      	b.n	80041d4 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041e6:	f000 fee5 	bl	8004fb4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	d0f7      	beq.n	80041de <xQueueGiveFromISR+0x92>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d0f5      	beq.n	80041de <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041f2:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80041f4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	e7ec      	b.n	80041d4 <xQueueGiveFromISR+0x88>
 80041fa:	bf00      	nop

080041fc <xQueueReceive>:
{
 80041fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004200:	b085      	sub	sp, #20
 8004202:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004204:	2800      	cmp	r0, #0
 8004206:	f000 80a0 	beq.w	800434a <xQueueReceive+0x14e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800420a:	460d      	mov	r5, r1
 800420c:	4604      	mov	r4, r0
 800420e:	2900      	cmp	r1, #0
 8004210:	d047      	beq.n	80042a2 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004212:	f000 ff79 	bl	8005108 <xTaskGetSchedulerState>
 8004216:	2800      	cmp	r0, #0
 8004218:	d04f      	beq.n	80042ba <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 800421a:	f001 faf3 	bl	8005804 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800421e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004220:	2e00      	cmp	r6, #0
 8004222:	d17d      	bne.n	8004320 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d035      	beq.n	8004296 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 800422a:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800422c:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8004230:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004234:	a802      	add	r0, sp, #8
 8004236:	f000 ff07 	bl	8005048 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800423a:	f001 fb05 	bl	8005848 <vPortExitCritical>
		vTaskSuspendAll();
 800423e:	f000 fc97 	bl	8004b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004242:	f001 fadf 	bl	8005804 <vPortEnterCritical>
 8004246:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800424a:	2bff      	cmp	r3, #255	; 0xff
 800424c:	d101      	bne.n	8004252 <xQueueReceive+0x56>
 800424e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004252:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004256:	2bff      	cmp	r3, #255	; 0xff
 8004258:	d101      	bne.n	800425e <xQueueReceive+0x62>
 800425a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800425e:	f001 faf3 	bl	8005848 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004262:	a901      	add	r1, sp, #4
 8004264:	a802      	add	r0, sp, #8
 8004266:	f000 fefb 	bl	8005060 <xTaskCheckForTimeOut>
 800426a:	2800      	cmp	r0, #0
 800426c:	d131      	bne.n	80042d2 <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 800426e:	f001 fac9 	bl	8005804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d039      	beq.n	80042ec <xQueueReceive+0xf0>
	taskEXIT_CRITICAL();
 8004278:	f001 fae6 	bl	8005848 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff fc7b 	bl	8003b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004282:	f000 fdc9 	bl	8004e18 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004286:	f001 fabd 	bl	8005804 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800428a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800428c:	2e00      	cmp	r6, #0
 800428e:	d147      	bne.n	8004320 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004290:	9b01      	ldr	r3, [sp, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1d1      	bne.n	800423a <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8004296:	f001 fad7 	bl	8005848 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800429a:	2000      	movs	r0, #0
}
 800429c:	b005      	add	sp, #20
 800429e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0b4      	beq.n	8004212 <xQueueReceive+0x16>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	e7fe      	b.n	80042b8 <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ba:	9b01      	ldr	r3, [sp, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ac      	beq.n	800421a <xQueueReceive+0x1e>
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	e7fe      	b.n	80042d0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7ff fc50 	bl	8003b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042d8:	f000 fd9e 	bl	8004e18 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80042dc:	f001 fa92 	bl	8005804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0d7      	beq.n	8004296 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 80042e6:	f001 faaf 	bl	8005848 <vPortExitCritical>
 80042ea:	e7cc      	b.n	8004286 <xQueueReceive+0x8a>
 80042ec:	f001 faac 	bl	8005848 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042f0:	9901      	ldr	r1, [sp, #4]
 80042f2:	4640      	mov	r0, r8
 80042f4:	f000 fe26 	bl	8004f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7ff fc3d 	bl	8003b78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042fe:	f000 fd8b 	bl	8004e18 <xTaskResumeAll>
 8004302:	2800      	cmp	r0, #0
 8004304:	d1bf      	bne.n	8004286 <xQueueReceive+0x8a>
					portYIELD_WITHIN_API();
 8004306:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800430a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8004316:	f001 fa75 	bl	8005804 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800431a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800431c:	2e00      	cmp	r6, #0
 800431e:	d0b7      	beq.n	8004290 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004320:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004322:	b152      	cbz	r2, 800433a <xQueueReceive+0x13e>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004324:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004326:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004328:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800432a:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800432c:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800432e:	d301      	bcc.n	8004334 <xQueueReceive+0x138>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004330:	6821      	ldr	r1, [r4, #0]
 8004332:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004334:	4628      	mov	r0, r5
 8004336:	f008 fe8e 	bl	800d056 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800433a:	3e01      	subs	r6, #1
 800433c:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	b963      	cbnz	r3, 800435c <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
 8004342:	f001 fa81 	bl	8005848 <vPortExitCritical>
				return pdPASS;
 8004346:	2001      	movs	r0, #1
 8004348:	e7a8      	b.n	800429c <xQueueReceive+0xa0>
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800435a:	e7fe      	b.n	800435a <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800435c:	f104 0010 	add.w	r0, r4, #16
 8004360:	f000 fe28 	bl	8004fb4 <xTaskRemoveFromEventList>
 8004364:	2800      	cmp	r0, #0
 8004366:	d0ec      	beq.n	8004342 <xQueueReceive+0x146>
						queueYIELD_IF_USING_PREEMPTION();
 8004368:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800436c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004370:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	e7e1      	b.n	8004342 <xQueueReceive+0x146>
 800437e:	bf00      	nop

08004380 <xQueueSemaphoreTake>:
{
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	b085      	sub	sp, #20
 8004384:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004386:	2800      	cmp	r0, #0
 8004388:	d055      	beq.n	8004436 <xQueueSemaphoreTake+0xb6>
	configASSERT( pxQueue->uxItemSize == 0 );
 800438a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800438c:	4604      	mov	r4, r0
 800438e:	b146      	cbz	r6, 80043a2 <xQueueSemaphoreTake+0x22>
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	e7fe      	b.n	80043a0 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043a2:	f000 feb1 	bl	8005108 <xTaskGetSchedulerState>
 80043a6:	4605      	mov	r5, r0
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d04d      	beq.n	8004448 <xQueueSemaphoreTake+0xc8>
 80043ac:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 80043ae:	f001 fa29 	bl	8005804 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80043b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 80043b4:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80043b6:	bb8b      	cbnz	r3, 800441c <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80043b8:	9b01      	ldr	r3, [sp, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 809b 	beq.w	80044f6 <xQueueSemaphoreTake+0x176>
				else if( xEntryTimeSet == pdFALSE )
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	d059      	beq.n	8004478 <xQueueSemaphoreTake+0xf8>
		taskEXIT_CRITICAL();
 80043c4:	f001 fa40 	bl	8005848 <vPortExitCritical>
		vTaskSuspendAll();
 80043c8:	f000 fbd2 	bl	8004b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043cc:	f001 fa1a 	bl	8005804 <vPortEnterCritical>
 80043d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043d4:	2bff      	cmp	r3, #255	; 0xff
 80043d6:	d101      	bne.n	80043dc <xQueueSemaphoreTake+0x5c>
 80043d8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80043dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80043e0:	2bff      	cmp	r3, #255	; 0xff
 80043e2:	d101      	bne.n	80043e8 <xQueueSemaphoreTake+0x68>
 80043e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043e8:	f001 fa2e 	bl	8005848 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ec:	a901      	add	r1, sp, #4
 80043ee:	a802      	add	r0, sp, #8
 80043f0:	f000 fe36 	bl	8005060 <xTaskCheckForTimeOut>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d133      	bne.n	8004460 <xQueueSemaphoreTake+0xe0>
	taskENTER_CRITICAL();
 80043f8:	f001 fa04 	bl	8005804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d03e      	beq.n	8004480 <xQueueSemaphoreTake+0x100>
	taskEXIT_CRITICAL();
 8004402:	f001 fa21 	bl	8005848 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004406:	4620      	mov	r0, r4
 8004408:	f7ff fbb6 	bl	8003b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800440c:	f000 fd04 	bl	8004e18 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004410:	f001 f9f8 	bl	8005804 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004414:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004416:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0cd      	beq.n	80043b8 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800441c:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800441e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004420:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004422:	2a00      	cmp	r2, #0
 8004424:	f000 8083 	beq.w	800452e <xQueueSemaphoreTake+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004428:	6923      	ldr	r3, [r4, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d16e      	bne.n	800450c <xQueueSemaphoreTake+0x18c>
				return pdPASS;
 800442e:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8004430:	f001 fa0a 	bl	8005848 <vPortExitCritical>
				return pdPASS;
 8004434:	e042      	b.n	80044bc <xQueueSemaphoreTake+0x13c>
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004446:	e7fe      	b.n	8004446 <xQueueSemaphoreTake+0xc6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004448:	9b01      	ldr	r3, [sp, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d039      	beq.n	80044c2 <xQueueSemaphoreTake+0x142>
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	e7fe      	b.n	800445e <xQueueSemaphoreTake+0xde>
			prvUnlockQueue( pxQueue );
 8004460:	4620      	mov	r0, r4
 8004462:	f7ff fb89 	bl	8003b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004466:	f000 fcd7 	bl	8004e18 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800446a:	f001 f9cb 	bl	8005804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800446e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004470:	b30b      	cbz	r3, 80044b6 <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
 8004472:	f001 f9e9 	bl	8005848 <vPortExitCritical>
	return xReturn;
 8004476:	e7cb      	b.n	8004410 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004478:	a802      	add	r0, sp, #8
 800447a:	f000 fde5 	bl	8005048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800447e:	e7a1      	b.n	80043c4 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8004480:	f001 f9e2 	bl	8005848 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	b36b      	cbz	r3, 80044e4 <xQueueSemaphoreTake+0x164>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004488:	9901      	ldr	r1, [sp, #4]
 800448a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800448e:	f000 fd59 	bl	8004f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004492:	4620      	mov	r0, r4
 8004494:	f7ff fb70 	bl	8003b78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004498:	f000 fcbe 	bl	8004e18 <xTaskResumeAll>
 800449c:	2800      	cmp	r0, #0
 800449e:	d1b7      	bne.n	8004410 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 80044a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80044a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	e7ac      	b.n	8004410 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 80044b6:	f001 f9c7 	bl	8005848 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80044ba:	b926      	cbnz	r6, 80044c6 <xQueueSemaphoreTake+0x146>
}
 80044bc:	4630      	mov	r0, r6
 80044be:	b005      	add	sp, #20
 80044c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c2:	4606      	mov	r6, r0
 80044c4:	e773      	b.n	80043ae <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 80044c6:	f001 f99d 	bl	8005804 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80044ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044cc:	b119      	cbz	r1, 80044d6 <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80044ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044d0:	6819      	ldr	r1, [r3, #0]
 80044d2:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044d6:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80044d8:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044da:	f000 feb1 	bl	8005240 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80044de:	f001 f9b3 	bl	8005848 <vPortExitCritical>
 80044e2:	e7eb      	b.n	80044bc <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 80044e4:	f001 f98e 	bl	8005804 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044e8:	68a0      	ldr	r0, [r4, #8]
 80044ea:	f000 fe1d 	bl	8005128 <xTaskPriorityInherit>
 80044ee:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80044f0:	f001 f9aa 	bl	8005848 <vPortExitCritical>
 80044f4:	e7c8      	b.n	8004488 <xQueueSemaphoreTake+0x108>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80044f6:	2e00      	cmp	r6, #0
 80044f8:	d0f1      	beq.n	80044de <xQueueSemaphoreTake+0x15e>
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	e7fe      	b.n	800450a <xQueueSemaphoreTake+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800450c:	f104 0010 	add.w	r0, r4, #16
 8004510:	f000 fd50 	bl	8004fb4 <xTaskRemoveFromEventList>
 8004514:	2800      	cmp	r0, #0
 8004516:	d08a      	beq.n	800442e <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8004518:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004520:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	e77f      	b.n	800442e <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800452e:	f000 fedb 	bl	80052e8 <pvTaskIncrementMutexHeldCount>
 8004532:	60a0      	str	r0, [r4, #8]
 8004534:	e778      	b.n	8004428 <xQueueSemaphoreTake+0xa8>
 8004536:	bf00      	nop

08004538 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8004538:	b1a8      	cbz	r0, 8004566 <xQueueTakeMutexRecursive+0x2e>
	{
 800453a:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800453c:	6886      	ldr	r6, [r0, #8]
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	f000 fddb 	bl	80050fc <xTaskGetCurrentTaskHandle>
 8004546:	4286      	cmp	r6, r0
 8004548:	d008      	beq.n	800455c <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800454a:	4629      	mov	r1, r5
 800454c:	4620      	mov	r0, r4
 800454e:	f7ff ff17 	bl	8004380 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8004552:	b110      	cbz	r0, 800455a <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004554:	68e3      	ldr	r3, [r4, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60e3      	str	r3, [r4, #12]
	}
 800455a:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800455c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800455e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004560:	4403      	add	r3, r0
 8004562:	60e3      	str	r3, [r4, #12]
	}
 8004564:	bd70      	pop	{r4, r5, r6, pc}
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004576:	e7fe      	b.n	8004576 <xQueueTakeMutexRecursive+0x3e>

08004578 <xQueueReceiveFromISR>:
{
 8004578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800457c:	b310      	cbz	r0, 80045c4 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800457e:	460e      	mov	r6, r1
 8004580:	4604      	mov	r4, r0
 8004582:	4617      	mov	r7, r2
 8004584:	b191      	cbz	r1, 80045ac <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004586:	f001 fa59 	bl	8005a3c <vPortValidateInterruptPriority>
	__asm volatile
 800458a:	f3ef 8911 	mrs	r9, BASEPRI
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800459e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045a0:	b9cd      	cbnz	r5, 80045d6 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80045a2:	4628      	mov	r0, r5
	__asm volatile
 80045a4:	f389 8811 	msr	BASEPRI, r9
}
 80045a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0e9      	beq.n	8004586 <xQueueReceiveFromISR+0xe>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	e7fe      	b.n	80045c2 <xQueueReceiveFromISR+0x4a>
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80045d4:	e7fe      	b.n	80045d4 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80045d6:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045da:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80045dc:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045e0:	b142      	cbz	r2, 80045f4 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045e2:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045e4:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045e6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045e8:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045ea:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045ec:	d215      	bcs.n	800461a <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045ee:	4630      	mov	r0, r6
 80045f0:	f008 fd31 	bl	800d056 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045f4:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80045f6:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045fa:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80045fc:	d009      	beq.n	8004612 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80045fe:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8004602:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004604:	b25b      	sxtb	r3, r3
 8004606:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 800460a:	f389 8811 	msr	BASEPRI, r9
}
 800460e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	b923      	cbnz	r3, 8004620 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
 8004616:	2001      	movs	r0, #1
 8004618:	e7c4      	b.n	80045a4 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800461a:	6821      	ldr	r1, [r4, #0]
 800461c:	60e1      	str	r1, [r4, #12]
 800461e:	e7e6      	b.n	80045ee <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004620:	f104 0010 	add.w	r0, r4, #16
 8004624:	f000 fcc6 	bl	8004fb4 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8004628:	2f00      	cmp	r7, #0
 800462a:	d0f4      	beq.n	8004616 <xQueueReceiveFromISR+0x9e>
 800462c:	2800      	cmp	r0, #0
 800462e:	d0f2      	beq.n	8004616 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004630:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8004632:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	e7b5      	b.n	80045a4 <xQueueReceiveFromISR+0x2c>

08004638 <vQueueDelete>:
	configASSERT( pxQueue );
 8004638:	b180      	cbz	r0, 800465c <vQueueDelete+0x24>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800463a:	2300      	movs	r3, #0
{
 800463c:	b410      	push	{r4}
 800463e:	4c12      	ldr	r4, [pc, #72]	; (8004688 <vQueueDelete+0x50>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004640:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8004644:	6851      	ldr	r1, [r2, #4]
 8004646:	4288      	cmp	r0, r1
 8004648:	d015      	beq.n	8004676 <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800464a:	3301      	adds	r3, #1
 800464c:	2b08      	cmp	r3, #8
 800464e:	d1f7      	bne.n	8004640 <vQueueDelete+0x8>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004650:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8004654:	b15b      	cbz	r3, 800466e <vQueueDelete+0x36>
}
 8004656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800465a:	4770      	bx	lr
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800466c:	e7fe      	b.n	800466c <vQueueDelete+0x34>
}
 800466e:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 8004672:	f001 bad9 	b.w	8005c28 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004676:	2100      	movs	r1, #0
 8004678:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800467c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004680:	6051      	str	r1, [r2, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e7      	bne.n	8004656 <vQueueDelete+0x1e>
 8004686:	e7f2      	b.n	800466e <vQueueDelete+0x36>
 8004688:	24001be4 	.word	0x24001be4

0800468c <vQueueAddToRegistry>:
	{
 800468c:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800468e:	2300      	movs	r3, #0
 8004690:	4c08      	ldr	r4, [pc, #32]	; (80046b4 <vQueueAddToRegistry+0x28>)
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004692:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8004696:	b12a      	cbz	r2, 80046a4 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004698:	3301      	adds	r3, #1
 800469a:	2b08      	cmp	r3, #8
 800469c:	d1f9      	bne.n	8004692 <vQueueAddToRegistry+0x6>
	}
 800469e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046a2:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046a4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046a8:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 80046ac:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046b0:	6050      	str	r0, [r2, #4]
	}
 80046b2:	4770      	bx	lr
 80046b4:	24001be4 	.word	0x24001be4

080046b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4604      	mov	r4, r0
 80046bc:	460e      	mov	r6, r1
 80046be:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046c0:	f001 f8a0 	bl	8005804 <vPortEnterCritical>
 80046c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80046c8:	2bff      	cmp	r3, #255	; 0xff
 80046ca:	d102      	bne.n	80046d2 <vQueueWaitForMessageRestricted+0x1a>
 80046cc:	2300      	movs	r3, #0
 80046ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80046d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80046d6:	2bff      	cmp	r3, #255	; 0xff
 80046d8:	d102      	bne.n	80046e0 <vQueueWaitForMessageRestricted+0x28>
 80046da:	2300      	movs	r3, #0
 80046dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046e0:	f001 f8b2 	bl	8005848 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046e6:	b123      	cbz	r3, 80046f2 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046e8:	4620      	mov	r0, r4
	}
 80046ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80046ee:	f7ff ba43 	b.w	8003b78 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046f6:	462a      	mov	r2, r5
 80046f8:	4631      	mov	r1, r6
 80046fa:	f000 fc3d 	bl	8004f78 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80046fe:	4620      	mov	r0, r4
	}
 8004700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8004704:	f7ff ba38 	b.w	8003b78 <prvUnlockQueue>

08004708 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800470c:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800470e:	f001 f879 	bl	8005804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004712:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8004714:	4e34      	ldr	r6, [pc, #208]	; (80047e8 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800471c:	6833      	ldr	r3, [r6, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d032      	beq.n	8004788 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004722:	4c32      	ldr	r4, [pc, #200]	; (80047ec <prvAddNewTaskToReadyList+0xe4>)
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	b33b      	cbz	r3, 8004778 <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004728:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800472a:	4f31      	ldr	r7, [pc, #196]	; (80047f0 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800472c:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800472e:	4932      	ldr	r1, [pc, #200]	; (80047f8 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004736:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004738:	680b      	ldr	r3, [r1, #0]
 800473a:	4283      	cmp	r3, r0
 800473c:	d200      	bcs.n	8004740 <prvAddNewTaskToReadyList+0x38>
 800473e:	6008      	str	r0, [r1, #0]
 8004740:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004744:	1d29      	adds	r1, r5, #4
 8004746:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800474a:	f7ff f997 	bl	8003a7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800474e:	f001 f87b 	bl	8005848 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	b173      	cbz	r3, 8004774 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004756:	6832      	ldr	r2, [r6, #0]
 8004758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800475a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800475c:	429a      	cmp	r2, r3
 800475e:	d209      	bcs.n	8004774 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004760:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004768:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4f1c      	ldr	r7, [pc, #112]	; (80047f0 <prvAddNewTaskToReadyList+0xe8>)
 8004780:	4283      	cmp	r3, r0
 8004782:	d8d3      	bhi.n	800472c <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8004784:	6035      	str	r5, [r6, #0]
 8004786:	e7d1      	b.n	800472c <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8004788:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d003      	beq.n	8004798 <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004790:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004792:	4f17      	ldr	r7, [pc, #92]	; (80047f0 <prvAddNewTaskToReadyList+0xe8>)
 8004794:	4c15      	ldr	r4, [pc, #84]	; (80047ec <prvAddNewTaskToReadyList+0xe4>)
 8004796:	e7c9      	b.n	800472c <prvAddNewTaskToReadyList+0x24>
 8004798:	4f15      	ldr	r7, [pc, #84]	; (80047f0 <prvAddNewTaskToReadyList+0xe8>)
 800479a:	463c      	mov	r4, r7
 800479c:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047a0:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047a2:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047a4:	f7ff f95a 	bl	8003a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047a8:	45a0      	cmp	r8, r4
 80047aa:	d1f9      	bne.n	80047a0 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047ac:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8004810 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80047b0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8004814 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 80047b4:	4648      	mov	r0, r9
 80047b6:	4c0d      	ldr	r4, [pc, #52]	; (80047ec <prvAddNewTaskToReadyList+0xe4>)
 80047b8:	f7ff f950 	bl	8003a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047bc:	4640      	mov	r0, r8
 80047be:	f7ff f94d 	bl	8003a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047c2:	480e      	ldr	r0, [pc, #56]	; (80047fc <prvAddNewTaskToReadyList+0xf4>)
 80047c4:	f7ff f94a 	bl	8003a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047c8:	480d      	ldr	r0, [pc, #52]	; (8004800 <prvAddNewTaskToReadyList+0xf8>)
 80047ca:	f7ff f947 	bl	8003a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047ce:	480d      	ldr	r0, [pc, #52]	; (8004804 <prvAddNewTaskToReadyList+0xfc>)
 80047d0:	f7ff f944 	bl	8003a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80047d6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80047d8:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <prvAddNewTaskToReadyList+0x104>)
 80047de:	f8c3 8000 	str.w	r8, [r3]
}
 80047e2:	e7a3      	b.n	800472c <prvAddNewTaskToReadyList+0x24>
 80047e4:	24002090 	.word	0x24002090
 80047e8:	24001c24 	.word	0x24001c24
 80047ec:	240020ec 	.word	0x240020ec
 80047f0:	24001c30 	.word	0x24001c30
 80047f4:	2400209c 	.word	0x2400209c
 80047f8:	240020a0 	.word	0x240020a0
 80047fc:	240020d8 	.word	0x240020d8
 8004800:	24002104 	.word	0x24002104
 8004804:	240020f0 	.word	0x240020f0
 8004808:	24001c28 	.word	0x24001c28
 800480c:	24001c2c 	.word	0x24001c2c
 8004810:	240020a4 	.word	0x240020a4
 8004814:	240020b8 	.word	0x240020b8

08004818 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800481c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800481e:	4e15      	ldr	r6, [pc, #84]	; (8004874 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8004820:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8004822:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004824:	6833      	ldr	r3, [r6, #0]
 8004826:	1d18      	adds	r0, r3, #4
 8004828:	f7ff f950 	bl	8003acc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800482c:	1c63      	adds	r3, r4, #1
 800482e:	d100      	bne.n	8004832 <prvAddCurrentTaskToDelayedList+0x1a>
 8004830:	b9bf      	cbnz	r7, 8004862 <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004832:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004838:	d307      	bcc.n	800484a <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <prvAddCurrentTaskToDelayedList+0x60>)
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	3104      	adds	r1, #4
 8004846:	f7ff b929 	b.w	8003a9c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <prvAddCurrentTaskToDelayedList+0x64>)
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	6831      	ldr	r1, [r6, #0]
 8004850:	3104      	adds	r1, #4
 8004852:	f7ff f923 	bl	8003a9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <prvAddCurrentTaskToDelayedList+0x68>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	42aa      	cmp	r2, r5
 800485c:	d900      	bls.n	8004860 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 800485e:	601d      	str	r5, [r3, #0]
}
 8004860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004862:	6831      	ldr	r1, [r6, #0]
 8004864:	4807      	ldr	r0, [pc, #28]	; (8004884 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004866:	3104      	adds	r1, #4
}
 8004868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486c:	f7ff b906 	b.w	8003a7c <vListInsertEnd>
 8004870:	24002118 	.word	0x24002118
 8004874:	24001c24 	.word	0x24001c24
 8004878:	24001c2c 	.word	0x24001c2c
 800487c:	24001c28 	.word	0x24001c28
 8004880:	240020cc 	.word	0x240020cc
 8004884:	240020f0 	.word	0x240020f0

08004888 <prvDeleteTCB>:
	{
 8004888:	b510      	push	{r4, lr}
 800488a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800488c:	3054      	adds	r0, #84	; 0x54
 800488e:	f008 fb2f 	bl	800cef0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004892:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8004896:	b163      	cbz	r3, 80048b2 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004898:	2b01      	cmp	r3, #1
 800489a:	d013      	beq.n	80048c4 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800489c:	2b02      	cmp	r3, #2
 800489e:	d010      	beq.n	80048c2 <prvDeleteTCB+0x3a>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	e7fe      	b.n	80048b0 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80048b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80048b4:	f001 f9b8 	bl	8005c28 <vPortFree>
				vPortFree( pxTCB );
 80048b8:	4620      	mov	r0, r4
	}
 80048ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80048be:	f001 b9b3 	b.w	8005c28 <vPortFree>
	}
 80048c2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80048c4:	4620      	mov	r0, r4
	}
 80048c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80048ca:	f001 b9ad 	b.w	8005c28 <vPortFree>
 80048ce:	bf00      	nop

080048d0 <prvIdleTask>:
{
 80048d0:	4c15      	ldr	r4, [pc, #84]	; (8004928 <prvIdleTask+0x58>)
				taskYIELD();
 80048d2:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80048d6:	4e15      	ldr	r6, [pc, #84]	; (800492c <prvIdleTask+0x5c>)
 80048d8:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 80048dc:	4d14      	ldr	r5, [pc, #80]	; (8004930 <prvIdleTask+0x60>)
 80048de:	f8df a054 	ldr.w	sl, [pc, #84]	; 8004934 <prvIdleTask+0x64>
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	e011      	b.n	800490a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80048e6:	f000 ff8d 	bl	8005804 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ea:	68f3      	ldr	r3, [r6, #12]
 80048ec:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ee:	1d38      	adds	r0, r7, #4
 80048f0:	f7ff f8ec 	bl	8003acc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004900:	f000 ffa2 	bl	8005848 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004904:	4638      	mov	r0, r7
 8004906:	f7ff ffbf 	bl	8004888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ea      	bne.n	80048e6 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004910:	f8da 3000 	ldr.w	r3, [sl]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d9f8      	bls.n	800490a <prvIdleTask+0x3a>
				taskYIELD();
 8004918:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	e7f1      	b.n	800490a <prvIdleTask+0x3a>
 8004926:	bf00      	nop
 8004928:	24002094 	.word	0x24002094
 800492c:	24002104 	.word	0x24002104
 8004930:	24002090 	.word	0x24002090
 8004934:	24001c30 	.word	0x24001c30

08004938 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800493e:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004942:	4606      	mov	r6, r0
 8004944:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004946:	464a      	mov	r2, r9
 8004948:	21a5      	movs	r1, #165	; 0xa5
 800494a:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800494c:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800494e:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004952:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004956:	f008 fab2 	bl	800cebe <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800495a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800495c:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800495e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 8004962:	2d00      	cmp	r5, #0
 8004964:	d043      	beq.n	80049ee <prvInitialiseNewTask.constprop.0+0xb6>
 8004966:	f105 3cff 	add.w	ip, r5, #4294967295
 800496a:	f105 030f 	add.w	r3, r5, #15
 800496e:	f104 0e33 	add.w	lr, r4, #51	; 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004972:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8004976:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800497a:	b10d      	cbz	r5, 8004980 <prvInitialiseNewTask.constprop.0+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800497c:	459c      	cmp	ip, r3
 800497e:	d1f8      	bne.n	8004972 <prvInitialiseNewTask.constprop.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004980:	2300      	movs	r3, #0
 8004982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004986:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8004988:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800498c:	1d20      	adds	r0, r4, #4
 800498e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8004990:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8004994:	bf28      	it	cs
 8004996:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8004998:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800499a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800499c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049a0:	f7ff f868 	bl	8003a74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049a4:	f104 0018 	add.w	r0, r4, #24
 80049a8:	f7ff f864 	bl	8003a74 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049ac:	4651      	mov	r1, sl
 80049ae:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b0:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 80049b2:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049b6:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049ba:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049bc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049be:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049c2:	f008 fa7c 	bl	800cebe <memset>
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049c8:	463a      	mov	r2, r7
 80049ca:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049cc:	f103 0568 	add.w	r5, r3, #104	; 0x68
 80049d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80049d2:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049d4:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049d6:	65e5      	str	r5, [r4, #92]	; 0x5c
 80049d8:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049da:	f000 fee5 	bl	80057a8 <pxPortInitialiseStack>
 80049de:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80049e0:	f1b8 0f00 	cmp.w	r8, #0
 80049e4:	d001      	beq.n	80049ea <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049e6:	f8c8 4000 	str.w	r4, [r8]
}
 80049ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049ee:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80049f2:	e7c8      	b.n	8004986 <prvInitialiseNewTask.constprop.0+0x4e>
 80049f4:	240106b0 	.word	0x240106b0

080049f8 <xTaskCreateStatic>:
	{
 80049f8:	b530      	push	{r4, r5, lr}
 80049fa:	b087      	sub	sp, #28
 80049fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80049fe:	b1c4      	cbz	r4, 8004a32 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8004a00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a02:	b16d      	cbz	r5, 8004a20 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a04:	25a8      	movs	r5, #168	; 0xa8
 8004a06:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a08:	9d05      	ldr	r5, [sp, #20]
 8004a0a:	2da8      	cmp	r5, #168	; 0xa8
 8004a0c:	d01a      	beq.n	8004a44 <xTaskCreateStatic+0x4c>
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	e7fe      	b.n	8004a1e <xTaskCreateStatic+0x26>
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004a30:	e7fe      	b.n	8004a30 <xTaskCreateStatic+0x38>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004a42:	e7fe      	b.n	8004a42 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a46:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a48:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a4a:	9502      	str	r5, [sp, #8]
 8004a4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004a4e:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a52:	f885 40a5 	strb.w	r4, [r5, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a56:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a58:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a5a:	9401      	str	r4, [sp, #4]
 8004a5c:	f7ff ff6c 	bl	8004938 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a60:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a62:	f7ff fe51 	bl	8004708 <prvAddNewTaskToReadyList>
	}
 8004a66:	9804      	ldr	r0, [sp, #16]
 8004a68:	b007      	add	sp, #28
 8004a6a:	bd30      	pop	{r4, r5, pc}

08004a6c <xTaskCreate>:
	{
 8004a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a70:	4607      	mov	r7, r0
 8004a72:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a74:	0090      	lsls	r0, r2, #2
	{
 8004a76:	4615      	mov	r5, r2
 8004a78:	4688      	mov	r8, r1
 8004a7a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a7c:	f001 f83e 	bl	8005afc <pvPortMalloc>
			if( pxStack != NULL )
 8004a80:	b1d8      	cbz	r0, 8004aba <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a82:	4604      	mov	r4, r0
 8004a84:	20a8      	movs	r0, #168	; 0xa8
 8004a86:	f001 f839 	bl	8005afc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	b1d0      	cbz	r0, 8004ac4 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8004a8e:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a90:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a92:	464b      	mov	r3, r9
 8004a94:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a96:	f886 40a5 	strb.w	r4, [r6, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	9602      	str	r6, [sp, #8]
 8004aa2:	9401      	str	r4, [sp, #4]
 8004aa4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004aa6:	9400      	str	r4, [sp, #0]
 8004aa8:	f7ff ff46 	bl	8004938 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aac:	4630      	mov	r0, r6
 8004aae:	f7ff fe2b 	bl	8004708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ab2:	2001      	movs	r0, #1
	}
 8004ab4:	b005      	add	sp, #20
 8004ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004aba:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004abe:	b005      	add	sp, #20
 8004ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f001 f8af 	bl	8005c28 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	e7f1      	b.n	8004ab4 <xTaskCreate+0x48>

08004ad0 <vTaskStartScheduler>:
{
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ad4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ad6:	aa07      	add	r2, sp, #28
 8004ad8:	a906      	add	r1, sp, #24
 8004ada:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004adc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ae0:	f7fe ff9c 	bl	8003a1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	9a07      	ldr	r2, [sp, #28]
 8004ae8:	9400      	str	r4, [sp, #0]
 8004aea:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8004aee:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8004af2:	4918      	ldr	r1, [pc, #96]	; (8004b54 <vTaskStartScheduler+0x84>)
 8004af4:	4818      	ldr	r0, [pc, #96]	; (8004b58 <vTaskStartScheduler+0x88>)
 8004af6:	f7ff ff7f 	bl	80049f8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004afa:	b1e8      	cbz	r0, 8004b38 <vTaskStartScheduler+0x68>
			xReturn = xTimerCreateTimerTask();
 8004afc:	f000 fc36 	bl	800536c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004b00:	2801      	cmp	r0, #1
 8004b02:	d11b      	bne.n	8004b3c <vTaskStartScheduler+0x6c>
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b14:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <vTaskStartScheduler+0x8c>)
 8004b16:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <vTaskStartScheduler+0x90>)
 8004b18:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b1a:	4912      	ldr	r1, [pc, #72]	; (8004b64 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b1c:	3354      	adds	r3, #84	; 0x54
 8004b1e:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8004b24:	4a10      	ldr	r2, [pc, #64]	; (8004b68 <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b26:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b28:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 8004b2a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b2c:	601c      	str	r4, [r3, #0]
}
 8004b2e:	b008      	add	sp, #32
 8004b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004b34:	f000 bef8 	b.w	8005928 <xPortStartScheduler>
}
 8004b38:	b008      	add	sp, #32
 8004b3a:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d1fb      	bne.n	8004b38 <vTaskStartScheduler+0x68>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	e7fe      	b.n	8004b50 <vTaskStartScheduler+0x80>
 8004b52:	bf00      	nop
 8004b54:	0800de28 	.word	0x0800de28
 8004b58:	080048d1 	.word	0x080048d1
 8004b5c:	24001c24 	.word	0x24001c24
 8004b60:	24000088 	.word	0x24000088
 8004b64:	240020cc 	.word	0x240020cc
 8004b68:	240020ec 	.word	0x240020ec
 8004b6c:	24002118 	.word	0x24002118

08004b70 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004b70:	4a02      	ldr	r2, [pc, #8]	; (8004b7c <vTaskSuspendAll+0xc>)
 8004b72:	6813      	ldr	r3, [r2, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	6013      	str	r3, [r2, #0]
}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	24002098 	.word	0x24002098

08004b80 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004b80:	4b01      	ldr	r3, [pc, #4]	; (8004b88 <xTaskGetTickCount+0x8>)
 8004b82:	6818      	ldr	r0, [r3, #0]
}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	24002118 	.word	0x24002118

08004b8c <xTaskGetTickCountFromISR>:
{
 8004b8c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b8e:	f000 ff55 	bl	8005a3c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004b92:	4b01      	ldr	r3, [pc, #4]	; (8004b98 <xTaskGetTickCountFromISR+0xc>)
 8004b94:	6818      	ldr	r0, [r3, #0]
}
 8004b96:	bd08      	pop	{r3, pc}
 8004b98:	24002118 	.word	0x24002118

08004b9c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b9c:	4b50      	ldr	r3, [pc, #320]	; (8004ce0 <xTaskIncrementTick+0x144>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
{
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d146      	bne.n	8004c38 <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004baa:	4b4e      	ldr	r3, [pc, #312]	; (8004ce4 <xTaskIncrementTick+0x148>)
 8004bac:	681e      	ldr	r6, [r3, #0]
 8004bae:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004bb0:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bb2:	2e00      	cmp	r6, #0
 8004bb4:	d049      	beq.n	8004c4a <xTaskIncrementTick+0xae>
 8004bb6:	f8df b144 	ldr.w	fp, [pc, #324]	; 8004cfc <xTaskIncrementTick+0x160>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bba:	f8db 3000 	ldr.w	r3, [fp]
 8004bbe:	429e      	cmp	r6, r3
 8004bc0:	d350      	bcc.n	8004c64 <xTaskIncrementTick+0xc8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bc2:	4f49      	ldr	r7, [pc, #292]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681d      	ldr	r5, [r3, #0]
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	d077      	beq.n	8004cbc <xTaskIncrementTick+0x120>
BaseType_t xSwitchRequired = pdFALSE;
 8004bcc:	2500      	movs	r5, #0
 8004bce:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8004d00 <xTaskIncrementTick+0x164>
 8004bd2:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004d04 <xTaskIncrementTick+0x168>
					prvAddTaskToReadyList( pxTCB );
 8004bd6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8004d08 <xTaskIncrementTick+0x16c>
 8004bda:	e022      	b.n	8004c22 <xTaskIncrementTick+0x86>
 8004bdc:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bde:	f7fe ff75 	bl	8003acc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004be2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004be4:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004be8:	9901      	ldr	r1, [sp, #4]
 8004bea:	b113      	cbz	r3, 8004bf2 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bec:	f7fe ff6e 	bl	8003acc <uxListRemove>
 8004bf0:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8004bf2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf8:	4298      	cmp	r0, r3
 8004bfa:	d901      	bls.n	8004c00 <xTaskIncrementTick+0x64>
 8004bfc:	f8c8 0000 	str.w	r0, [r8]
 8004c00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8004c08:	f7fe ff38 	bl	8003a7c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c0c:	f8da 3000 	ldr.w	r3, [sl]
 8004c10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004c14:	429a      	cmp	r2, r3
 8004c16:	bf28      	it	cs
 8004c18:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d050      	beq.n	8004cc4 <xTaskIncrementTick+0x128>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c28:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c2a:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8004c2c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c2e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8004c30:	d2d4      	bcs.n	8004bdc <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8004c32:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c36:	e01a      	b.n	8004c6e <xTaskIncrementTick+0xd2>
		++xPendedTicks;
 8004c38:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8004c3a:	2500      	movs	r5, #0
		++xPendedTicks;
 8004c3c:	6813      	ldr	r3, [r2, #0]
}
 8004c3e:	4628      	mov	r0, r5
		++xPendedTicks;
 8004c40:	3301      	adds	r3, #1
 8004c42:	6013      	str	r3, [r2, #0]
}
 8004c44:	b003      	add	sp, #12
 8004c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	b30a      	cbz	r2, 8004c96 <xTaskIncrementTick+0xfa>
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	e7fe      	b.n	8004c62 <xTaskIncrementTick+0xc6>
BaseType_t xSwitchRequired = pdFALSE;
 8004c64:	2500      	movs	r5, #0
 8004c66:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004d00 <xTaskIncrementTick+0x164>
 8004c6a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004d04 <xTaskIncrementTick+0x168>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c6e:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8004c72:	491f      	ldr	r1, [pc, #124]	; (8004cf0 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8004c80:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8004c82:	2a02      	cmp	r2, #2
 8004c84:	bf28      	it	cs
 8004c86:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf18      	it	ne
 8004c8c:	2501      	movne	r5, #1
}
 8004c8e:	4628      	mov	r0, r5
 8004c90:	b003      	add	sp, #12
 8004c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8004c96:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <xTaskIncrementTick+0x158>)
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	6811      	ldr	r1, [r2, #0]
 8004c9c:	6019      	str	r1, [r3, #0]
 8004c9e:	4916      	ldr	r1, [pc, #88]	; (8004cf8 <xTaskIncrementTick+0x15c>)
 8004ca0:	6010      	str	r0, [r2, #0]
 8004ca2:	680a      	ldr	r2, [r1, #0]
 8004ca4:	3201      	adds	r2, #1
 8004ca6:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	b97a      	cbnz	r2, 8004cce <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cae:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8004cfc <xTaskIncrementTick+0x160>
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb6:	f8cb 3000 	str.w	r3, [fp]
 8004cba:	e77e      	b.n	8004bba <xTaskIncrementTick+0x1e>
 8004cbc:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8004d00 <xTaskIncrementTick+0x164>
 8004cc0:	f8df a040 	ldr.w	sl, [pc, #64]	; 8004d04 <xTaskIncrementTick+0x168>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc8:	f8cb 3000 	str.w	r3, [fp]
					break;
 8004ccc:	e7cf      	b.n	8004c6e <xTaskIncrementTick+0xd2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cce:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cd0:	f8df b028 	ldr.w	fp, [pc, #40]	; 8004cfc <xTaskIncrementTick+0x160>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cd4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f8cb 3000 	str.w	r3, [fp]
}
 8004cde:	e76c      	b.n	8004bba <xTaskIncrementTick+0x1e>
 8004ce0:	24002098 	.word	0x24002098
 8004ce4:	24002118 	.word	0x24002118
 8004ce8:	24001c28 	.word	0x24001c28
 8004cec:	240020d4 	.word	0x240020d4
 8004cf0:	2400211c 	.word	0x2400211c
 8004cf4:	24001c2c 	.word	0x24001c2c
 8004cf8:	240020d0 	.word	0x240020d0
 8004cfc:	240020cc 	.word	0x240020cc
 8004d00:	24001c30 	.word	0x24001c30
 8004d04:	24001c24 	.word	0x24001c24
 8004d08:	240020a0 	.word	0x240020a0

08004d0c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8004d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8004d12:	f000 fd77 	bl	8005804 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004d16:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <xTaskResumeAll.part.0+0xe4>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	3a01      	subs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d155      	bne.n	8004dd0 <xTaskResumeAll.part.0+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d24:	4b33      	ldr	r3, [pc, #204]	; (8004df4 <xTaskResumeAll.part.0+0xe8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d051      	beq.n	8004dd0 <xTaskResumeAll.part.0+0xc4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d2c:	4d32      	ldr	r5, [pc, #200]	; (8004df8 <xTaskResumeAll.part.0+0xec>)
 8004d2e:	682b      	ldr	r3, [r5, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d05a      	beq.n	8004dea <xTaskResumeAll.part.0+0xde>
 8004d34:	4e31      	ldr	r6, [pc, #196]	; (8004dfc <xTaskResumeAll.part.0+0xf0>)
						xYieldPending = pdTRUE;
 8004d36:	f04f 0a01 	mov.w	sl, #1
 8004d3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004e10 <xTaskResumeAll.part.0+0x104>
 8004d3e:	4f30      	ldr	r7, [pc, #192]	; (8004e00 <xTaskResumeAll.part.0+0xf4>)
 8004d40:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004e14 <xTaskResumeAll.part.0+0x108>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	68eb      	ldr	r3, [r5, #12]
 8004d46:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d48:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d4c:	f104 0018 	add.w	r0, r4, #24
 8004d50:	f7fe febc 	bl	8003acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d54:	4658      	mov	r0, fp
 8004d56:	f7fe feb9 	bl	8003acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d5c:	6832      	ldr	r2, [r6, #0]
 8004d5e:	4659      	mov	r1, fp
 8004d60:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8004d64:	4293      	cmp	r3, r2
 8004d66:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004d6a:	d900      	bls.n	8004d6e <xTaskResumeAll.part.0+0x62>
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	f7fe fe85 	bl	8003a7c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d301      	bcc.n	8004d80 <xTaskResumeAll.part.0+0x74>
						xYieldPending = pdTRUE;
 8004d7c:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1de      	bne.n	8004d44 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d86:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <xTaskResumeAll.part.0+0xf8>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	b342      	cbz	r2, 8004de0 <xTaskResumeAll.part.0+0xd4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d8e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d90:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <xTaskResumeAll.part.0+0xfc>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d92:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d94:	68d2      	ldr	r2, [r2, #12]
 8004d96:	6852      	ldr	r2, [r2, #4]
 8004d98:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d9a:	4e1c      	ldr	r6, [pc, #112]	; (8004e0c <xTaskResumeAll.part.0+0x100>)
 8004d9c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004d9e:	b144      	cbz	r4, 8004db2 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8004da0:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004da2:	f7ff fefb 	bl	8004b9c <xTaskIncrementTick>
 8004da6:	b108      	cbz	r0, 8004dac <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 8004da8:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004dac:	3c01      	subs	r4, #1
 8004dae:	d1f8      	bne.n	8004da2 <xTaskResumeAll.part.0+0x96>
						xPendedTicks = 0;
 8004db0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8004db2:	f8d9 3000 	ldr.w	r3, [r9]
 8004db6:	b15b      	cbz	r3, 8004dd0 <xTaskResumeAll.part.0+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8004db8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004dcc:	2001      	movs	r0, #1
 8004dce:	e000      	b.n	8004dd2 <xTaskResumeAll.part.0+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8004dd4:	f000 fd38 	bl	8005848 <vPortExitCritical>
}
 8004dd8:	9801      	ldr	r0, [sp, #4]
 8004dda:	b003      	add	sp, #12
 8004ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <xTaskResumeAll.part.0+0xfc>)
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e7d7      	b.n	8004d9a <xTaskResumeAll.part.0+0x8e>
 8004dea:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8004e14 <xTaskResumeAll.part.0+0x108>
 8004dee:	e7d4      	b.n	8004d9a <xTaskResumeAll.part.0+0x8e>
 8004df0:	24002098 	.word	0x24002098
 8004df4:	24002090 	.word	0x24002090
 8004df8:	240020d8 	.word	0x240020d8
 8004dfc:	240020a0 	.word	0x240020a0
 8004e00:	24001c24 	.word	0x24001c24
 8004e04:	24001c28 	.word	0x24001c28
 8004e08:	240020cc 	.word	0x240020cc
 8004e0c:	240020d4 	.word	0x240020d4
 8004e10:	24001c30 	.word	0x24001c30
 8004e14:	2400211c 	.word	0x2400211c

08004e18 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <xTaskResumeAll+0x1c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	b943      	cbnz	r3, 8004e30 <xTaskResumeAll+0x18>
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	e7fe      	b.n	8004e2e <xTaskResumeAll+0x16>
 8004e30:	f7ff bf6c 	b.w	8004d0c <xTaskResumeAll.part.0>
 8004e34:	24002098 	.word	0x24002098

08004e38 <vTaskDelay>:
	{
 8004e38:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e3a:	b950      	cbnz	r0, 8004e52 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8004e3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
	}
 8004e50:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004e52:	4c10      	ldr	r4, [pc, #64]	; (8004e94 <vTaskDelay+0x5c>)
 8004e54:	6821      	ldr	r1, [r4, #0]
 8004e56:	b141      	cbz	r1, 8004e6a <vTaskDelay+0x32>
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	e7fe      	b.n	8004e68 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e70:	f7ff fcd2 	bl	8004818 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	b943      	cbnz	r3, 8004e8a <vTaskDelay+0x52>
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	e7fe      	b.n	8004e88 <vTaskDelay+0x50>
 8004e8a:	f7ff ff3f 	bl	8004d0c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d0d4      	beq.n	8004e3c <vTaskDelay+0x4>
	}
 8004e92:	bd10      	pop	{r4, pc}
 8004e94:	24002098 	.word	0x24002098

08004e98 <vTaskSwitchContext>:
{
 8004e98:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e9a:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <vTaskSwitchContext+0x94>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	b11b      	cbz	r3, 8004ea8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004ea0:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <vTaskSwitchContext+0x98>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
}
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8004ea8:	4c22      	ldr	r4, [pc, #136]	; (8004f34 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 8004eaa:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <vTaskSwitchContext+0x98>)
 8004eac:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d92e      	bls.n	8004f18 <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eba:	4d1f      	ldr	r5, [pc, #124]	; (8004f38 <vTaskSwitchContext+0xa0>)
 8004ebc:	491f      	ldr	r1, [pc, #124]	; (8004f3c <vTaskSwitchContext+0xa4>)
 8004ebe:	682b      	ldr	r3, [r5, #0]
 8004ec0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004ec4:	0098      	lsls	r0, r3, #2
 8004ec6:	0092      	lsls	r2, r2, #2
 8004ec8:	588a      	ldr	r2, [r1, r2]
 8004eca:	b942      	cbnz	r2, 8004ede <vTaskSwitchContext+0x46>
 8004ecc:	b1db      	cbz	r3, 8004f06 <vTaskSwitchContext+0x6e>
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004ed4:	0098      	lsls	r0, r3, #2
 8004ed6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	d0f6      	beq.n	8004ecc <vTaskSwitchContext+0x34>
 8004ede:	4418      	add	r0, r3
 8004ee0:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8004ee4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8004ee8:	4662      	mov	r2, ip
 8004eea:	6849      	ldr	r1, [r1, #4]
 8004eec:	3208      	adds	r2, #8
 8004eee:	4291      	cmp	r1, r2
 8004ef0:	f8cc 1004 	str.w	r1, [ip, #4]
 8004ef4:	d016      	beq.n	8004f24 <vTaskSwitchContext+0x8c>
 8004ef6:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ef8:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004efa:	6021      	str	r1, [r4, #0]
 8004efc:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	3354      	adds	r3, #84	; 0x54
 8004f02:	6013      	str	r3, [r2, #0]
}
 8004f04:	bd38      	pop	{r3, r4, r5, pc}
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f16:	e7fe      	b.n	8004f16 <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	6821      	ldr	r1, [r4, #0]
 8004f1c:	3134      	adds	r1, #52	; 0x34
 8004f1e:	f7fb fa47 	bl	80003b0 <vApplicationStackOverflowHook>
 8004f22:	e7ca      	b.n	8004eba <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	6849      	ldr	r1, [r1, #4]
 8004f26:	f8cc 1004 	str.w	r1, [ip, #4]
 8004f2a:	e7e4      	b.n	8004ef6 <vTaskSwitchContext+0x5e>
 8004f2c:	24002098 	.word	0x24002098
 8004f30:	2400211c 	.word	0x2400211c
 8004f34:	24001c24 	.word	0x24001c24
 8004f38:	240020a0 	.word	0x240020a0
 8004f3c:	24001c30 	.word	0x24001c30
 8004f40:	24000088 	.word	0x24000088

08004f44 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8004f44:	b160      	cbz	r0, 8004f60 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <vTaskPlaceOnEventList+0x30>)
{
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f4c:	6819      	ldr	r1, [r3, #0]
 8004f4e:	3118      	adds	r1, #24
 8004f50:	f7fe fda4 	bl	8003a9c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f54:	4620      	mov	r0, r4
 8004f56:	2101      	movs	r1, #1
}
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f5c:	f7ff bc5c 	b.w	8004818 <prvAddCurrentTaskToDelayedList>
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8004f70:	e7fe      	b.n	8004f70 <vTaskPlaceOnEventList+0x2c>
 8004f72:	bf00      	nop
 8004f74:	24001c24 	.word	0x24001c24

08004f78 <vTaskPlaceOnEventListRestricted>:
	{
 8004f78:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004f7a:	b180      	cbz	r0, 8004f9e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <vTaskPlaceOnEventListRestricted+0x38>)
 8004f7e:	460d      	mov	r5, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	3118      	adds	r1, #24
 8004f86:	f7fe fd79 	bl	8003a7c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8004f8a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	bf0c      	ite	eq
 8004f90:	4628      	moveq	r0, r5
 8004f92:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8004f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f9a:	f7ff bc3d 	b.w	8004818 <prvAddCurrentTaskToDelayedList>
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8004fae:	e7fe      	b.n	8004fae <vTaskPlaceOnEventListRestricted+0x36>
 8004fb0:	24001c24 	.word	0x24001c24

08004fb4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb4:	68c3      	ldr	r3, [r0, #12]
{
 8004fb6:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb8:	68dc      	ldr	r4, [r3, #12]
{
 8004fba:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8004fbc:	b35c      	cbz	r4, 8005016 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fbe:	f104 0518 	add.w	r5, r4, #24
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f7fe fd82 	bl	8003acc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <xTaskRemoveFromEventList+0x7c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	b17b      	cbz	r3, 8004fee <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4818      	ldr	r0, [pc, #96]	; (8005034 <xTaskRemoveFromEventList+0x80>)
 8004fd2:	f7fe fd53 	bl	8003a7c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fd6:	4b18      	ldr	r3, [pc, #96]	; (8005038 <xTaskRemoveFromEventList+0x84>)
 8004fd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d922      	bls.n	8005028 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4a15      	ldr	r2, [pc, #84]	; (800503c <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 8004fe6:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8004fe8:	6013      	str	r3, [r2, #0]
}
 8004fea:	b003      	add	sp, #12
 8004fec:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fee:	1d21      	adds	r1, r4, #4
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	9101      	str	r1, [sp, #4]
 8004ff4:	f7fe fd6a 	bl	8003acc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ff8:	4a11      	ldr	r2, [pc, #68]	; (8005040 <xTaskRemoveFromEventList+0x8c>)
 8004ffa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ffc:	6810      	ldr	r0, [r2, #0]
 8004ffe:	9901      	ldr	r1, [sp, #4]
 8005000:	4283      	cmp	r3, r0
 8005002:	d900      	bls.n	8005006 <xTaskRemoveFromEventList+0x52>
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800500a:	480e      	ldr	r0, [pc, #56]	; (8005044 <xTaskRemoveFromEventList+0x90>)
 800500c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005010:	f7fe fd34 	bl	8003a7c <vListInsertEnd>
 8005014:	e7df      	b.n	8004fd6 <xTaskRemoveFromEventList+0x22>
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005026:	e7fe      	b.n	8005026 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8005028:	2000      	movs	r0, #0
}
 800502a:	b003      	add	sp, #12
 800502c:	bd30      	pop	{r4, r5, pc}
 800502e:	bf00      	nop
 8005030:	24002098 	.word	0x24002098
 8005034:	240020d8 	.word	0x240020d8
 8005038:	24001c24 	.word	0x24001c24
 800503c:	2400211c 	.word	0x2400211c
 8005040:	240020a0 	.word	0x240020a0
 8005044:	24001c30 	.word	0x24001c30

08005048 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005048:	4a03      	ldr	r2, [pc, #12]	; (8005058 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800504a:	4b04      	ldr	r3, [pc, #16]	; (800505c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800504c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	e9c0 2300 	strd	r2, r3, [r0]
}
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	240020d0 	.word	0x240020d0
 800505c:	24002118 	.word	0x24002118

08005060 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8005060:	b328      	cbz	r0, 80050ae <xTaskCheckForTimeOut+0x4e>
{
 8005062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005064:	460d      	mov	r5, r1
 8005066:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8005068:	b1c1      	cbz	r1, 800509c <xTaskCheckForTimeOut+0x3c>
 800506a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800506c:	f000 fbca 	bl	8005804 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8005070:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005072:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8005074:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8005076:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005078:	d030      	beq.n	80050dc <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800507a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80050ec <xTaskCheckForTimeOut+0x8c>
 800507e:	6826      	ldr	r6, [r4, #0]
 8005080:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005084:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005086:	42be      	cmp	r6, r7
 8005088:	d01a      	beq.n	80050c0 <xTaskCheckForTimeOut+0x60>
 800508a:	4288      	cmp	r0, r1
 800508c:	d818      	bhi.n	80050c0 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 800508e:	2001      	movs	r0, #1
 8005090:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005092:	f000 fbd9 	bl	8005848 <vPortExitCritical>
}
 8005096:	9801      	ldr	r0, [sp, #4]
 8005098:	b003      	add	sp, #12
 800509a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80050ac:	e7fe      	b.n	80050ac <xTaskCheckForTimeOut+0x4c>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80050be:	e7fe      	b.n	80050be <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050c0:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050c4:	4573      	cmp	r3, lr
 80050c6:	d90b      	bls.n	80050e0 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 80050c8:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050ca:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050ce:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80050d0:	4403      	add	r3, r0
			xReturn = pdFALSE;
 80050d2:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 80050d4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050d6:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80050da:	e7d9      	b.n	8005090 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 80050dc:	2000      	movs	r0, #0
 80050de:	e7d7      	b.n	8005090 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 80050e0:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80050e2:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 80050e4:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80050e6:	e7d3      	b.n	8005090 <xTaskCheckForTimeOut+0x30>
 80050e8:	24002118 	.word	0x24002118
 80050ec:	240020d0 	.word	0x240020d0

080050f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80050f0:	4b01      	ldr	r3, [pc, #4]	; (80050f8 <vTaskMissedYield+0x8>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
}
 80050f6:	4770      	bx	lr
 80050f8:	2400211c 	.word	0x2400211c

080050fc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80050fc:	4b01      	ldr	r3, [pc, #4]	; (8005104 <xTaskGetCurrentTaskHandle+0x8>)
 80050fe:	6818      	ldr	r0, [r3, #0]
	}
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	24001c24 	.word	0x24001c24

08005108 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <xTaskGetSchedulerState+0x18>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	b133      	cbz	r3, 800511c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <xTaskGetSchedulerState+0x1c>)
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	fab0 f080 	clz	r0, r0
 8005116:	0940      	lsrs	r0, r0, #5
 8005118:	0040      	lsls	r0, r0, #1
 800511a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800511c:	2001      	movs	r0, #1
	}
 800511e:	4770      	bx	lr
 8005120:	240020ec 	.word	0x240020ec
 8005124:	24002098 	.word	0x24002098

08005128 <xTaskPriorityInherit>:
	{
 8005128:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800512a:	4604      	mov	r4, r0
	{
 800512c:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 800512e:	b1c8      	cbz	r0, 8005164 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005130:	4d1d      	ldr	r5, [pc, #116]	; (80051a8 <xTaskPriorityInherit+0x80>)
 8005132:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005134:	682a      	ldr	r2, [r5, #0]
 8005136:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005138:	4293      	cmp	r3, r2
 800513a:	d215      	bcs.n	8005168 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800513c:	6982      	ldr	r2, [r0, #24]
 800513e:	2a00      	cmp	r2, #0
 8005140:	db04      	blt.n	800514c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005142:	682a      	ldr	r2, [r5, #0]
 8005144:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005146:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800514a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800514c:	4e17      	ldr	r6, [pc, #92]	; (80051ac <xTaskPriorityInherit+0x84>)
 800514e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005152:	6962      	ldr	r2, [r4, #20]
 8005154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005158:	429a      	cmp	r2, r3
 800515a:	d00e      	beq.n	800517a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800515c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 800515e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8005164:	b002      	add	sp, #8
 8005166:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	4298      	cmp	r0, r3
 8005170:	bf2c      	ite	cs
 8005172:	2000      	movcs	r0, #0
 8005174:	2001      	movcc	r0, #1
	}
 8005176:	b002      	add	sp, #8
 8005178:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800517a:	1d21      	adds	r1, r4, #4
 800517c:	4608      	mov	r0, r1
 800517e:	9101      	str	r1, [sp, #4]
 8005180:	f7fe fca4 	bl	8003acc <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005184:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005188:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	9901      	ldr	r1, [sp, #4]
 800518e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005190:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005192:	d900      	bls.n	8005196 <xTaskPriorityInherit+0x6e>
 8005194:	6018      	str	r0, [r3, #0]
 8005196:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800519a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800519e:	f7fe fc6d 	bl	8003a7c <vListInsertEnd>
				xReturn = pdTRUE;
 80051a2:	2001      	movs	r0, #1
 80051a4:	e7de      	b.n	8005164 <xTaskPriorityInherit+0x3c>
 80051a6:	bf00      	nop
 80051a8:	24001c24 	.word	0x24001c24
 80051ac:	24001c30 	.word	0x24001c30
 80051b0:	240020a0 	.word	0x240020a0

080051b4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80051b4:	b318      	cbz	r0, 80051fe <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 80051b6:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <xTaskPriorityDisinherit+0x80>)
	{
 80051b8:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80051ba:	681c      	ldr	r4, [r3, #0]
	{
 80051bc:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 80051be:	4284      	cmp	r4, r0
 80051c0:	d008      	beq.n	80051d4 <xTaskPriorityDisinherit+0x20>
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	e7fe      	b.n	80051d2 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80051d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80051d6:	b14b      	cbz	r3, 80051ec <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80051da:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051dc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80051de:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051e0:	4291      	cmp	r1, r2
 80051e2:	d000      	beq.n	80051e6 <xTaskPriorityDisinherit+0x32>
 80051e4:	b16b      	cbz	r3, 8005202 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80051e6:	2000      	movs	r0, #0
	}
 80051e8:	b002      	add	sp, #8
 80051ea:	bd10      	pop	{r4, pc}
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80051fc:	e7fe      	b.n	80051fc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80051fe:	2000      	movs	r0, #0
	}
 8005200:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005202:	1d21      	adds	r1, r4, #4
 8005204:	4608      	mov	r0, r1
 8005206:	9101      	str	r1, [sp, #4]
 8005208:	f7fe fc60 	bl	8003acc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800520c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005210:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8005214:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005216:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005218:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4290      	cmp	r0, r2
 800521e:	d900      	bls.n	8005222 <xTaskPriorityDisinherit+0x6e>
 8005220:	6018      	str	r0, [r3, #0]
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <xTaskPriorityDisinherit+0x88>)
 8005224:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005228:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800522c:	f7fe fc26 	bl	8003a7c <vListInsertEnd>
					xReturn = pdTRUE;
 8005230:	2001      	movs	r0, #1
		return xReturn;
 8005232:	e7d9      	b.n	80051e8 <xTaskPriorityDisinherit+0x34>
 8005234:	24001c24 	.word	0x24001c24
 8005238:	240020a0 	.word	0x240020a0
 800523c:	24001c30 	.word	0x24001c30

08005240 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8005240:	2800      	cmp	r0, #0
 8005242:	d040      	beq.n	80052c6 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
 8005244:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 8005246:	b530      	push	{r4, r5, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 800524c:	b153      	cbz	r3, 8005264 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800524e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005250:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005252:	4281      	cmp	r1, r0
 8005254:	bf38      	it	cc
 8005256:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <vTaskPriorityDisinheritAfterTimeout+0x20>
 800525c:	428a      	cmp	r2, r1
 800525e:	d10a      	bne.n	8005276 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8005260:	b003      	add	sp, #12
 8005262:	bd30      	pop	{r4, r5, pc}
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005274:	e7fe      	b.n	8005274 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	42a3      	cmp	r3, r4
 800527c:	d024      	beq.n	80052c8 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800527e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8005280:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005282:	2b00      	cmp	r3, #0
 8005284:	db02      	blt.n	800528c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005286:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 800528a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800528c:	4d14      	ldr	r5, [pc, #80]	; (80052e0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800528e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005292:	6961      	ldr	r1, [r4, #20]
 8005294:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8005298:	4299      	cmp	r1, r3
 800529a:	d1e1      	bne.n	8005260 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529c:	1d21      	adds	r1, r4, #4
 800529e:	4608      	mov	r0, r1
 80052a0:	9101      	str	r1, [sp, #4]
 80052a2:	f7fe fc13 	bl	8003acc <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80052a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	9901      	ldr	r1, [sp, #4]
 80052ae:	4290      	cmp	r0, r2
 80052b0:	d900      	bls.n	80052b4 <vTaskPriorityDisinheritAfterTimeout+0x74>
 80052b2:	6018      	str	r0, [r3, #0]
 80052b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80052b8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80052bc:	b003      	add	sp, #12
 80052be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80052c2:	f7fe bbdb 	b.w	8003a7c <vListInsertEnd>
 80052c6:	4770      	bx	lr
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80052d8:	e7fe      	b.n	80052d8 <vTaskPriorityDisinheritAfterTimeout+0x98>
 80052da:	bf00      	nop
 80052dc:	24001c24 	.word	0x24001c24
 80052e0:	24001c30 	.word	0x24001c30
 80052e4:	240020a0 	.word	0x240020a0

080052e8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80052e8:	4b04      	ldr	r3, [pc, #16]	; (80052fc <pvTaskIncrementMutexHeldCount+0x14>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	b11a      	cbz	r2, 80052f6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80052f2:	3201      	adds	r2, #1
 80052f4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80052f6:	6818      	ldr	r0, [r3, #0]
	}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	24001c24 	.word	0x24001c24

08005300 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005300:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8005302:	4c12      	ldr	r4, [pc, #72]	; (800534c <prvCheckForValidListAndQueue+0x4c>)
{
 8005304:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005306:	f000 fa7d 	bl	8005804 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800530a:	6825      	ldr	r5, [r4, #0]
 800530c:	b125      	cbz	r5, 8005318 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800530e:	b003      	add	sp, #12
 8005310:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005314:	f000 ba98 	b.w	8005848 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8005318:	4f0d      	ldr	r7, [pc, #52]	; (8005350 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 800531a:	4e0e      	ldr	r6, [pc, #56]	; (8005354 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 800531c:	4638      	mov	r0, r7
 800531e:	f7fe fb9d 	bl	8003a5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005322:	4630      	mov	r0, r6
 8005324:	f7fe fb9a 	bl	8003a5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005328:	4a0b      	ldr	r2, [pc, #44]	; (8005358 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800532a:	9500      	str	r5, [sp, #0]
 800532c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800532e:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005330:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005332:	4a0a      	ldr	r2, [pc, #40]	; (800535c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8005336:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005338:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <prvCheckForValidListAndQueue+0x64>)
 800533a:	f7fe fca9 	bl	8003c90 <xQueueGenericCreateStatic>
 800533e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8005340:	2800      	cmp	r0, #0
 8005342:	d0e4      	beq.n	800530e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005344:	4908      	ldr	r1, [pc, #32]	; (8005368 <prvCheckForValidListAndQueue+0x68>)
 8005346:	f7ff f9a1 	bl	800468c <vQueueAddToRegistry>
 800534a:	e7e0      	b.n	800530e <prvCheckForValidListAndQueue+0xe>
 800534c:	24002244 	.word	0x24002244
 8005350:	240021c8 	.word	0x240021c8
 8005354:	240021dc 	.word	0x240021dc
 8005358:	24002120 	.word	0x24002120
 800535c:	24002124 	.word	0x24002124
 8005360:	240021f4 	.word	0x240021f4
 8005364:	24002128 	.word	0x24002128
 8005368:	0800de30 	.word	0x0800de30

0800536c <xTimerCreateTimerTask>:
{
 800536c:	b530      	push	{r4, r5, lr}
 800536e:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8005370:	f7ff ffc6 	bl	8005300 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005374:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <xTimerCreateTimerTask+0x54>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	b1cb      	cbz	r3, 80053ae <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800537a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800537c:	aa07      	add	r2, sp, #28
 800537e:	a906      	add	r1, sp, #24
 8005380:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005382:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005384:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005388:	f7fe fb58 	bl	8003a3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800538c:	4623      	mov	r3, r4
 800538e:	9a07      	ldr	r2, [sp, #28]
 8005390:	9500      	str	r5, [sp, #0]
 8005392:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8005396:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800539a:	490a      	ldr	r1, [pc, #40]	; (80053c4 <xTimerCreateTimerTask+0x58>)
 800539c:	480a      	ldr	r0, [pc, #40]	; (80053c8 <xTimerCreateTimerTask+0x5c>)
 800539e:	f7ff fb2b 	bl	80049f8 <xTaskCreateStatic>
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <xTimerCreateTimerTask+0x60>)
 80053a4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80053a6:	b110      	cbz	r0, 80053ae <xTimerCreateTimerTask+0x42>
}
 80053a8:	2001      	movs	r0, #1
 80053aa:	b009      	add	sp, #36	; 0x24
 80053ac:	bd30      	pop	{r4, r5, pc}
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80053be:	e7fe      	b.n	80053be <xTimerCreateTimerTask+0x52>
 80053c0:	24002244 	.word	0x24002244
 80053c4:	0800de38 	.word	0x0800de38
 80053c8:	080054bd 	.word	0x080054bd
 80053cc:	24002248 	.word	0x24002248

080053d0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80053d0:	b1c8      	cbz	r0, 8005406 <xTimerGenericCommand+0x36>
{
 80053d2:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 80053d4:	4e17      	ldr	r6, [pc, #92]	; (8005434 <xTimerGenericCommand+0x64>)
{
 80053d6:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 80053d8:	6834      	ldr	r4, [r6, #0]
 80053da:	b18c      	cbz	r4, 8005400 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053dc:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053de:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 80053e0:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053e4:	dc18      	bgt.n	8005418 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053e6:	f7ff fe8f 	bl	8005108 <xTaskGetSchedulerState>
 80053ea:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053ec:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053f0:	d01a      	beq.n	8005428 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053f2:	4669      	mov	r1, sp
 80053f4:	461a      	mov	r2, r3
 80053f6:	6830      	ldr	r0, [r6, #0]
 80053f8:	f7fe fd06 	bl	8003e08 <xQueueGenericSend>
}
 80053fc:	b004      	add	sp, #16
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 8005400:	4620      	mov	r0, r4
}
 8005402:	b004      	add	sp, #16
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8005416:	e7fe      	b.n	8005416 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005418:	461a      	mov	r2, r3
 800541a:	4669      	mov	r1, sp
 800541c:	2300      	movs	r3, #0
 800541e:	4620      	mov	r0, r4
 8005420:	f7fe fe2a 	bl	8004078 <xQueueGenericSendFromISR>
}
 8005424:	b004      	add	sp, #16
 8005426:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005428:	9a08      	ldr	r2, [sp, #32]
 800542a:	4669      	mov	r1, sp
 800542c:	6830      	ldr	r0, [r6, #0]
 800542e:	f7fe fceb 	bl	8003e08 <xQueueGenericSend>
 8005432:	e7e6      	b.n	8005402 <xTimerGenericCommand+0x32>
 8005434:	24002244 	.word	0x24002244

08005438 <prvSwitchTimerLists>:
{
 8005438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543c:	4e1d      	ldr	r6, [pc, #116]	; (80054b4 <prvSwitchTimerLists+0x7c>)
 800543e:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005440:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005444:	e00d      	b.n	8005462 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005446:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005448:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800544a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800544c:	1d25      	adds	r5, r4, #4
 800544e:	4628      	mov	r0, r5
 8005450:	f7fe fb3c 	bl	8003acc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005454:	6a23      	ldr	r3, [r4, #32]
 8005456:	4620      	mov	r0, r4
 8005458:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800545a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800545e:	075b      	lsls	r3, r3, #29
 8005460:	d40a      	bmi.n	8005478 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005462:	6833      	ldr	r3, [r6, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	2a00      	cmp	r2, #0
 8005468:	d1ed      	bne.n	8005446 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 800546a:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <prvSwitchTimerLists+0x80>)
 800546c:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800546e:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8005470:	6031      	str	r1, [r6, #0]
}
 8005472:	b002      	add	sp, #8
 8005474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005478:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800547a:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800547c:	2300      	movs	r3, #0
 800547e:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005480:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005482:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8005484:	42af      	cmp	r7, r5
 8005486:	d205      	bcs.n	8005494 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005488:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800548a:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800548c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800548e:	f7fe fb05 	bl	8003a9c <vListInsert>
 8005492:	e7e6      	b.n	8005462 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005494:	4619      	mov	r1, r3
 8005496:	f8cd 8000 	str.w	r8, [sp]
 800549a:	f7ff ff99 	bl	80053d0 <xTimerGenericCommand>
				configASSERT( xResult );
 800549e:	2800      	cmp	r0, #0
 80054a0:	d1df      	bne.n	8005462 <prvSwitchTimerLists+0x2a>
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	e7fe      	b.n	80054b2 <prvSwitchTimerLists+0x7a>
 80054b4:	24002120 	.word	0x24002120
 80054b8:	24002124 	.word	0x24002124

080054bc <prvTimerTask>:
{
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	4e96      	ldr	r6, [pc, #600]	; (800571c <prvTimerTask+0x260>)
 80054c2:	b087      	sub	sp, #28
 80054c4:	4d96      	ldr	r5, [pc, #600]	; (8005720 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 80054c6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80054ca:	4c96      	ldr	r4, [pc, #600]	; (8005724 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	681f      	ldr	r7, [r3, #0]
 80054d0:	2f00      	cmp	r7, #0
 80054d2:	f000 80a9 	beq.w	8005628 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80054da:	f7ff fb49 	bl	8004b70 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80054de:	f7ff fb4f 	bl	8004b80 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80054e2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80054e4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80054e6:	4290      	cmp	r0, r2
 80054e8:	f0c0 80a6 	bcc.w	8005638 <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054ec:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 80054ee:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054f0:	f200 80c7 	bhi.w	8005682 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 80054f4:	f7ff fc90 	bl	8004e18 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f8:	6832      	ldr	r2, [r6, #0]
 80054fa:	68d2      	ldr	r2, [r2, #12]
 80054fc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005500:	f10b 0804 	add.w	r8, fp, #4
 8005504:	4640      	mov	r0, r8
 8005506:	f7fe fae1 	bl	8003acc <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800550a:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 800550e:	0743      	lsls	r3, r0, #29
 8005510:	f100 80c6 	bmi.w	80056a0 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005514:	f020 0001 	bic.w	r0, r0, #1
 8005518:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800551c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8005520:	4658      	mov	r0, fp
 8005522:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005524:	2200      	movs	r2, #0
 8005526:	a902      	add	r1, sp, #8
 8005528:	6820      	ldr	r0, [r4, #0]
 800552a:	f7fe fe67 	bl	80041fc <xQueueReceive>
 800552e:	2800      	cmp	r0, #0
 8005530:	d0cc      	beq.n	80054cc <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005532:	9b02      	ldr	r3, [sp, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	db6e      	blt.n	8005616 <prvTimerTask+0x15a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005538:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	b113      	cbz	r3, 8005544 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800553e:	1d38      	adds	r0, r7, #4
 8005540:	f7fe fac4 	bl	8003acc <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8005544:	f7ff fb1c 	bl	8004b80 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005548:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800554a:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 800554c:	4298      	cmp	r0, r3
 800554e:	d37a      	bcc.n	8005646 <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8005550:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8005552:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8005556:	2b09      	cmp	r3, #9
 8005558:	d8e4      	bhi.n	8005524 <prvTimerTask+0x68>
 800555a:	e8df f003 	tbb	[pc, r3]
 800555e:	0505      	.short	0x0505
 8005560:	53364c05 	.word	0x53364c05
 8005564:	364c0505 	.word	0x364c0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005568:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800556c:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800556e:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005572:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005574:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005576:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800557a:	185a      	adds	r2, r3, r1
 800557c:	bf2c      	ite	cs
 800557e:	2001      	movcs	r0, #1
 8005580:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8005582:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005584:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8005586:	d87e      	bhi.n	8005686 <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005588:	eba8 0303 	sub.w	r3, r8, r3
 800558c:	4299      	cmp	r1, r3
 800558e:	f200 80b0 	bhi.w	80056f2 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	4638      	mov	r0, r7
 8005596:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005598:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800559c:	0759      	lsls	r1, r3, #29
 800559e:	d5c1      	bpl.n	8005524 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055a0:	2200      	movs	r2, #0
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	4638      	mov	r0, r7
 80055a6:	9200      	str	r2, [sp, #0]
 80055a8:	9a03      	ldr	r2, [sp, #12]
 80055aa:	441a      	add	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	4619      	mov	r1, r3
 80055b0:	f7ff ff0e 	bl	80053d0 <xTimerGenericCommand>
							configASSERT( xResult );
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d1b5      	bne.n	8005524 <prvTimerTask+0x68>
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	e7fe      	b.n	80055c8 <prvTimerTask+0x10c>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055ca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055ce:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055d0:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055d4:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055d6:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 8095 	beq.w	800570a <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055e0:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055e2:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e4:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 80055e6:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055e8:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80055ea:	d855      	bhi.n	8005698 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055ec:	4b4e      	ldr	r3, [pc, #312]	; (8005728 <prvTimerTask+0x26c>)
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	f7fe fa54 	bl	8003a9c <vListInsert>
	return xProcessTimerNow;
 80055f4:	e796      	b.n	8005524 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8005602:	e78f      	b.n	8005524 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005608:	079a      	lsls	r2, r3, #30
 800560a:	d569      	bpl.n	80056e0 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005614:	e786      	b.n	8005524 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005616:	9b03      	ldr	r3, [sp, #12]
 8005618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800561c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800561e:	9b02      	ldr	r3, [sp, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f6ff af7f 	blt.w	8005524 <prvTimerTask+0x68>
 8005626:	e787      	b.n	8005538 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8005628:	f7ff faa2 	bl	8004b70 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800562c:	f7ff faa8 	bl	8004b80 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005630:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8005632:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8005634:	4290      	cmp	r0, r2
 8005636:	d209      	bcs.n	800564c <prvTimerTask+0x190>
		prvSwitchTimerLists();
 8005638:	f7ff fefe 	bl	8005438 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800563c:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8005640:	f7ff fbea 	bl	8004e18 <xTaskResumeAll>
 8005644:	e76e      	b.n	8005524 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8005646:	f7ff fef7 	bl	8005438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800564a:	e781      	b.n	8005550 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 800564e:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	fab2 f282 	clz	r2, r2
 800565a:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800565c:	eba7 010a 	sub.w	r1, r7, sl
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	f7ff f829 	bl	80046b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005666:	f7ff fbd7 	bl	8004e18 <xTaskResumeAll>
 800566a:	2800      	cmp	r0, #0
 800566c:	f47f af5a 	bne.w	8005524 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8005670:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005674:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	e750      	b.n	8005524 <prvTimerTask+0x68>
 8005682:	2200      	movs	r2, #0
 8005684:	e7ea      	b.n	800565c <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005686:	4543      	cmp	r3, r8
 8005688:	d901      	bls.n	800568e <prvTimerTask+0x1d2>
 800568a:	2800      	cmp	r0, #0
 800568c:	d081      	beq.n	8005592 <prvTimerTask+0xd6>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800568e:	1d39      	adds	r1, r7, #4
 8005690:	6830      	ldr	r0, [r6, #0]
 8005692:	f7fe fa03 	bl	8003a9c <vListInsert>
	return xProcessTimerNow;
 8005696:	e745      	b.n	8005524 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005698:	6830      	ldr	r0, [r6, #0]
 800569a:	f7fe f9ff 	bl	8003a9c <vListInsert>
 800569e:	e741      	b.n	8005524 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056a0:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056a4:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056a8:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 80056aa:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ac:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 80056b0:	d31a      	bcc.n	80056e8 <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b2:	ebaa 0307 	sub.w	r3, sl, r7
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d821      	bhi.n	80056fe <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056ba:	2300      	movs	r3, #0
 80056bc:	463a      	mov	r2, r7
 80056be:	4658      	mov	r0, fp
 80056c0:	4619      	mov	r1, r3
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	f7ff fe84 	bl	80053d0 <xTimerGenericCommand>
			configASSERT( xResult );
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f47f af27 	bne.w	800551c <prvTimerTask+0x60>
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	e7fe      	b.n	80056de <prvTimerTask+0x222>
							vPortFree( pxTimer );
 80056e0:	4638      	mov	r0, r7
 80056e2:	f000 faa1 	bl	8005c28 <vPortFree>
 80056e6:	e71d      	b.n	8005524 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056e8:	4641      	mov	r1, r8
 80056ea:	6830      	ldr	r0, [r6, #0]
 80056ec:	f7fe f9d6 	bl	8003a9c <vListInsert>
	return xProcessTimerNow;
 80056f0:	e714      	b.n	800551c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056f2:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <prvTimerTask+0x26c>)
 80056f4:	1d39      	adds	r1, r7, #4
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	f7fe f9d0 	bl	8003a9c <vListInsert>
	return xProcessTimerNow;
 80056fc:	e712      	b.n	8005524 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <prvTimerTask+0x26c>)
 8005700:	4641      	mov	r1, r8
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	f7fe f9ca 	bl	8003a9c <vListInsert>
	return xProcessTimerNow;
 8005708:	e708      	b.n	800551c <prvTimerTask+0x60>
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800571a:	e7fe      	b.n	800571a <prvTimerTask+0x25e>
 800571c:	24002120 	.word	0x24002120
 8005720:	240021f0 	.word	0x240021f0
 8005724:	24002244 	.word	0x24002244
 8005728:	24002124 	.word	0x24002124

0800572c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800572c:	4808      	ldr	r0, [pc, #32]	; (8005750 <prvPortStartFirstTask+0x24>)
 800572e:	6800      	ldr	r0, [r0, #0]
 8005730:	6800      	ldr	r0, [r0, #0]
 8005732:	f380 8808 	msr	MSP, r0
 8005736:	f04f 0000 	mov.w	r0, #0
 800573a:	f380 8814 	msr	CONTROL, r0
 800573e:	b662      	cpsie	i
 8005740:	b661      	cpsie	f
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	df00      	svc	0
 800574c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800574e:	0000      	.short	0x0000
 8005750:	e000ed08 	.word	0xe000ed08

08005754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005764 <vPortEnableVFP+0x10>
 8005758:	6801      	ldr	r1, [r0, #0]
 800575a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800575e:	6001      	str	r1, [r0, #0]
 8005760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005762:	0000      	.short	0x0000
 8005764:	e000ed88 	.word	0xe000ed88

08005768 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <prvTaskExitError+0x3c>)
{
 800576a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800576c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800576e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8005770:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005772:	3301      	adds	r3, #1
 8005774:	d008      	beq.n	8005788 <prvTaskExitError+0x20>
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	e7fe      	b.n	8005786 <prvTaskExitError+0x1e>
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005798:	9b01      	ldr	r3, [sp, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0fc      	beq.n	8005798 <prvTaskExitError+0x30>
}
 800579e:	b002      	add	sp, #8
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	24000024 	.word	0x24000024

080057a8 <pxPortInitialiseStack>:
{
 80057a8:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057aa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057ae:	4809      	ldr	r0, [pc, #36]	; (80057d4 <pxPortInitialiseStack+0x2c>)
{
 80057b0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057b2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057b6:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057ba:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80057be:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057c2:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057c6:	f06f 0102 	mvn.w	r1, #2
}
 80057ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057ce:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80057d2:	4770      	bx	lr
 80057d4:	08005769 	.word	0x08005769
	...

080057e0 <SVC_Handler>:
	__asm volatile (
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <pxCurrentTCBConst2>)
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	6808      	ldr	r0, [r1, #0]
 80057e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ea:	f380 8809 	msr	PSP, r0
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8811 	msr	BASEPRI, r0
 80057fa:	4770      	bx	lr
 80057fc:	f3af 8000 	nop.w

08005800 <pxCurrentTCBConst2>:
 8005800:	24001c24 	.word	0x24001c24

08005804 <vPortEnterCritical>:
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005814:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <vPortEnterCritical+0x40>)
 8005816:	6813      	ldr	r3, [r2, #0]
 8005818:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800581a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800581c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800581e:	d000      	beq.n	8005822 <vPortEnterCritical+0x1e>
}
 8005820:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005822:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005826:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f7      	beq.n	8005820 <vPortEnterCritical+0x1c>
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	e7fe      	b.n	8005840 <vPortEnterCritical+0x3c>
 8005842:	bf00      	nop
 8005844:	24000024 	.word	0x24000024

08005848 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005848:	4a08      	ldr	r2, [pc, #32]	; (800586c <vPortExitCritical+0x24>)
 800584a:	6813      	ldr	r3, [r2, #0]
 800584c:	b943      	cbnz	r3, 8005860 <vPortExitCritical+0x18>
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	e7fe      	b.n	800585e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005860:	3b01      	subs	r3, #1
 8005862:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005864:	b90b      	cbnz	r3, 800586a <vPortExitCritical+0x22>
	__asm volatile
 8005866:	f383 8811 	msr	BASEPRI, r3
}
 800586a:	4770      	bx	lr
 800586c:	24000024 	.word	0x24000024

08005870 <PendSV_Handler>:
	__asm volatile
 8005870:	f3ef 8009 	mrs	r0, PSP
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <pxCurrentTCBConst>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f01e 0f10 	tst.w	lr, #16
 8005880:	bf08      	it	eq
 8005882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005894:	f380 8811 	msr	BASEPRI, r0
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f7ff fafa 	bl	8004e98 <vTaskSwitchContext>
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f380 8811 	msr	BASEPRI, r0
 80058ac:	bc09      	pop	{r0, r3}
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	6808      	ldr	r0, [r1, #0]
 80058b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b6:	f01e 0f10 	tst.w	lr, #16
 80058ba:	bf08      	it	eq
 80058bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058c0:	f380 8809 	msr	PSP, r0
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst>:
 80058d0:	24001c24 	.word	0x24001c24

080058d4 <xPortSysTickHandler>:
{
 80058d4:	b508      	push	{r3, lr}
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80058e6:	f7ff f959 	bl	8004b9c <xTaskIncrementTick>
 80058ea:	b128      	cbz	r0, 80058f8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80058f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80058f8:	2300      	movs	r3, #0
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bd08      	pop	{r3, pc}

08005900 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005900:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005904:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005906:	4806      	ldr	r0, [pc, #24]	; (8005920 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005908:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800590a:	4906      	ldr	r1, [pc, #24]	; (8005924 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800590c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800590e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005910:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005912:	fba1 1303 	umull	r1, r3, r1, r3
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	3b01      	subs	r3, #1
 800591a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800591c:	6110      	str	r0, [r2, #16]
}
 800591e:	4770      	bx	lr
 8005920:	24000000 	.word	0x24000000
 8005924:	10624dd3 	.word	0x10624dd3

08005928 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005928:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800592c:	4a3d      	ldr	r2, [pc, #244]	; (8005a24 <xPortStartScheduler+0xfc>)
 800592e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8005932:	4291      	cmp	r1, r2
 8005934:	d041      	beq.n	80059ba <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005936:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800593a:	4b3b      	ldr	r3, [pc, #236]	; (8005a28 <xPortStartScheduler+0x100>)
 800593c:	429a      	cmp	r2, r3
 800593e:	d033      	beq.n	80059a8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005940:	4b3a      	ldr	r3, [pc, #232]	; (8005a2c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005942:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005944:	493a      	ldr	r1, [pc, #232]	; (8005a30 <xPortStartScheduler+0x108>)
{
 8005946:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005948:	781a      	ldrb	r2, [r3, #0]
{
 800594a:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800594c:	4c39      	ldr	r4, [pc, #228]	; (8005a34 <xPortStartScheduler+0x10c>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005952:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005954:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005956:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005958:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005960:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005964:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005968:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800596c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800596e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005970:	d511      	bpl.n	8005996 <xPortStartScheduler+0x6e>
 8005972:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005974:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005978:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800597a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005984:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8005988:	0609      	lsls	r1, r1, #24
 800598a:	d4f3      	bmi.n	8005974 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800598c:	2803      	cmp	r0, #3
 800598e:	6020      	str	r0, [r4, #0]
 8005990:	f88d 3003 	strb.w	r3, [sp, #3]
 8005994:	d01a      	beq.n	80059cc <xPortStartScheduler+0xa4>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	e7fe      	b.n	80059a6 <xPortStartScheduler+0x7e>
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059b8:	e7fe      	b.n	80059b8 <xPortStartScheduler+0x90>
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059ca:	e7fe      	b.n	80059ca <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059cc:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059ce:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059d2:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059d4:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059d8:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059da:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
 80059dc:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059e0:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80059e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059e8:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059ec:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80059f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059f4:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80059f8:	f7ff ff82 	bl	8005900 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80059fc:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <xPortStartScheduler+0x110>)
 80059fe:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005a00:	f7ff fea8 	bl	8005754 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a04:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 8005a08:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a0c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005a10:	f7ff fe8c 	bl	800572c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005a14:	f7ff fa40 	bl	8004e98 <vTaskSwitchContext>
}
 8005a18:	4620      	mov	r0, r4
	prvTaskExitError();
 8005a1a:	f7ff fea5 	bl	8005768 <prvTaskExitError>
}
 8005a1e:	b003      	add	sp, #12
 8005a20:	bd30      	pop	{r4, r5, pc}
 8005a22:	bf00      	nop
 8005a24:	410fc271 	.word	0x410fc271
 8005a28:	410fc270 	.word	0x410fc270
 8005a2c:	e000e400 	.word	0xe000e400
 8005a30:	2400224c 	.word	0x2400224c
 8005a34:	24002250 	.word	0x24002250
 8005a38:	24000024 	.word	0x24000024

08005a3c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a3c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a40:	2b0f      	cmp	r3, #15
 8005a42:	d90e      	bls.n	8005a62 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a44:	4911      	ldr	r1, [pc, #68]	; (8005a8c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a46:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a48:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a4a:	7812      	ldrb	r2, [r2, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d908      	bls.n	8005a62 <vPortValidateInterruptPriority+0x26>
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	e7fe      	b.n	8005a60 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a66:	4a0b      	ldr	r2, [pc, #44]	; (8005a94 <vPortValidateInterruptPriority+0x58>)
 8005a68:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d908      	bls.n	8005a88 <vPortValidateInterruptPriority+0x4c>
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	e7fe      	b.n	8005a86 <vPortValidateInterruptPriority+0x4a>
	}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	e000e3f0 	.word	0xe000e3f0
 8005a90:	2400224c 	.word	0x2400224c
 8005a94:	24002250 	.word	0x24002250

08005a98 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a98:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <prvInsertBlockIntoFreeList+0x5c>)
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4283      	cmp	r3, r0
 8005aa0:	d3fb      	bcc.n	8005a9a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aa2:	6851      	ldr	r1, [r2, #4]
 8005aa4:	eb02 0c01 	add.w	ip, r2, r1
 8005aa8:	4560      	cmp	r0, ip
 8005aaa:	d01a      	beq.n	8005ae2 <prvInsertBlockIntoFreeList+0x4a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005aac:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aae:	eb00 0c01 	add.w	ip, r0, r1
 8005ab2:	4563      	cmp	r3, ip
 8005ab4:	d005      	beq.n	8005ac2 <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ab6:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ab8:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aba:	bf18      	it	ne
 8005abc:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005abe:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ac0:	4610      	mov	r0, r2
{
 8005ac2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ac4:	4c0c      	ldr	r4, [pc, #48]	; (8005af8 <prvInsertBlockIntoFreeList+0x60>)
 8005ac6:	6824      	ldr	r4, [r4, #0]
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	d003      	beq.n	8005ad4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005acc:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ad0:	4421      	add	r1, r4
 8005ad2:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 8005ad4:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ad6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005ad8:	d000      	beq.n	8005adc <prvInsertBlockIntoFreeList+0x44>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ada:	6010      	str	r0, [r2, #0]
	}
}
 8005adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ae2:	6840      	ldr	r0, [r0, #4]
 8005ae4:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ae6:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ae8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aea:	4283      	cmp	r3, r0
 8005aec:	d0e8      	beq.n	8005ac0 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005aee:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	24009a6c 	.word	0x24009a6c
 8005af8:	24002254 	.word	0x24002254

08005afc <pvPortMalloc>:
{
 8005afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005b00:	4e42      	ldr	r6, [pc, #264]	; (8005c0c <pvPortMalloc+0x110>)
{
 8005b02:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005b04:	f7ff f834 	bl	8004b70 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d05a      	beq.n	8005bc4 <pvPortMalloc+0xc8>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b0e:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <pvPortMalloc+0x114>)
 8005b10:	681d      	ldr	r5, [r3, #0]
			if( xWantedSize > 0 )
 8005b12:	422c      	tst	r4, r5
 8005b14:	d12e      	bne.n	8005b74 <pvPortMalloc+0x78>
 8005b16:	b36c      	cbz	r4, 8005b74 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b18:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8005b1a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b1e:	d002      	beq.n	8005b26 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b20:	f021 0107 	bic.w	r1, r1, #7
 8005b24:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b26:	b329      	cbz	r1, 8005b74 <pvPortMalloc+0x78>
 8005b28:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8005c24 <pvPortMalloc+0x128>
 8005b2c:	f8d8 7000 	ldr.w	r7, [r8]
 8005b30:	428f      	cmp	r7, r1
 8005b32:	d31f      	bcc.n	8005b74 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8005b34:	4837      	ldr	r0, [pc, #220]	; (8005c14 <pvPortMalloc+0x118>)
 8005b36:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b38:	e003      	b.n	8005b42 <pvPortMalloc+0x46>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	b123      	cbz	r3, 8005b48 <pvPortMalloc+0x4c>
 8005b3e:	4620      	mov	r0, r4
 8005b40:	461c      	mov	r4, r3
 8005b42:	6862      	ldr	r2, [r4, #4]
 8005b44:	428a      	cmp	r2, r1
 8005b46:	d3f8      	bcc.n	8005b3a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8005b48:	6833      	ldr	r3, [r6, #0]
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	d012      	beq.n	8005b74 <pvPortMalloc+0x78>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b4e:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b50:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b52:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b54:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b56:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d916      	bls.n	8005b8a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b5c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b5e:	0742      	lsls	r2, r0, #29
 8005b60:	d00e      	beq.n	8005b80 <pvPortMalloc+0x84>
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	e7fe      	b.n	8005b72 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 8005b74:	2600      	movs	r6, #0
 8005b76:	f7ff f94f 	bl	8004e18 <xTaskResumeAll>
}
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b80:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b82:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b84:	f7ff ff88 	bl	8005a98 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b88:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b8a:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b8c:	1abf      	subs	r7, r7, r2
					xNumberOfSuccessfulAllocations++;
 8005b8e:	4923      	ldr	r1, [pc, #140]	; (8005c1c <pvPortMalloc+0x120>)
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b90:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b92:	6818      	ldr	r0, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8005b94:	2200      	movs	r2, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b96:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b9a:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b9c:	bf38      	it	cc
 8005b9e:	601f      	strcc	r7, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ba0:	680b      	ldr	r3, [r1, #0]
 8005ba2:	3301      	adds	r3, #1
					pxBlock->pxNextFreeBlock = NULL;
 8005ba4:	e9c4 2500 	strd	r2, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 8005ba8:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 8005baa:	f7ff f935 	bl	8004e18 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bae:	0773      	lsls	r3, r6, #29
 8005bb0:	d0e3      	beq.n	8005b7a <pvPortMalloc+0x7e>
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	e7fe      	b.n	8005bc2 <pvPortMalloc+0xc6>
	uxAddress = ( size_t ) ucHeap;
 8005bc4:	4b16      	ldr	r3, [pc, #88]	; (8005c20 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bc6:	075d      	lsls	r5, r3, #29
 8005bc8:	d119      	bne.n	8005bfe <pvPortMalloc+0x102>
 8005bca:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
 8005bce:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 8005bd0:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 8005bd2:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bd4:	4d0f      	ldr	r5, [pc, #60]	; (8005c14 <pvPortMalloc+0x118>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bd6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bda:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bde:	1ad3      	subs	r3, r2, r3
	pxEnd = ( void * ) uxAddress;
 8005be0:	6032      	str	r2, [r6, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005be2:	e9c5 1000 	strd	r1, r0, [r5]
	pxEnd->pxNextFreeBlock = NULL;
 8005be6:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bea:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bee:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <pvPortMalloc+0x11c>)
}
 8005bf0:	463d      	mov	r5, r7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bf4:	4a0b      	ldr	r2, [pc, #44]	; (8005c24 <pvPortMalloc+0x128>)
 8005bf6:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <pvPortMalloc+0x114>)
 8005bfa:	601f      	str	r7, [r3, #0]
}
 8005bfc:	e789      	b.n	8005b12 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bfe:	1dd9      	adds	r1, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c00:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c04:	f021 0107 	bic.w	r1, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c08:	460b      	mov	r3, r1
 8005c0a:	e7e1      	b.n	8005bd0 <pvPortMalloc+0xd4>
 8005c0c:	24002254 	.word	0x24002254
 8005c10:	24009a58 	.word	0x24009a58
 8005c14:	24009a6c 	.word	0x24009a6c
 8005c18:	24009a60 	.word	0x24009a60
 8005c1c:	24009a64 	.word	0x24009a64
 8005c20:	24002258 	.word	0x24002258
 8005c24:	24009a5c 	.word	0x24009a5c

08005c28 <vPortFree>:
	if( pv != NULL )
 8005c28:	b1d0      	cbz	r0, 8005c60 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c2a:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <vPortFree+0x74>)
 8005c2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	4213      	tst	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c36:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005c3a:	b191      	cbz	r1, 8005c62 <vPortFree+0x3a>
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	e7fe      	b.n	8005c4c <vPortFree+0x24>
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c5e:	e7fe      	b.n	8005c5e <vPortFree+0x36>
 8005c60:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c62:	ea23 0302 	bic.w	r3, r3, r2
{
 8005c66:	b500      	push	{lr}
 8005c68:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c6a:	f840 3c04 	str.w	r3, [r0, #-4]
 8005c6e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8005c70:	f7fe ff7e 	bl	8004b70 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c74:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <vPortFree+0x78>)
 8005c76:	9801      	ldr	r0, [sp, #4]
 8005c78:	6811      	ldr	r1, [r2, #0]
 8005c7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c7e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c80:	440b      	add	r3, r1
 8005c82:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c84:	f7ff ff08 	bl	8005a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c88:	4a06      	ldr	r2, [pc, #24]	; (8005ca4 <vPortFree+0x7c>)
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	b003      	add	sp, #12
 8005c92:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8005c96:	f7ff b8bf 	b.w	8004e18 <xTaskResumeAll>
 8005c9a:	bf00      	nop
 8005c9c:	24009a58 	.word	0x24009a58
 8005ca0:	24009a5c 	.word	0x24009a5c
 8005ca4:	24009a68 	.word	0x24009a68

08005ca8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8005cac:	f7fd fc1c 	bl	80034e8 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8005cb0:	f7fd fb62 	bl	8003378 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8005cb4:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <tcpip_thread+0xc0>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	b113      	cbz	r3, 8005cc0 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 8005cba:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <tcpip_thread+0xc4>)
 8005cbc:	6810      	ldr	r0, [r2, #0]
 8005cbe:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005cc0:	4d2b      	ldr	r5, [pc, #172]	; (8005d70 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005cc2:	4f2c      	ldr	r7, [pc, #176]	; (8005d74 <tcpip_thread+0xcc>)
 8005cc4:	4e2c      	ldr	r6, [pc, #176]	; (8005d78 <tcpip_thread+0xd0>)
 8005cc6:	e00e      	b.n	8005ce6 <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 8005cc8:	b158      	cbz	r0, 8005ce2 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 8005cca:	f7fd fbd3 	bl	8003474 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005cce:	4622      	mov	r2, r4
 8005cd0:	a901      	add	r1, sp, #4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f006 ff20 	bl	800cb18 <sys_arch_mbox_fetch>
 8005cd8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8005cda:	f7fd fb4d 	bl	8003378 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8005cde:	3401      	adds	r4, #1
 8005ce0:	d111      	bne.n	8005d06 <tcpip_thread+0x5e>
    sys_check_timeouts();
 8005ce2:	f004 ff45 	bl	800ab70 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 8005ce6:	f7fd fbcf 	bl	8003488 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 8005cea:	f004 ff6b 	bl	800abc4 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8005cee:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8005cf0:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8005cf2:	d1e9      	bne.n	8005cc8 <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 8005cf4:	f7fd fbbe 	bl	8003474 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	a901      	add	r1, sp, #4
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f006 ff0b 	bl	800cb18 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005d02:	f7fd fb39 	bl	8003378 <sys_lock_tcpip_core>
    if (msg == NULL) {
 8005d06:	9c01      	ldr	r4, [sp, #4]
 8005d08:	b164      	cbz	r4, 8005d24 <tcpip_thread+0x7c>
  switch (msg->type) {
 8005d0a:	7823      	ldrb	r3, [r4, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d01e      	beq.n	8005d4e <tcpip_thread+0xa6>
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d018      	beq.n	8005d46 <tcpip_thread+0x9e>
 8005d14:	b16b      	cbz	r3, 8005d32 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005d16:	463b      	mov	r3, r7
 8005d18:	22cf      	movs	r2, #207	; 0xcf
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4817      	ldr	r0, [pc, #92]	; (8005d7c <tcpip_thread+0xd4>)
 8005d1e:	f007 f869 	bl	800cdf4 <iprintf>
      break;
 8005d22:	e7e0      	b.n	8005ce6 <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005d24:	463b      	mov	r3, r7
 8005d26:	2291      	movs	r2, #145	; 0x91
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4814      	ldr	r0, [pc, #80]	; (8005d7c <tcpip_thread+0xd4>)
 8005d2c:	f007 f862 	bl	800cdf4 <iprintf>
      continue;
 8005d30:	e7d9      	b.n	8005ce6 <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8005d32:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8005d36:	6860      	ldr	r0, [r4, #4]
 8005d38:	4798      	blx	r3
 8005d3a:	b980      	cbnz	r0, 8005d5e <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	2009      	movs	r0, #9
 8005d40:	f000 fcca 	bl	80066d8 <memp_free>
      break;
 8005d44:	e7cf      	b.n	8005ce6 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005d46:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8005d4a:	4798      	blx	r3
      break;
 8005d4c:	e7cb      	b.n	8005ce6 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005d4e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8005d52:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005d54:	4621      	mov	r1, r4
 8005d56:	2008      	movs	r0, #8
 8005d58:	f000 fcbe 	bl	80066d8 <memp_free>
      break;
 8005d5c:	e7c3      	b.n	8005ce6 <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 8005d5e:	6860      	ldr	r0, [r4, #4]
 8005d60:	f001 f880 	bl	8006e64 <pbuf_free>
 8005d64:	e7ea      	b.n	8005d3c <tcpip_thread+0x94>
 8005d66:	bf00      	nop
 8005d68:	24009a78 	.word	0x24009a78
 8005d6c:	24009a7c 	.word	0x24009a7c
 8005d70:	24009a80 	.word	0x24009a80
 8005d74:	0800de40 	.word	0x0800de40
 8005d78:	0800de70 	.word	0x0800de70
 8005d7c:	0800dd68 	.word	0x0800dd68

08005d80 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005d84:	4813      	ldr	r0, [pc, #76]	; (8005dd4 <tcpip_inpkt+0x54>)
{
 8005d86:	460e      	mov	r6, r1
 8005d88:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005d8a:	f006 fee5 	bl	800cb58 <sys_mbox_valid>
 8005d8e:	b178      	cbz	r0, 8005db0 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8005d90:	2009      	movs	r0, #9
 8005d92:	f000 fc5b 	bl	800664c <memp_malloc>
  if (msg == NULL) {
 8005d96:	4604      	mov	r4, r0
 8005d98:	b1c0      	cbz	r0, 8005dcc <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8005d9a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8005d9c:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8005d9e:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005da0:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8005da2:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005da4:	480b      	ldr	r0, [pc, #44]	; (8005dd4 <tcpip_inpkt+0x54>)
  msg->msg.inp.input_fn = input_fn;
 8005da6:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005da8:	f006 fea6 	bl	800caf8 <sys_mbox_trypost>
 8005dac:	b938      	cbnz	r0, 8005dbe <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <tcpip_inpkt+0x58>)
 8005db2:	22fc      	movs	r2, #252	; 0xfc
 8005db4:	4909      	ldr	r1, [pc, #36]	; (8005ddc <tcpip_inpkt+0x5c>)
 8005db6:	480a      	ldr	r0, [pc, #40]	; (8005de0 <tcpip_inpkt+0x60>)
 8005db8:	f007 f81c 	bl	800cdf4 <iprintf>
 8005dbc:	e7e8      	b.n	8005d90 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	2009      	movs	r0, #9
 8005dc2:	f000 fc89 	bl	80066d8 <memp_free>
    return ERR_MEM;
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	24009a80 	.word	0x24009a80
 8005dd8:	0800de40 	.word	0x0800de40
 8005ddc:	0800de90 	.word	0x0800de90
 8005de0:	0800dd68 	.word	0x0800dd68

08005de4 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005de4:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8005de8:	f013 0f18 	tst.w	r3, #24
 8005dec:	d002      	beq.n	8005df4 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8005dee:	4a03      	ldr	r2, [pc, #12]	; (8005dfc <tcpip_input+0x18>)
 8005df0:	f7ff bfc6 	b.w	8005d80 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8005df4:	4a02      	ldr	r2, [pc, #8]	; (8005e00 <tcpip_input+0x1c>)
 8005df6:	f7ff bfc3 	b.w	8005d80 <tcpip_inpkt>
 8005dfa:	bf00      	nop
 8005dfc:	0800c9c1 	.word	0x0800c9c1
 8005e00:	0800bded 	.word	0x0800bded

08005e04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005e08:	4812      	ldr	r0, [pc, #72]	; (8005e54 <tcpip_try_callback+0x50>)
{
 8005e0a:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005e0c:	f006 fea4 	bl	800cb58 <sys_mbox_valid>
 8005e10:	b170      	cbz	r0, 8005e30 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005e12:	2008      	movs	r0, #8
 8005e14:	f000 fc1a 	bl	800664c <memp_malloc>
  if (msg == NULL) {
 8005e18:	4604      	mov	r4, r0
 8005e1a:	b1c0      	cbz	r0, 8005e4e <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8005e1c:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005e1e:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8005e20:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005e24:	480b      	ldr	r0, [pc, #44]	; (8005e54 <tcpip_try_callback+0x50>)
  msg->type = TCPIP_MSG_CALLBACK;
 8005e26:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005e28:	f006 fe66 	bl	800caf8 <sys_mbox_trypost>
 8005e2c:	b940      	cbnz	r0, 8005e40 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <tcpip_try_callback+0x54>)
 8005e32:	f240 125d 	movw	r2, #349	; 0x15d
 8005e36:	4909      	ldr	r1, [pc, #36]	; (8005e5c <tcpip_try_callback+0x58>)
 8005e38:	4809      	ldr	r0, [pc, #36]	; (8005e60 <tcpip_try_callback+0x5c>)
 8005e3a:	f006 ffdb 	bl	800cdf4 <iprintf>
 8005e3e:	e7e8      	b.n	8005e12 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8005e40:	4621      	mov	r1, r4
 8005e42:	2008      	movs	r0, #8
 8005e44:	f000 fc48 	bl	80066d8 <memp_free>
    return ERR_MEM;
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005e4c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8005e4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	24009a80 	.word	0x24009a80
 8005e58:	0800de40 	.word	0x0800de40
 8005e5c:	0800de90 	.word	0x0800de90
 8005e60:	0800dd68 	.word	0x0800dd68

08005e64 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8005e64:	b530      	push	{r4, r5, lr}
 8005e66:	b083      	sub	sp, #12
 8005e68:	4605      	mov	r5, r0
 8005e6a:	460c      	mov	r4, r1
  lwip_init();
 8005e6c:	f000 f8b2 	bl	8005fd4 <lwip_init>

  tcpip_init_done = initfunc;
 8005e70:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005e72:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005e76:	4816      	ldr	r0, [pc, #88]	; (8005ed0 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8005e78:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8005e7a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005e7c:	f006 fe2e 	bl	800cadc <sys_mbox_new>
 8005e80:	b970      	cbnz	r0, 8005ea0 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8005e82:	4814      	ldr	r0, [pc, #80]	; (8005ed4 <tcpip_init+0x70>)
 8005e84:	f006 fe78 	bl	800cb78 <sys_mutex_new>
 8005e88:	b9b0      	cbnz	r0, 8005eb8 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005e8a:	2418      	movs	r4, #24
 8005e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e90:	2200      	movs	r2, #0
 8005e92:	4911      	ldr	r1, [pc, #68]	; (8005ed8 <tcpip_init+0x74>)
 8005e94:	9400      	str	r4, [sp, #0]
 8005e96:	4811      	ldr	r0, [pc, #68]	; (8005edc <tcpip_init+0x78>)
 8005e98:	f006 fe84 	bl	800cba4 <sys_thread_new>
}
 8005e9c:	b003      	add	sp, #12
 8005e9e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <tcpip_init+0x7c>)
 8005ea2:	f240 2261 	movw	r2, #609	; 0x261
 8005ea6:	490f      	ldr	r1, [pc, #60]	; (8005ee4 <tcpip_init+0x80>)
 8005ea8:	480f      	ldr	r0, [pc, #60]	; (8005ee8 <tcpip_init+0x84>)
 8005eaa:	f006 ffa3 	bl	800cdf4 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8005eae:	4809      	ldr	r0, [pc, #36]	; (8005ed4 <tcpip_init+0x70>)
 8005eb0:	f006 fe62 	bl	800cb78 <sys_mutex_new>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d0e8      	beq.n	8005e8a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8005eb8:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <tcpip_init+0x7c>)
 8005eba:	f240 2265 	movw	r2, #613	; 0x265
 8005ebe:	490b      	ldr	r1, [pc, #44]	; (8005eec <tcpip_init+0x88>)
 8005ec0:	4809      	ldr	r0, [pc, #36]	; (8005ee8 <tcpip_init+0x84>)
 8005ec2:	f006 ff97 	bl	800cdf4 <iprintf>
 8005ec6:	e7e0      	b.n	8005e8a <tcpip_init+0x26>
 8005ec8:	24009a78 	.word	0x24009a78
 8005ecc:	24009a7c 	.word	0x24009a7c
 8005ed0:	24009a80 	.word	0x24009a80
 8005ed4:	24009a74 	.word	0x24009a74
 8005ed8:	08005ca9 	.word	0x08005ca9
 8005edc:	0800dee8 	.word	0x0800dee8
 8005ee0:	0800de40 	.word	0x0800de40
 8005ee4:	0800dea0 	.word	0x0800dea0
 8005ee8:	0800dd68 	.word	0x0800dd68
 8005eec:	0800dec4 	.word	0x0800dec4

08005ef0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8005ef0:	ba40      	rev16	r0, r0
}
 8005ef2:	b280      	uxth	r0, r0
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop

08005ef8 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8005ef8:	ba00      	rev	r0, r0
 8005efa:	4770      	bx	lr

08005efc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8005efc:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8005efe:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 8005f02:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8005f06:	4571      	cmp	r1, lr
 8005f08:	dd05      	ble.n	8005f16 <lwip_standard_chksum+0x1a>
 8005f0a:	b125      	cbz	r5, 8005f16 <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 8005f0c:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8005f10:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8005f12:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8005f16:	2901      	cmp	r1, #1
 8005f18:	dd27      	ble.n	8005f6a <lwip_standard_chksum+0x6e>
 8005f1a:	3902      	subs	r1, #2
  u32_t sum = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	084c      	lsrs	r4, r1, #1
 8005f20:	f104 0c01 	add.w	ip, r4, #1
 8005f24:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8005f28:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8005f2c:	4584      	cmp	ip, r0
    sum += *ps++;
 8005f2e:	4413      	add	r3, r2
  while (len > 1) {
 8005f30:	d1fa      	bne.n	8005f28 <lwip_standard_chksum+0x2c>
    len -= 2;
 8005f32:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 8005f36:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8005f3a:	2901      	cmp	r1, #1
 8005f3c:	d105      	bne.n	8005f4a <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8005f3e:	f89c 2000 	ldrb.w	r2, [ip]
 8005f42:	f362 0e07 	bfi	lr, r2, #0, #8
 8005f46:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 8005f4a:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8005f4c:	fa1f f38e 	uxth.w	r3, lr
 8005f50:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 8005f54:	b298      	uxth	r0, r3
 8005f56:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8005f5a:	b125      	cbz	r5, 8005f66 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8005f5c:	0203      	lsls	r3, r0, #8
 8005f5e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8005f66:	b280      	uxth	r0, r0
 8005f68:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 8005f6a:	4684      	mov	ip, r0
  u32_t sum = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e7e4      	b.n	8005f3a <lwip_standard_chksum+0x3e>

08005f70 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8005f70:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8005f72:	f7ff ffc3 	bl	8005efc <lwip_standard_chksum>
 8005f76:	43c0      	mvns	r0, r0
}
 8005f78:	b280      	uxth	r0, r0
 8005f7a:	bd08      	pop	{r3, pc}

08005f7c <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8005f7c:	b338      	cbz	r0, 8005fce <inet_chksum_pbuf+0x52>
{
 8005f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 8005f80:	2700      	movs	r7, #0
 8005f82:	4605      	mov	r5, r0
  acc = 0;
 8005f84:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 8005f86:	896e      	ldrh	r6, [r5, #10]
 8005f88:	6868      	ldr	r0, [r5, #4]
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	f7ff ffb6 	bl	8005efc <lwip_standard_chksum>
 8005f90:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8005f92:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 8005f96:	b2a3      	uxth	r3, r4
 8005f98:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8005f9c:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8005fa0:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8005fa4:	d004      	beq.n	8005fb0 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f087 0701 	eor.w	r7, r7, #1
 8005fac:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8005fb0:	682d      	ldr	r5, [r5, #0]
 8005fb2:	2d00      	cmp	r5, #0
 8005fb4:	d1e7      	bne.n	8005f86 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8005fb6:	b13f      	cbz	r7, 8005fc8 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8005fb8:	0220      	lsls	r0, r4, #8
 8005fba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005fbe:	b280      	uxth	r0, r0
 8005fc0:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8005fc2:	43c0      	mvns	r0, r0
 8005fc4:	b280      	uxth	r0, r0
}
 8005fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 8005fc8:	43e0      	mvns	r0, r4
 8005fca:	b280      	uxth	r0, r0
}
 8005fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 8005fce:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8005fd2:	4770      	bx	lr

08005fd4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005fd4:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8005fd6:	f006 fdc5 	bl	800cb64 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8005fda:	f000 f80d 	bl	8005ff8 <mem_init>
  memp_init();
 8005fde:	f000 faf3 	bl	80065c8 <memp_init>
  pbuf_init();
  netif_init();
 8005fe2:	f000 fbf9 	bl	80067d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005fe6:	f004 fe01 	bl	800abec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005fea:	f001 f9ff 	bl	80073ec <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8005fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8005ff2:	f004 bd9f 	b.w	800ab34 <sys_timeouts_init>
 8005ff6:	bf00      	nop

08005ff8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005ff8:	4b13      	ldr	r3, [pc, #76]	; (8006048 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8005ffa:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005ffe:	4813      	ldr	r0, [pc, #76]	; (800604c <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8006000:	f647 51e8 	movw	r1, #32232	; 0x7de8
{
 8006004:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006006:	6003      	str	r3, [r0, #0]
  mem->prev = 0;
  mem->used = 0;
 8006008:	2400      	movs	r4, #0
  mem->next = MEM_SIZE_ALIGNED;
 800600a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800600e:	4419      	add	r1, r3
 8006010:	4a0f      	ldr	r2, [pc, #60]	; (8006050 <mem_init+0x58>)
  mem->used = 0;
 8006012:	711c      	strb	r4, [r3, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8006014:	480f      	ldr	r0, [pc, #60]	; (8006054 <mem_init+0x5c>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006016:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8006018:	2101      	movs	r1, #1
 800601a:	4a0f      	ldr	r2, [pc, #60]	; (8006058 <mem_init+0x60>)
  ram_end->next = MEM_SIZE_ALIGNED;
 800601c:	4c0f      	ldr	r4, [pc, #60]	; (800605c <mem_init+0x64>)
 800601e:	f8c0 4fe8 	str.w	r4, [r0, #4072]	; 0xfe8
  ram_end->used = 1;
 8006022:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006026:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <mem_init+0x68>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006028:	480e      	ldr	r0, [pc, #56]	; (8006064 <mem_init+0x6c>)
  lfree = (struct mem *)(void *)ram;
 800602a:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800602c:	f006 fda4 	bl	800cb78 <sys_mutex_new>
 8006030:	b900      	cbnz	r0, 8006034 <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006032:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <mem_init+0x70>)
 8006036:	f240 221f 	movw	r2, #543	; 0x21f
 800603a:	490c      	ldr	r1, [pc, #48]	; (800606c <mem_init+0x74>)
 800603c:	480c      	ldr	r0, [pc, #48]	; (8006070 <mem_init+0x78>)
}
 800603e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006042:	f006 bed7 	b.w	800cdf4 <iprintf>
 8006046:	bf00      	nop
 8006048:	30000200 	.word	0x30000200
 800604c:	24009aa4 	.word	0x24009aa4
 8006050:	24009aa8 	.word	0x24009aa8
 8006054:	30007000 	.word	0x30007000
 8006058:	30007f00 	.word	0x30007f00
 800605c:	7de87de8 	.word	0x7de87de8
 8006060:	24009a9c 	.word	0x24009a9c
 8006064:	24009aa0 	.word	0x24009aa0
 8006068:	0800def8 	.word	0x0800def8
 800606c:	0800df28 	.word	0x0800df28
 8006070:	0800dd68 	.word	0x0800dd68

08006074 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006074:	2800      	cmp	r0, #0
 8006076:	f000 809c 	beq.w	80061b2 <mem_free+0x13e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800607a:	0783      	lsls	r3, r0, #30
{
 800607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006080:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006082:	f040 8091 	bne.w	80061a8 <mem_free+0x134>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006086:	4e63      	ldr	r6, [pc, #396]	; (8006214 <mem_free+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006088:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	42ab      	cmp	r3, r5
 8006090:	d805      	bhi.n	800609e <mem_free+0x2a>
 8006092:	4f61      	ldr	r7, [pc, #388]	; (8006218 <mem_free+0x1a4>)
 8006094:	f100 030c 	add.w	r3, r0, #12
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d20c      	bcs.n	80060b8 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800609e:	4b5f      	ldr	r3, [pc, #380]	; (800621c <mem_free+0x1a8>)
 80060a0:	f240 227f 	movw	r2, #639	; 0x27f
 80060a4:	495e      	ldr	r1, [pc, #376]	; (8006220 <mem_free+0x1ac>)
 80060a6:	485f      	ldr	r0, [pc, #380]	; (8006224 <mem_free+0x1b0>)
 80060a8:	f006 fea4 	bl	800cdf4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80060ac:	f006 fd90 	bl	800cbd0 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80060b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 80060b4:	f006 bd98 	b.w	800cbe8 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 80060b8:	485b      	ldr	r0, [pc, #364]	; (8006228 <mem_free+0x1b4>)
 80060ba:	f006 fd69 	bl	800cb90 <sys_mutex_lock>
  if (!mem->used) {
 80060be:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80a1 	beq.w	800620a <mem_free+0x196>
  pmem = ptr_to_mem(mem->prev);
 80060c8:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80060cc:	f647 50e8 	movw	r0, #32232	; 0x7de8
  return (mem_size_t)((u8_t *)mem - ram);
 80060d0:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80060d2:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 80060d4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80060d8:	d808      	bhi.n	80060ec <mem_free+0x78>
 80060da:	4283      	cmp	r3, r0
 80060dc:	d806      	bhi.n	80060ec <mem_free+0x78>
  return (mem_size_t)((u8_t *)mem - ram);
 80060de:	1aa8      	subs	r0, r5, r2
 80060e0:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80060e2:	4288      	cmp	r0, r1
 80060e4:	d012      	beq.n	800610c <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80060e6:	5a51      	ldrh	r1, [r2, r1]
 80060e8:	4281      	cmp	r1, r0
 80060ea:	d00f      	beq.n	800610c <mem_free+0x98>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80060ec:	4b4b      	ldr	r3, [pc, #300]	; (800621c <mem_free+0x1a8>)
 80060ee:	f240 2295 	movw	r2, #661	; 0x295
 80060f2:	494e      	ldr	r1, [pc, #312]	; (800622c <mem_free+0x1b8>)
 80060f4:	484b      	ldr	r0, [pc, #300]	; (8006224 <mem_free+0x1b0>)
 80060f6:	f006 fe7d 	bl	800cdf4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80060fa:	484b      	ldr	r0, [pc, #300]	; (8006228 <mem_free+0x1b4>)
 80060fc:	f006 fd4e 	bl	800cb9c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8006100:	f006 fd66 	bl	800cbd0 <sys_arch_protect>
}
 8006104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006108:	f006 bd6e 	b.w	800cbe8 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 800610c:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800610e:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006112:	4561      	cmp	r1, ip
 8006114:	d002      	beq.n	800611c <mem_free+0xa8>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006116:	8849      	ldrh	r1, [r1, #2]
 8006118:	4281      	cmp	r1, r0
 800611a:	d1e7      	bne.n	80060ec <mem_free+0x78>
  if (mem < lfree) {
 800611c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8006248 <mem_free+0x1d4>
  mem->used = 0;
 8006120:	2100      	movs	r1, #0
 8006122:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 8006126:	f8d8 1000 	ldr.w	r1, [r8]
 800612a:	42a9      	cmp	r1, r5
    lfree = mem;
 800612c:	bf88      	it	hi
 800612e:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006132:	4295      	cmp	r5, r2
 8006134:	d33e      	bcc.n	80061b4 <mem_free+0x140>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006136:	4565      	cmp	r5, ip
 8006138:	d246      	bcs.n	80061c8 <mem_free+0x154>
  return (struct mem *)(void *)&ram[ptr];
 800613a:	6832      	ldr	r2, [r6, #0]
 800613c:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800613e:	429d      	cmp	r5, r3
 8006140:	d015      	beq.n	800616e <mem_free+0xfa>
 8006142:	7919      	ldrb	r1, [r3, #4]
 8006144:	b999      	cbnz	r1, 800616e <mem_free+0xfa>
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	428b      	cmp	r3, r1
 800614a:	d010      	beq.n	800616e <mem_free+0xfa>
    if (lfree == nmem) {
 800614c:	f8d8 1000 	ldr.w	r1, [r8]
 8006150:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8006152:	8819      	ldrh	r1, [r3, #0]
 8006154:	f824 1c08 	strh.w	r1, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006158:	f647 51e8 	movw	r1, #32232	; 0x7de8
 800615c:	881b      	ldrh	r3, [r3, #0]
      lfree = mem;
 800615e:	bf08      	it	eq
 8006160:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006164:	428b      	cmp	r3, r1
 8006166:	d002      	beq.n	800616e <mem_free+0xfa>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006168:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 800616a:	1aa9      	subs	r1, r5, r2
 800616c:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 800616e:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8006172:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8006174:	429d      	cmp	r5, r3
 8006176:	d012      	beq.n	800619e <mem_free+0x12a>
 8006178:	7918      	ldrb	r0, [r3, #4]
 800617a:	b980      	cbnz	r0, 800619e <mem_free+0x12a>
    if (lfree == mem) {
 800617c:	f8d8 0000 	ldr.w	r0, [r8]
 8006180:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006182:	f647 50e8 	movw	r0, #32232	; 0x7de8
      lfree = pmem;
 8006186:	bf08      	it	eq
 8006188:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 800618c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006190:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006192:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006196:	4283      	cmp	r3, r0
 8006198:	d001      	beq.n	800619e <mem_free+0x12a>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800619a:	441a      	add	r2, r3
 800619c:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800619e:	4822      	ldr	r0, [pc, #136]	; (8006228 <mem_free+0x1b4>)
}
 80061a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 80061a4:	f006 bcfa 	b.w	800cb9c <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80061a8:	4b1c      	ldr	r3, [pc, #112]	; (800621c <mem_free+0x1a8>)
 80061aa:	f240 2273 	movw	r2, #627	; 0x273
 80061ae:	4920      	ldr	r1, [pc, #128]	; (8006230 <mem_free+0x1bc>)
 80061b0:	e779      	b.n	80060a6 <mem_free+0x32>
 80061b2:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80061b4:	4b19      	ldr	r3, [pc, #100]	; (800621c <mem_free+0x1a8>)
 80061b6:	f240 12df 	movw	r2, #479	; 0x1df
 80061ba:	491e      	ldr	r1, [pc, #120]	; (8006234 <mem_free+0x1c0>)
 80061bc:	4819      	ldr	r0, [pc, #100]	; (8006224 <mem_free+0x1b0>)
 80061be:	f006 fe19 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	429d      	cmp	r5, r3
 80061c6:	d306      	bcc.n	80061d6 <mem_free+0x162>
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <mem_free+0x1a8>)
 80061ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80061ce:	491a      	ldr	r1, [pc, #104]	; (8006238 <mem_free+0x1c4>)
 80061d0:	4814      	ldr	r0, [pc, #80]	; (8006224 <mem_free+0x1b0>)
 80061d2:	f006 fe0f 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80061d6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80061da:	b133      	cbz	r3, 80061ea <mem_free+0x176>
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <mem_free+0x1a8>)
 80061de:	f240 12e1 	movw	r2, #481	; 0x1e1
 80061e2:	4916      	ldr	r1, [pc, #88]	; (800623c <mem_free+0x1c8>)
 80061e4:	480f      	ldr	r0, [pc, #60]	; (8006224 <mem_free+0x1b0>)
 80061e6:	f006 fe05 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80061ea:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80061ee:	f647 52e8 	movw	r2, #32232	; 0x7de8
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d9a1      	bls.n	800613a <mem_free+0xc6>
 80061f6:	4b09      	ldr	r3, [pc, #36]	; (800621c <mem_free+0x1a8>)
 80061f8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80061fc:	4910      	ldr	r1, [pc, #64]	; (8006240 <mem_free+0x1cc>)
 80061fe:	4809      	ldr	r0, [pc, #36]	; (8006224 <mem_free+0x1b0>)
 8006200:	f006 fdf8 	bl	800cdf4 <iprintf>
  nmem = ptr_to_mem(mem->next);
 8006204:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006208:	e797      	b.n	800613a <mem_free+0xc6>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800620a:	4b04      	ldr	r3, [pc, #16]	; (800621c <mem_free+0x1a8>)
 800620c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006210:	490c      	ldr	r1, [pc, #48]	; (8006244 <mem_free+0x1d0>)
 8006212:	e76f      	b.n	80060f4 <mem_free+0x80>
 8006214:	24009aa4 	.word	0x24009aa4
 8006218:	24009aa8 	.word	0x24009aa8
 800621c:	0800def8 	.word	0x0800def8
 8006220:	0800df68 	.word	0x0800df68
 8006224:	0800dd68 	.word	0x0800dd68
 8006228:	24009aa0 	.word	0x24009aa0
 800622c:	0800dfac 	.word	0x0800dfac
 8006230:	0800df44 	.word	0x0800df44
 8006234:	0800dfe0 	.word	0x0800dfe0
 8006238:	0800dff8 	.word	0x0800dff8
 800623c:	0800e014 	.word	0x0800e014
 8006240:	0800e030 	.word	0x0800e030
 8006244:	0800df84 	.word	0x0800df84
 8006248:	24009a9c 	.word	0x24009a9c

0800624c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800624c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006250:	1ccb      	adds	r3, r1, #3
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 8006258:	2b0c      	cmp	r3, #12
 800625a:	461d      	mov	r5, r3
 800625c:	bf38      	it	cc
 800625e:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006260:	42a9      	cmp	r1, r5
 8006262:	f200 8081 	bhi.w	8006368 <mem_trim+0x11c>
 8006266:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800626a:	4293      	cmp	r3, r2
 800626c:	d87c      	bhi.n	8006368 <mem_trim+0x11c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800626e:	4f50      	ldr	r7, [pc, #320]	; (80063b0 <mem_trim+0x164>)
 8006270:	4604      	mov	r4, r0
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	4283      	cmp	r3, r0
 8006276:	d842      	bhi.n	80062fe <mem_trim+0xb2>
 8006278:	4a4e      	ldr	r2, [pc, #312]	; (80063b4 <mem_trim+0x168>)
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	4282      	cmp	r2, r0
 800627e:	d93e      	bls.n	80062fe <mem_trim+0xb2>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006280:	f1a4 0808 	sub.w	r8, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006284:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8006288:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800628c:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800628e:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006292:	eba6 0608 	sub.w	r6, r6, r8
 8006296:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006298:	42ae      	cmp	r6, r5
 800629a:	d368      	bcc.n	800636e <mem_trim+0x122>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800629c:	d071      	beq.n	8006382 <mem_trim+0x136>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800629e:	4846      	ldr	r0, [pc, #280]	; (80063b8 <mem_trim+0x16c>)
 80062a0:	f006 fc76 	bl	800cb90 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80062a4:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 80062ae:	f899 1004 	ldrb.w	r1, [r9, #4]
 80062b2:	2900      	cmp	r1, #0
 80062b4:	d138      	bne.n	8006328 <mem_trim+0xdc>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80062b6:	f647 51e8 	movw	r1, #32232	; 0x7de8
 80062ba:	428a      	cmp	r2, r1
 80062bc:	d06f      	beq.n	800639e <mem_trim+0x152>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80062be:	3508      	adds	r5, #8
    if (lfree == mem2) {
 80062c0:	493e      	ldr	r1, [pc, #248]	; (80063bc <mem_trim+0x170>)
    next = mem2->next;
 80062c2:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80062c6:	4445      	add	r5, r8
    if (lfree == mem2) {
 80062c8:	680a      	ldr	r2, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80062ca:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 80062cc:	454a      	cmp	r2, r9
  return (struct mem *)(void *)&ram[ptr];
 80062ce:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 80062d2:	bf08      	it	eq
 80062d4:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 80062d6:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 80062d8:	8010      	strh	r0, [r2, #0]
    mem2->used = 0;
 80062da:	7111      	strb	r1, [r2, #4]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80062dc:	f647 51e8 	movw	r1, #32232	; 0x7de8
    mem2->prev = ptr;
 80062e0:	f8a2 8002 	strh.w	r8, [r2, #2]
    mem->next = ptr2;
 80062e4:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80062e8:	8812      	ldrh	r2, [r2, #0]
 80062ea:	428a      	cmp	r2, r1
 80062ec:	d001      	beq.n	80062f2 <mem_trim+0xa6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80062ee:	441a      	add	r2, r3
 80062f0:	8055      	strh	r5, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80062f2:	4831      	ldr	r0, [pc, #196]	; (80063b8 <mem_trim+0x16c>)
 80062f4:	f006 fc52 	bl	800cb9c <sys_mutex_unlock>
  return rmem;
 80062f8:	4620      	mov	r0, r4
}
 80062fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80062fe:	4b30      	ldr	r3, [pc, #192]	; (80063c0 <mem_trim+0x174>)
 8006300:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006304:	492f      	ldr	r1, [pc, #188]	; (80063c4 <mem_trim+0x178>)
 8006306:	4830      	ldr	r0, [pc, #192]	; (80063c8 <mem_trim+0x17c>)
 8006308:	f006 fd74 	bl	800cdf4 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	42a3      	cmp	r3, r4
 8006310:	d803      	bhi.n	800631a <mem_trim+0xce>
 8006312:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <mem_trim+0x168>)
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	42a2      	cmp	r2, r4
 8006318:	d8b2      	bhi.n	8006280 <mem_trim+0x34>
    MEM_STATS_INC_LOCKED(illegal);
 800631a:	f006 fc59 	bl	800cbd0 <sys_arch_protect>
 800631e:	f006 fc63 	bl	800cbe8 <sys_arch_unprotect>
    return rmem;
 8006322:	4620      	mov	r0, r4
}
 8006324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006328:	f105 0114 	add.w	r1, r5, #20
 800632c:	42b1      	cmp	r1, r6
 800632e:	d8e0      	bhi.n	80062f2 <mem_trim+0xa6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006330:	3508      	adds	r5, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006332:	f647 51e8 	movw	r1, #32232	; 0x7de8
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006336:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006338:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800633a:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800633c:	d024      	beq.n	8006388 <mem_trim+0x13c>
    if (mem2 < lfree) {
 800633e:	481f      	ldr	r0, [pc, #124]	; (80063bc <mem_trim+0x170>)
  return (struct mem *)(void *)&ram[ptr];
 8006340:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8006342:	6806      	ldr	r6, [r0, #0]
    mem2->next = mem->next;
 8006344:	800a      	strh	r2, [r1, #0]
    mem2->used = 0;
 8006346:	2200      	movs	r2, #0
    if (mem2 < lfree) {
 8006348:	428e      	cmp	r6, r1
    mem2->prev = ptr;
 800634a:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem2->used = 0;
 800634e:	710a      	strb	r2, [r1, #4]
      lfree = mem2;
 8006350:	bf88      	it	hi
 8006352:	6001      	strhi	r1, [r0, #0]
    mem->next = ptr2;
 8006354:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006358:	880a      	ldrh	r2, [r1, #0]
 800635a:	f647 51e8 	movw	r1, #32232	; 0x7de8
 800635e:	428a      	cmp	r2, r1
 8006360:	d0c7      	beq.n	80062f2 <mem_trim+0xa6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006362:	4413      	add	r3, r2
 8006364:	805d      	strh	r5, [r3, #2]
 8006366:	e7c4      	b.n	80062f2 <mem_trim+0xa6>
    return NULL;
 8006368:	2000      	movs	r0, #0
}
 800636a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <mem_trim+0x174>)
 8006370:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006374:	4915      	ldr	r1, [pc, #84]	; (80063cc <mem_trim+0x180>)
 8006376:	4814      	ldr	r0, [pc, #80]	; (80063c8 <mem_trim+0x17c>)
 8006378:	f006 fd3c 	bl	800cdf4 <iprintf>
    return NULL;
 800637c:	2000      	movs	r0, #0
}
 800637e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006382:	4620      	mov	r0, r4
 8006384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006388:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <mem_trim+0x174>)
 800638a:	f240 3216 	movw	r2, #790	; 0x316
 800638e:	4910      	ldr	r1, [pc, #64]	; (80063d0 <mem_trim+0x184>)
 8006390:	480d      	ldr	r0, [pc, #52]	; (80063c8 <mem_trim+0x17c>)
 8006392:	f006 fd2f 	bl	800cdf4 <iprintf>
    mem2->next = mem->next;
 8006396:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	e7cf      	b.n	800633e <mem_trim+0xf2>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800639e:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <mem_trim+0x174>)
 80063a0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80063a4:	490a      	ldr	r1, [pc, #40]	; (80063d0 <mem_trim+0x184>)
 80063a6:	4808      	ldr	r0, [pc, #32]	; (80063c8 <mem_trim+0x17c>)
 80063a8:	f006 fd24 	bl	800cdf4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	e786      	b.n	80062be <mem_trim+0x72>
 80063b0:	24009aa4 	.word	0x24009aa4
 80063b4:	24009aa8 	.word	0x24009aa8
 80063b8:	24009aa0 	.word	0x24009aa0
 80063bc:	24009a9c 	.word	0x24009a9c
 80063c0:	0800def8 	.word	0x0800def8
 80063c4:	0800e05c 	.word	0x0800e05c
 80063c8:	0800dd68 	.word	0x0800dd68
 80063cc:	0800e074 	.word	0x0800e074
 80063d0:	0800e094 	.word	0x0800e094

080063d4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d070      	beq.n	80064ba <mem_malloc+0xe6>
{
 80063d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80063dc:	1cc3      	adds	r3, r0, #3
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 80063e4:	2b0c      	cmp	r3, #12
 80063e6:	4698      	mov	r8, r3
 80063e8:	bf38      	it	cc
 80063ea:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80063ee:	4580      	cmp	r8, r0
 80063f0:	d32e      	bcc.n	8006450 <mem_malloc+0x7c>
 80063f2:	f647 54e8 	movw	r4, #32232	; 0x7de8
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	d82a      	bhi.n	8006450 <mem_malloc+0x7c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80063fa:	4e4a      	ldr	r6, [pc, #296]	; (8006524 <mem_malloc+0x150>)
  return (mem_size_t)((u8_t *)mem - ram);
 80063fc:	4d4a      	ldr	r5, [pc, #296]	; (8006528 <mem_malloc+0x154>)
  sys_mutex_lock(&mem_mutex);
 80063fe:	484b      	ldr	r0, [pc, #300]	; (800652c <mem_malloc+0x158>)
 8006400:	f006 fbc6 	bl	800cb90 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006404:	f8d6 c000 	ldr.w	ip, [r6]
  return (mem_size_t)((u8_t *)mem - ram);
 8006408:	6829      	ldr	r1, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800640a:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 800640e:	ebac 0701 	sub.w	r7, ip, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006412:	b2bb      	uxth	r3, r7
 8006414:	4573      	cmp	r3, lr
  return (mem_size_t)((u8_t *)mem - ram);
 8006416:	461f      	mov	r7, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006418:	d214      	bcs.n	8006444 <mem_malloc+0x70>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800641a:	f06f 0907 	mvn.w	r9, #7
 800641e:	e007      	b.n	8006430 <mem_malloc+0x5c>
 8006420:	5ac8      	ldrh	r0, [r1, r3]
 8006422:	4402      	add	r2, r0
 8006424:	4603      	mov	r3, r0
      if ((!mem->used) &&
 8006426:	4542      	cmp	r2, r8
 8006428:	d215      	bcs.n	8006456 <mem_malloc+0x82>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800642a:	4573      	cmp	r3, lr
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800642c:	4607      	mov	r7, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800642e:	d209      	bcs.n	8006444 <mem_malloc+0x70>
  return (struct mem *)(void *)&ram[ptr];
 8006430:	18cc      	adds	r4, r1, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006432:	eba9 0203 	sub.w	r2, r9, r3
      if ((!mem->used) &&
 8006436:	7920      	ldrb	r0, [r4, #4]
 8006438:	2800      	cmp	r0, #0
 800643a:	d0f1      	beq.n	8006420 <mem_malloc+0x4c>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800643c:	5acf      	ldrh	r7, [r1, r3]
 800643e:	463b      	mov	r3, r7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006440:	4573      	cmp	r3, lr
 8006442:	d3f5      	bcc.n	8006430 <mem_malloc+0x5c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8006444:	4839      	ldr	r0, [pc, #228]	; (800652c <mem_malloc+0x158>)
 8006446:	f006 fba9 	bl	800cb9c <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800644a:	2000      	movs	r0, #0
}
 800644c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006450:	2000      	movs	r0, #0
}
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006456:	f108 0314 	add.w	r3, r8, #20
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800645a:	f108 0808 	add.w	r8, r8, #8
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800645e:	429a      	cmp	r2, r3
 8006460:	d32c      	bcc.n	80064bc <mem_malloc+0xe8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006462:	eb07 0908 	add.w	r9, r7, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006466:	f647 53e8 	movw	r3, #32232	; 0x7de8
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800646a:	fa1f f989 	uxth.w	r9, r9
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800646e:	4599      	cmp	r9, r3
 8006470:	d04c      	beq.n	800650c <mem_malloc+0x138>
  return (struct mem *)(void *)&ram[ptr];
 8006472:	eb01 0309 	add.w	r3, r1, r9
          mem2->used = 0;
 8006476:	2200      	movs	r2, #0
 8006478:	711a      	strb	r2, [r3, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800647a:	f647 52e8 	movw	r2, #32232	; 0x7de8
          mem2->next = mem->next;
 800647e:	f821 0009 	strh.w	r0, [r1, r9]
          mem2->prev = ptr;
 8006482:	805f      	strh	r7, [r3, #2]
          mem->used = 1;
 8006484:	2301      	movs	r3, #1
          mem->next = ptr2;
 8006486:	f8a4 9000 	strh.w	r9, [r4]
          mem->used = 1;
 800648a:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800648c:	f831 3009 	ldrh.w	r3, [r1, r9]
 8006490:	4293      	cmp	r3, r2
 8006492:	d002      	beq.n	800649a <mem_malloc+0xc6>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006494:	4419      	add	r1, r3
 8006496:	f8a1 9002 	strh.w	r9, [r1, #2]
        if (mem == lfree) {
 800649a:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 800649c:	4f24      	ldr	r7, [pc, #144]	; (8006530 <mem_malloc+0x15c>)
        if (mem == lfree) {
 800649e:	d027      	beq.n	80064f0 <mem_malloc+0x11c>
        sys_mutex_unlock(&mem_mutex);
 80064a0:	4822      	ldr	r0, [pc, #136]	; (800652c <mem_malloc+0x158>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80064a2:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 80064a4:	f006 fb7a 	bl	800cb9c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	4543      	cmp	r3, r8
 80064ac:	d318      	bcc.n	80064e0 <mem_malloc+0x10c>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80064ae:	07a3      	lsls	r3, r4, #30
 80064b0:	d107      	bne.n	80064c2 <mem_malloc+0xee>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80064b2:	f104 0008 	add.w	r0, r4, #8
}
 80064b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ba:	4770      	bx	lr
          mem->used = 1;
 80064bc:	2301      	movs	r3, #1
 80064be:	7123      	strb	r3, [r4, #4]
 80064c0:	e7eb      	b.n	800649a <mem_malloc+0xc6>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80064c2:	4b1c      	ldr	r3, [pc, #112]	; (8006534 <mem_malloc+0x160>)
 80064c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80064c8:	491b      	ldr	r1, [pc, #108]	; (8006538 <mem_malloc+0x164>)
 80064ca:	481c      	ldr	r0, [pc, #112]	; (800653c <mem_malloc+0x168>)
 80064cc:	f006 fc92 	bl	800cdf4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80064d0:	4b18      	ldr	r3, [pc, #96]	; (8006534 <mem_malloc+0x160>)
 80064d2:	f240 32bd 	movw	r2, #957	; 0x3bd
 80064d6:	491a      	ldr	r1, [pc, #104]	; (8006540 <mem_malloc+0x16c>)
 80064d8:	4818      	ldr	r0, [pc, #96]	; (800653c <mem_malloc+0x168>)
 80064da:	f006 fc8b 	bl	800cdf4 <iprintf>
 80064de:	e7e8      	b.n	80064b2 <mem_malloc+0xde>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80064e0:	4b14      	ldr	r3, [pc, #80]	; (8006534 <mem_malloc+0x160>)
 80064e2:	f240 32b9 	movw	r2, #953	; 0x3b9
 80064e6:	4917      	ldr	r1, [pc, #92]	; (8006544 <mem_malloc+0x170>)
 80064e8:	4814      	ldr	r0, [pc, #80]	; (800653c <mem_malloc+0x168>)
 80064ea:	f006 fc83 	bl	800cdf4 <iprintf>
 80064ee:	e7de      	b.n	80064ae <mem_malloc+0xda>
  return (struct mem *)(void *)&ram[ptr];
 80064f0:	6828      	ldr	r0, [r5, #0]
 80064f2:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	e003      	b.n	8006500 <mem_malloc+0x12c>
  return (struct mem *)(void *)&ram[ptr];
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 80064fc:	791a      	ldrb	r2, [r3, #4]
 80064fe:	b11a      	cbz	r2, 8006508 <mem_malloc+0x134>
 8006500:	4299      	cmp	r1, r3
 8006502:	d1f9      	bne.n	80064f8 <mem_malloc+0x124>
          lfree = cur;
 8006504:	6031      	str	r1, [r6, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006506:	e7cb      	b.n	80064a0 <mem_malloc+0xcc>
          lfree = cur;
 8006508:	6033      	str	r3, [r6, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800650a:	e7c9      	b.n	80064a0 <mem_malloc+0xcc>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800650c:	490e      	ldr	r1, [pc, #56]	; (8006548 <mem_malloc+0x174>)
 800650e:	f240 3287 	movw	r2, #903	; 0x387
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <mem_malloc+0x160>)
 8006514:	4809      	ldr	r0, [pc, #36]	; (800653c <mem_malloc+0x168>)
 8006516:	f006 fc6d 	bl	800cdf4 <iprintf>
          mem2->next = mem->next;
 800651a:	8820      	ldrh	r0, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 800651c:	6829      	ldr	r1, [r5, #0]
        if (mem == lfree) {
 800651e:	f8d6 c000 	ldr.w	ip, [r6]
 8006522:	e7a6      	b.n	8006472 <mem_malloc+0x9e>
 8006524:	24009a9c 	.word	0x24009a9c
 8006528:	24009aa4 	.word	0x24009aa4
 800652c:	24009aa0 	.word	0x24009aa0
 8006530:	24009aa8 	.word	0x24009aa8
 8006534:	0800def8 	.word	0x0800def8
 8006538:	0800e0d8 	.word	0x0800e0d8
 800653c:	0800dd68 	.word	0x0800dd68
 8006540:	0800e108 	.word	0x0800e108
 8006544:	0800e0a8 	.word	0x0800e0a8
 8006548:	0800e094 	.word	0x0800e094

0800654c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006550:	f006 fb3e 	bl	800cbd0 <sys_arch_protect>

  memp = *desc->tab;
 8006554:	68a3      	ldr	r3, [r4, #8]
 8006556:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006558:	b18c      	cbz	r4, 800657e <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	4605      	mov	r5, r0
 800655e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006560:	07a3      	lsls	r3, r4, #30
 8006562:	d104      	bne.n	800656e <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006564:	4628      	mov	r0, r5
 8006566:	f006 fb3f 	bl	800cbe8 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800656a:	4620      	mov	r0, r4
 800656c:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <do_memp_malloc_pool+0x3c>)
 8006570:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006574:	4905      	ldr	r1, [pc, #20]	; (800658c <do_memp_malloc_pool+0x40>)
 8006576:	4806      	ldr	r0, [pc, #24]	; (8006590 <do_memp_malloc_pool+0x44>)
 8006578:	f006 fc3c 	bl	800cdf4 <iprintf>
 800657c:	e7f2      	b.n	8006564 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 800657e:	f006 fb33 	bl	800cbe8 <sys_arch_unprotect>
}
 8006582:	4620      	mov	r0, r4
 8006584:	bd38      	pop	{r3, r4, r5, pc}
 8006586:	bf00      	nop
 8006588:	0800e12c 	.word	0x0800e12c
 800658c:	0800e15c 	.word	0x0800e15c
 8006590:	0800dd68 	.word	0x0800dd68

08006594 <memp_init_pool>:
{
 8006594:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 8006596:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 8006598:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800659a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800659e:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 80065a0:	b17c      	cbz	r4, 80065c2 <memp_init_pool+0x2e>
 80065a2:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80065a4:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 80065a8:	460a      	mov	r2, r1
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	e000      	b.n	80065b2 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80065b0:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 80065b2:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80065b4:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80065b6:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 80065ba:	4619      	mov	r1, r3
 80065bc:	42a2      	cmp	r2, r4
 80065be:	d1f7      	bne.n	80065b0 <memp_init_pool+0x1c>
 80065c0:	602b      	str	r3, [r5, #0]
}
 80065c2:	bc30      	pop	{r4, r5}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop

080065c8 <memp_init>:
{
 80065c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ca:	f8df e054 	ldr.w	lr, [pc, #84]	; 8006620 <memp_init+0x58>
 80065ce:	2404      	movs	r4, #4
 80065d0:	4b10      	ldr	r3, [pc, #64]	; (8006614 <memp_init+0x4c>)
  *desc->tab = NULL;
 80065d2:	2600      	movs	r6, #0
{
 80065d4:	4d10      	ldr	r5, [pc, #64]	; (8006618 <memp_init+0x50>)
 80065d6:	f10e 0730 	add.w	r7, lr, #48	; 0x30
 80065da:	4a10      	ldr	r2, [pc, #64]	; (800661c <memp_init+0x54>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80065dc:	3303      	adds	r3, #3
  *desc->tab = NULL;
 80065de:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80065e0:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80065e4:	b16c      	cbz	r4, 8006602 <memp_init+0x3a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80065e6:	2100      	movs	r1, #0
 80065e8:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 80065ec:	460a      	mov	r2, r1
 80065ee:	e000      	b.n	80065f2 <memp_init+0x2a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80065f0:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 80065f2:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80065f4:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80065f6:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 80065fa:	4619      	mov	r1, r3
 80065fc:	42a2      	cmp	r2, r4
 80065fe:	d1f7      	bne.n	80065f0 <memp_init+0x28>
 8006600:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006602:	4577      	cmp	r7, lr
 8006604:	d005      	beq.n	8006612 <memp_init+0x4a>
    memp_init_pool(memp_pools[i]);
 8006606:	f85e 2f04 	ldr.w	r2, [lr, #4]!
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800660a:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800660e:	8854      	ldrh	r4, [r2, #2]
 8006610:	e7e4      	b.n	80065dc <memp_init+0x14>
}
 8006612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006614:	24010480 	.word	0x24010480
 8006618:	24010534 	.word	0x24010534
 800661c:	0800e280 	.word	0x0800e280
 8006620:	0800e28c 	.word	0x0800e28c

08006624 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006624:	b108      	cbz	r0, 800662a <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006626:	f7ff bf91 	b.w	800654c <do_memp_malloc_pool>
{
 800662a:	b510      	push	{r4, lr}
 800662c:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800662e:	4b04      	ldr	r3, [pc, #16]	; (8006640 <memp_malloc_pool+0x1c>)
 8006630:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006634:	4903      	ldr	r1, [pc, #12]	; (8006644 <memp_malloc_pool+0x20>)
 8006636:	4804      	ldr	r0, [pc, #16]	; (8006648 <memp_malloc_pool+0x24>)
 8006638:	f006 fbdc 	bl	800cdf4 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800663c:	4620      	mov	r0, r4
 800663e:	bd10      	pop	{r4, pc}
 8006640:	0800e12c 	.word	0x0800e12c
 8006644:	0800e180 	.word	0x0800e180
 8006648:	0800dd68 	.word	0x0800dd68

0800664c <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800664c:	280c      	cmp	r0, #12
{
 800664e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006650:	d806      	bhi.n	8006660 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006652:	4b08      	ldr	r3, [pc, #32]	; (8006674 <memp_malloc+0x28>)
 8006654:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 8006658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800665c:	f7ff bf76 	b.w	800654c <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006660:	4b05      	ldr	r3, [pc, #20]	; (8006678 <memp_malloc+0x2c>)
 8006662:	f240 1257 	movw	r2, #343	; 0x157
 8006666:	4905      	ldr	r1, [pc, #20]	; (800667c <memp_malloc+0x30>)
 8006668:	4805      	ldr	r0, [pc, #20]	; (8006680 <memp_malloc+0x34>)
 800666a:	f006 fbc3 	bl	800cdf4 <iprintf>
}
 800666e:	2000      	movs	r0, #0
 8006670:	bd08      	pop	{r3, pc}
 8006672:	bf00      	nop
 8006674:	0800e28c 	.word	0x0800e28c
 8006678:	0800e12c 	.word	0x0800e12c
 800667c:	0800e194 	.word	0x0800e194
 8006680:	0800dd68 	.word	0x0800dd68

08006684 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006684:	b180      	cbz	r0, 80066a8 <memp_free_pool+0x24>
{
 8006686:	b570      	push	{r4, r5, r6, lr}
 8006688:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800668a:	b161      	cbz	r1, 80066a6 <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800668c:	078b      	lsls	r3, r1, #30
 800668e:	4605      	mov	r5, r0
 8006690:	d111      	bne.n	80066b6 <memp_free_pool+0x32>
  SYS_ARCH_PROTECT(old_level);
 8006692:	f006 fa9d 	bl	800cbd0 <sys_arch_protect>
  memp->next = *desc->tab;
 8006696:	68ab      	ldr	r3, [r5, #8]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800669c:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 800669e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80066a2:	f006 baa1 	b.w	800cbe8 <sys_arch_unprotect>
}
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <memp_free_pool+0x44>)
 80066aa:	f240 1295 	movw	r2, #405	; 0x195
 80066ae:	4907      	ldr	r1, [pc, #28]	; (80066cc <memp_free_pool+0x48>)
 80066b0:	4807      	ldr	r0, [pc, #28]	; (80066d0 <memp_free_pool+0x4c>)
 80066b2:	f006 bb9f 	b.w	800cdf4 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 80066b6:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <memp_free_pool+0x44>)
 80066b8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80066bc:	4905      	ldr	r1, [pc, #20]	; (80066d4 <memp_free_pool+0x50>)
 80066be:	4804      	ldr	r0, [pc, #16]	; (80066d0 <memp_free_pool+0x4c>)
 80066c0:	f006 fb98 	bl	800cdf4 <iprintf>
 80066c4:	e7e5      	b.n	8006692 <memp_free_pool+0xe>
 80066c6:	bf00      	nop
 80066c8:	0800e12c 	.word	0x0800e12c
 80066cc:	0800e180 	.word	0x0800e180
 80066d0:	0800dd68 	.word	0x0800dd68
 80066d4:	0800e1b4 	.word	0x0800e1b4

080066d8 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80066d8:	280c      	cmp	r0, #12
 80066da:	d812      	bhi.n	8006702 <memp_free+0x2a>
{
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	460c      	mov	r4, r1

  if (mem == NULL) {
 80066e0:	b171      	cbz	r1, 8006700 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80066e2:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <memp_free+0x48>)
 80066e4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 80066e8:	078b      	lsls	r3, r1, #30
 80066ea:	d111      	bne.n	8006710 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 80066ec:	f006 fa70 	bl	800cbd0 <sys_arch_protect>
  memp->next = *desc->tab;
 80066f0:	68ab      	ldr	r3, [r5, #8]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80066f6:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80066f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80066fc:	f006 ba74 	b.w	800cbe8 <sys_arch_unprotect>
}
 8006700:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <memp_free+0x4c>)
 8006704:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006708:	4907      	ldr	r1, [pc, #28]	; (8006728 <memp_free+0x50>)
 800670a:	4808      	ldr	r0, [pc, #32]	; (800672c <memp_free+0x54>)
 800670c:	f006 bb72 	b.w	800cdf4 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <memp_free+0x4c>)
 8006712:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006716:	4906      	ldr	r1, [pc, #24]	; (8006730 <memp_free+0x58>)
 8006718:	4804      	ldr	r0, [pc, #16]	; (800672c <memp_free+0x54>)
 800671a:	f006 fb6b 	bl	800cdf4 <iprintf>
 800671e:	e7e5      	b.n	80066ec <memp_free+0x14>
 8006720:	0800e28c 	.word	0x0800e28c
 8006724:	0800e12c 	.word	0x0800e12c
 8006728:	0800e1d4 	.word	0x0800e1d4
 800672c:	0800dd68 	.word	0x0800dd68
 8006730:	0800e1b4 	.word	0x0800e1b4

08006734 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8006734:	f06f 000b 	mvn.w	r0, #11
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop

0800673c <netif_issue_reports>:
{
 800673c:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800673e:	4604      	mov	r4, r0
 8006740:	b150      	cbz	r0, 8006758 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006742:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8006746:	f003 0205 	and.w	r2, r3, #5
 800674a:	2a05      	cmp	r2, #5
 800674c:	d103      	bne.n	8006756 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800674e:	6862      	ldr	r2, [r4, #4]
 8006750:	b10a      	cbz	r2, 8006756 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006752:	071b      	lsls	r3, r3, #28
 8006754:	d408      	bmi.n	8006768 <netif_issue_reports+0x2c>
}
 8006756:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <netif_issue_reports+0x38>)
 800675a:	f240 326d 	movw	r2, #877	; 0x36d
 800675e:	4906      	ldr	r1, [pc, #24]	; (8006778 <netif_issue_reports+0x3c>)
 8006760:	4806      	ldr	r0, [pc, #24]	; (800677c <netif_issue_reports+0x40>)
 8006762:	f006 fb47 	bl	800cdf4 <iprintf>
 8006766:	e7ec      	b.n	8006742 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 8006768:	1d21      	adds	r1, r4, #4
 800676a:	4620      	mov	r0, r4
}
 800676c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8006770:	f005 b9f0 	b.w	800bb54 <etharp_request>
 8006774:	0800e2c0 	.word	0x0800e2c0
 8006778:	0800e2f4 	.word	0x0800e2f4
 800677c:	0800dd68 	.word	0x0800dd68

08006780 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	4605      	mov	r5, r0
 8006784:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006786:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8006788:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800678a:	b1b9      	cbz	r1, 80067bc <netif_do_set_ipaddr.isra.0+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800678c:	686b      	ldr	r3, [r5, #4]
 800678e:	6822      	ldr	r2, [r4, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d101      	bne.n	8006798 <netif_do_set_ipaddr.isra.0+0x18>
}
 8006794:	b002      	add	sp, #8
 8006796:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006798:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800679a:	4630      	mov	r0, r6
 800679c:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 800679e:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80067a0:	f001 fe20 	bl	80083e4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80067a4:	a901      	add	r1, sp, #4
 80067a6:	4630      	mov	r0, r6
 80067a8:	f004 fd86 	bl	800b2b8 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80067ac:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80067ae:	2101      	movs	r1, #1
 80067b0:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80067b2:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80067b4:	f7ff ffc2 	bl	800673c <netif_issue_reports>
}
 80067b8:	b002      	add	sp, #8
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80067bc:	4b03      	ldr	r3, [pc, #12]	; (80067cc <netif_do_set_ipaddr.isra.0+0x4c>)
 80067be:	f240 12cb 	movw	r2, #459	; 0x1cb
 80067c2:	4903      	ldr	r1, [pc, #12]	; (80067d0 <netif_do_set_ipaddr.isra.0+0x50>)
 80067c4:	4803      	ldr	r0, [pc, #12]	; (80067d4 <netif_do_set_ipaddr.isra.0+0x54>)
 80067c6:	f006 fb15 	bl	800cdf4 <iprintf>
 80067ca:	e7df      	b.n	800678c <netif_do_set_ipaddr.isra.0+0xc>
 80067cc:	0800e2c0 	.word	0x0800e2c0
 80067d0:	0800e318 	.word	0x0800e318
 80067d4:	0800dd68 	.word	0x0800dd68

080067d8 <netif_init>:
}
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop

080067dc <netif_set_addr>:
{
 80067dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067de:	460d      	mov	r5, r1
 80067e0:	b083      	sub	sp, #12
 80067e2:	4604      	mov	r4, r0
 80067e4:	4617      	mov	r7, r2
 80067e6:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 80067e8:	f7fc fe4e 	bl	8003488 <sys_check_core_locking>
  if (ipaddr == NULL) {
 80067ec:	b1fd      	cbz	r5, 800682e <netif_set_addr+0x52>
  if (netmask == NULL) {
 80067ee:	b187      	cbz	r7, 8006812 <netif_set_addr+0x36>
  if (gw == NULL) {
 80067f0:	b196      	cbz	r6, 8006818 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 80067f2:	682b      	ldr	r3, [r5, #0]
 80067f4:	b1a3      	cbz	r3, 8006820 <netif_set_addr+0x44>
 80067f6:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68a1      	ldr	r1, [r4, #8]
 80067fc:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80067fe:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006800:	bf18      	it	ne
 8006802:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006808:	bf18      	it	ne
 800680a:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800680c:	b19a      	cbz	r2, 8006836 <netif_set_addr+0x5a>
}
 800680e:	b003      	add	sp, #12
 8006810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 8006812:	4f0c      	ldr	r7, [pc, #48]	; (8006844 <netif_set_addr+0x68>)
  if (gw == NULL) {
 8006814:	2e00      	cmp	r6, #0
 8006816:	d1ec      	bne.n	80067f2 <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 8006818:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 800681a:	4e0a      	ldr	r6, [pc, #40]	; (8006844 <netif_set_addr+0x68>)
  remove = ip4_addr_isany(ipaddr);
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1ea      	bne.n	80067f6 <netif_set_addr+0x1a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006820:	aa01      	add	r2, sp, #4
 8006822:	4629      	mov	r1, r5
 8006824:	4620      	mov	r0, r4
 8006826:	f7ff ffab 	bl	8006780 <netif_do_set_ipaddr.isra.0>
 800682a:	2201      	movs	r2, #1
 800682c:	e7e4      	b.n	80067f8 <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 800682e:	4d05      	ldr	r5, [pc, #20]	; (8006844 <netif_set_addr+0x68>)
  if (netmask == NULL) {
 8006830:	2f00      	cmp	r7, #0
 8006832:	d1dd      	bne.n	80067f0 <netif_set_addr+0x14>
 8006834:	e7ed      	b.n	8006812 <netif_set_addr+0x36>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006836:	aa01      	add	r2, sp, #4
 8006838:	4629      	mov	r1, r5
 800683a:	4620      	mov	r0, r4
 800683c:	f7ff ffa0 	bl	8006780 <netif_do_set_ipaddr.isra.0>
}
 8006840:	b003      	add	sp, #12
 8006842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006844:	0800fa74 	.word	0x0800fa74

08006848 <netif_add>:
{
 8006848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	4606      	mov	r6, r0
 800684e:	460c      	mov	r4, r1
 8006850:	4615      	mov	r5, r2
 8006852:	461f      	mov	r7, r3
 8006854:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 8006858:	f7fc fe16 	bl	8003488 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800685c:	2e00      	cmp	r6, #0
 800685e:	f000 8083 	beq.w	8006968 <netif_add+0x120>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006862:	f1b8 0f00 	cmp.w	r8, #0
 8006866:	f000 8088 	beq.w	800697a <netif_add+0x132>
  if (ipaddr == NULL) {
 800686a:	2c00      	cmp	r4, #0
 800686c:	d070      	beq.n	8006950 <netif_add+0x108>
  if (netmask == NULL) {
 800686e:	2d00      	cmp	r5, #0
 8006870:	d069      	beq.n	8006946 <netif_add+0xfe>
  if (gw == NULL) {
 8006872:	2f00      	cmp	r7, #0
 8006874:	d06a      	beq.n	800694c <netif_add+0x104>
  netif->state = state;
 8006876:	980a      	ldr	r0, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006878:	4621      	mov	r1, r4
  netif->num = netif_num;
 800687a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80069a8 <netif_add+0x160>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800687e:	2400      	movs	r4, #0
  netif->state = state;
 8006880:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006882:	463b      	mov	r3, r7
  netif->input = input;
 8006884:	980c      	ldr	r0, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006886:	462a      	mov	r2, r5
  ip_addr_set_zero_ip4(&netif->gw);
 8006888:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 800688a:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 800688c:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 8006890:	84b4      	strh	r4, [r6, #36]	; 0x24
  netif->num = netif_num;
 8006892:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->output = netif_null_output_ip4;
 8006896:	483d      	ldr	r0, [pc, #244]	; (800698c <netif_add+0x144>)
  netif->flags = 0;
 8006898:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  netif->output = netif_null_output_ip4;
 800689c:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800689e:	4630      	mov	r0, r6
  netif->link_callback = NULL;
 80068a0:	61f4      	str	r4, [r6, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 80068a2:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80068a6:	f7ff ff99 	bl	80067dc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80068aa:	4630      	mov	r0, r6
 80068ac:	47c0      	blx	r8
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d157      	bne.n	8006962 <netif_add+0x11a>
      if (netif->num == 255) {
 80068b2:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 80068b6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80069ac <netif_add+0x164>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80068ba:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 800699c <netif_add+0x154>
 80068be:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80069b0 <netif_add+0x168>
 80068c2:	4f33      	ldr	r7, [pc, #204]	; (8006990 <netif_add+0x148>)
      if (netif->num == 255) {
 80068c4:	2aff      	cmp	r2, #255	; 0xff
 80068c6:	d102      	bne.n	80068ce <netif_add+0x86>
        netif->num = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80068ce:	f8d8 4000 	ldr.w	r4, [r8]
 80068d2:	2c00      	cmp	r4, #0
 80068d4:	d042      	beq.n	800695c <netif_add+0x114>
      num_netifs = 0;
 80068d6:	2500      	movs	r5, #0
 80068d8:	e007      	b.n	80068ea <netif_add+0xa2>
        if (netif2->num == netif->num) {
 80068da:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80068de:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d014      	beq.n	8006910 <netif_add+0xc8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80068e6:	6824      	ldr	r4, [r4, #0]
 80068e8:	b1fc      	cbz	r4, 800692a <netif_add+0xe2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80068ea:	42b4      	cmp	r4, r6
        num_netifs++;
 80068ec:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 80068f0:	d013      	beq.n	800691a <netif_add+0xd2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80068f2:	2dff      	cmp	r5, #255	; 0xff
 80068f4:	ddf1      	ble.n	80068da <netif_add+0x92>
 80068f6:	465b      	mov	r3, fp
 80068f8:	f240 128d 	movw	r2, #397	; 0x18d
 80068fc:	4925      	ldr	r1, [pc, #148]	; (8006994 <netif_add+0x14c>)
 80068fe:	4638      	mov	r0, r7
 8006900:	f006 fa78 	bl	800cdf4 <iprintf>
        if (netif2->num == netif->num) {
 8006904:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006908:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800690c:	429a      	cmp	r2, r3
 800690e:	d1ea      	bne.n	80068e6 <netif_add+0x9e>
          netif->num++;
 8006910:	3201      	adds	r2, #1
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 8006918:	e7d4      	b.n	80068c4 <netif_add+0x7c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800691a:	465b      	mov	r3, fp
 800691c:	f240 128b 	movw	r2, #395	; 0x18b
 8006920:	4649      	mov	r1, r9
 8006922:	4638      	mov	r0, r7
 8006924:	f006 fa66 	bl	800cdf4 <iprintf>
 8006928:	e7e3      	b.n	80068f2 <netif_add+0xaa>
  netif->next = netif_list;
 800692a:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 800692e:	2bfe      	cmp	r3, #254	; 0xfe
 8006930:	d012      	beq.n	8006958 <netif_add+0x110>
    netif_num = (u8_t)(netif->num + 1);
 8006932:	3301      	adds	r3, #1
 8006934:	b2db      	uxtb	r3, r3
  return netif;
 8006936:	4630      	mov	r0, r6
  netif->next = netif_list;
 8006938:	6034      	str	r4, [r6, #0]
 800693a:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 800693e:	f8c8 6000 	str.w	r6, [r8]
}
 8006942:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006946:	4d14      	ldr	r5, [pc, #80]	; (8006998 <netif_add+0x150>)
  if (gw == NULL) {
 8006948:	2f00      	cmp	r7, #0
 800694a:	d194      	bne.n	8006876 <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800694c:	4f12      	ldr	r7, [pc, #72]	; (8006998 <netif_add+0x150>)
 800694e:	e792      	b.n	8006876 <netif_add+0x2e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006950:	4c11      	ldr	r4, [pc, #68]	; (8006998 <netif_add+0x150>)
  if (netmask == NULL) {
 8006952:	2d00      	cmp	r5, #0
 8006954:	d18d      	bne.n	8006872 <netif_add+0x2a>
 8006956:	e7f6      	b.n	8006946 <netif_add+0xfe>
    netif_num = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	e7ec      	b.n	8006936 <netif_add+0xee>
  if (netif->num == 254) {
 800695c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8006960:	e7e5      	b.n	800692e <netif_add+0xe6>
    return NULL;
 8006962:	4620      	mov	r0, r4
}
 8006964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <netif_add+0x154>)
 800696a:	f240 1227 	movw	r2, #295	; 0x127
 800696e:	490c      	ldr	r1, [pc, #48]	; (80069a0 <netif_add+0x158>)
 8006970:	4807      	ldr	r0, [pc, #28]	; (8006990 <netif_add+0x148>)
 8006972:	f006 fa3f 	bl	800cdf4 <iprintf>
 8006976:	4630      	mov	r0, r6
 8006978:	e7e3      	b.n	8006942 <netif_add+0xfa>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800697a:	4b08      	ldr	r3, [pc, #32]	; (800699c <netif_add+0x154>)
 800697c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006980:	4908      	ldr	r1, [pc, #32]	; (80069a4 <netif_add+0x15c>)
 8006982:	4803      	ldr	r0, [pc, #12]	; (8006990 <netif_add+0x148>)
 8006984:	f006 fa36 	bl	800cdf4 <iprintf>
 8006988:	4640      	mov	r0, r8
 800698a:	e7da      	b.n	8006942 <netif_add+0xfa>
 800698c:	08006735 	.word	0x08006735
 8006990:	0800dd68 	.word	0x0800dd68
 8006994:	0800e37c 	.word	0x0800e37c
 8006998:	0800fa74 	.word	0x0800fa74
 800699c:	0800e2c0 	.word	0x0800e2c0
 80069a0:	0800e328 	.word	0x0800e328
 80069a4:	0800e344 	.word	0x0800e344
 80069a8:	24010540 	.word	0x24010540
 80069ac:	2401053c 	.word	0x2401053c
 80069b0:	0800e368 	.word	0x0800e368

080069b4 <netif_set_default>:
{
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80069b8:	f7fc fd66 	bl	8003488 <sys_check_core_locking>
  netif_default = netif;
 80069bc:	4b01      	ldr	r3, [pc, #4]	; (80069c4 <netif_set_default+0x10>)
 80069be:	601c      	str	r4, [r3, #0]
}
 80069c0:	bd10      	pop	{r4, pc}
 80069c2:	bf00      	nop
 80069c4:	24010538 	.word	0x24010538

080069c8 <netif_set_up>:
{
 80069c8:	b510      	push	{r4, lr}
 80069ca:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80069cc:	f7fc fd5c 	bl	8003488 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80069d0:	b174      	cbz	r4, 80069f0 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80069d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80069d6:	07da      	lsls	r2, r3, #31
 80069d8:	d500      	bpl.n	80069dc <netif_set_up+0x14>
}
 80069da:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 80069dc:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80069e0:	4620      	mov	r0, r4
 80069e2:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 80069e4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80069e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80069ec:	f7ff bea6 	b.w	800673c <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80069f0:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <netif_set_up+0x3c>)
 80069f2:	f44f 7254 	mov.w	r2, #848	; 0x350
 80069f6:	4904      	ldr	r1, [pc, #16]	; (8006a08 <netif_set_up+0x40>)
 80069f8:	4804      	ldr	r0, [pc, #16]	; (8006a0c <netif_set_up+0x44>)
}
 80069fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80069fe:	f006 b9f9 	b.w	800cdf4 <iprintf>
 8006a02:	bf00      	nop
 8006a04:	0800e2c0 	.word	0x0800e2c0
 8006a08:	0800e3ac 	.word	0x0800e3ac
 8006a0c:	0800dd68 	.word	0x0800dd68

08006a10 <netif_set_down>:
{
 8006a10:	b510      	push	{r4, lr}
 8006a12:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8006a14:	f7fc fd38 	bl	8003488 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006a18:	b17c      	cbz	r4, 8006a3a <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 8006a1a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8006a1e:	07da      	lsls	r2, r3, #31
 8006a20:	d505      	bpl.n	8006a2e <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006a22:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006a26:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006a28:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006a2c:	d400      	bmi.n	8006a30 <netif_set_down+0x20>
}
 8006a2e:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8006a30:	4620      	mov	r0, r4
}
 8006a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 8006a36:	f004 be53 	b.w	800b6e0 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006a3a:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <netif_set_down+0x3c>)
 8006a3c:	f240 329b 	movw	r2, #923	; 0x39b
 8006a40:	4903      	ldr	r1, [pc, #12]	; (8006a50 <netif_set_down+0x40>)
 8006a42:	4804      	ldr	r0, [pc, #16]	; (8006a54 <netif_set_down+0x44>)
}
 8006a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006a48:	f006 b9d4 	b.w	800cdf4 <iprintf>
 8006a4c:	0800e2c0 	.word	0x0800e2c0
 8006a50:	0800e3c8 	.word	0x0800e3c8
 8006a54:	0800dd68 	.word	0x0800dd68

08006a58 <netif_set_link_up>:
{
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8006a5c:	f7fc fd14 	bl	8003488 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006a60:	b19c      	cbz	r4, 8006a8a <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006a62:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8006a66:	075a      	lsls	r2, r3, #29
 8006a68:	d500      	bpl.n	8006a6c <netif_set_link_up+0x14>
}
 8006a6a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006a6c:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006a70:	2103      	movs	r1, #3
 8006a72:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006a74:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006a78:	f7ff fe60 	bl	800673c <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8006a7c:	69e3      	ldr	r3, [r4, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f3      	beq.n	8006a6a <netif_set_link_up+0x12>
 8006a82:	4620      	mov	r0, r4
}
 8006a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8006a88:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006a8a:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <netif_set_link_up+0x44>)
 8006a8c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006a90:	4903      	ldr	r1, [pc, #12]	; (8006aa0 <netif_set_link_up+0x48>)
 8006a92:	4804      	ldr	r0, [pc, #16]	; (8006aa4 <netif_set_link_up+0x4c>)
}
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006a98:	f006 b9ac 	b.w	800cdf4 <iprintf>
 8006a9c:	0800e2c0 	.word	0x0800e2c0
 8006aa0:	0800e3e8 	.word	0x0800e3e8
 8006aa4:	0800dd68 	.word	0x0800dd68

08006aa8 <netif_set_link_down>:
{
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8006aac:	f7fc fcec 	bl	8003488 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006ab0:	b174      	cbz	r4, 8006ad0 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006ab2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8006ab6:	075a      	lsls	r2, r3, #29
 8006ab8:	d509      	bpl.n	8006ace <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006aba:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 8006abe:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006ac0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8006ac4:	b11a      	cbz	r2, 8006ace <netif_set_link_down+0x26>
 8006ac6:	4620      	mov	r0, r4
}
 8006ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8006acc:	4710      	bx	r2
}
 8006ace:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006ad0:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <netif_set_link_down+0x3c>)
 8006ad2:	f240 4206 	movw	r2, #1030	; 0x406
 8006ad6:	4904      	ldr	r1, [pc, #16]	; (8006ae8 <netif_set_link_down+0x40>)
 8006ad8:	4804      	ldr	r0, [pc, #16]	; (8006aec <netif_set_link_down+0x44>)
}
 8006ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006ade:	f006 b989 	b.w	800cdf4 <iprintf>
 8006ae2:	bf00      	nop
 8006ae4:	0800e2c0 	.word	0x0800e2c0
 8006ae8:	0800e40c 	.word	0x0800e40c
 8006aec:	0800dd68 	.word	0x0800dd68

08006af0 <netif_set_link_callback>:
{
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4604      	mov	r4, r0
 8006af4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8006af6:	f7fc fcc7 	bl	8003488 <sys_check_core_locking>
  if (netif) {
 8006afa:	b104      	cbz	r4, 8006afe <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 8006afc:	61e5      	str	r5, [r4, #28]
}
 8006afe:	bd38      	pop	{r3, r4, r5, pc}

08006b00 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006b00:	b510      	push	{r4, lr}
 8006b02:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8006b04:	f7fc fcc0 	bl	8003488 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8006b08:	b164      	cbz	r4, 8006b24 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 8006b0a:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <netif_get_by_index+0x28>)
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	b910      	cbnz	r0, 8006b16 <netif_get_by_index+0x16>
 8006b10:	e007      	b.n	8006b22 <netif_get_by_index+0x22>
 8006b12:	6800      	ldr	r0, [r0, #0]
 8006b14:	b128      	cbz	r0, 8006b22 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 8006b16:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	d1f7      	bne.n	8006b12 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 8006b22:	bd10      	pop	{r4, pc}
  return NULL;
 8006b24:	4620      	mov	r0, r4
}
 8006b26:	bd10      	pop	{r4, pc}
 8006b28:	2401053c 	.word	0x2401053c

08006b2c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8006b2c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006b2e:	f006 f84f 	bl	800cbd0 <sys_arch_protect>
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <pbuf_free_ooseq_callback+0x2c>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	f006 f856 	bl	800cbe8 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b3c:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <pbuf_free_ooseq_callback+0x30>)
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	b910      	cbnz	r0, 8006b48 <pbuf_free_ooseq_callback+0x1c>
 8006b42:	e008      	b.n	8006b56 <pbuf_free_ooseq_callback+0x2a>
 8006b44:	68c0      	ldr	r0, [r0, #12]
 8006b46:	b130      	cbz	r0, 8006b56 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 8006b48:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0fa      	beq.n	8006b44 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8006b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8006b52:	f001 bc71 	b.w	8008438 <tcp_free_ooseq>
}
 8006b56:	bd08      	pop	{r3, pc}
 8006b58:	24010541 	.word	0x24010541
 8006b5c:	24010544 	.word	0x24010544

08006b60 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8006b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 8006b64:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b66:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006c8c <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 8006b6e:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006b70:	8944      	ldrh	r4, [r0, #10]
 8006b72:	894b      	ldrh	r3, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b74:	f8df b128 	ldr.w	fp, [pc, #296]	; 8006ca0 <pbuf_copy.part.0+0x140>
 8006b78:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8006c94 <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006b7c:	1be4      	subs	r4, r4, r7
 8006b7e:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006b80:	6868      	ldr	r0, [r5, #4]
 8006b82:	429c      	cmp	r4, r3
 8006b84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006b88:	4438      	add	r0, r7
 8006b8a:	bf28      	it	cs
 8006b8c:	461c      	movcs	r4, r3
 8006b8e:	4431      	add	r1, r6
 8006b90:	4622      	mov	r2, r4
    offset_to += len;
 8006b92:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006b94:	f006 fa5f 	bl	800d056 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b98:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8006b9a:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b9c:	429f      	cmp	r7, r3
 8006b9e:	d838      	bhi.n	8006c12 <pbuf_copy.part.0+0xb2>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006ba0:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006ba4:	429e      	cmp	r6, r3
 8006ba6:	d82a      	bhi.n	8006bfe <pbuf_copy.part.0+0x9e>
    if (offset_from >= p_from->len) {
 8006ba8:	429e      	cmp	r6, r3
 8006baa:	d318      	bcc.n	8006bde <pbuf_copy.part.0+0x7e>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8006bac:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8006bae:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 8006bb2:	429f      	cmp	r7, r3
 8006bb4:	d04c      	beq.n	8006c50 <pbuf_copy.part.0+0xf0>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006bb6:	f1b8 0f00 	cmp.w	r8, #0
 8006bba:	d145      	bne.n	8006c48 <pbuf_copy.part.0+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006bbc:	892a      	ldrh	r2, [r5, #8]
 8006bbe:	896b      	ldrh	r3, [r5, #10]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d14d      	bne.n	8006c60 <pbuf_copy.part.0+0x100>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006bc4:	6828      	ldr	r0, [r5, #0]
 8006bc6:	b140      	cbz	r0, 8006bda <pbuf_copy.part.0+0x7a>
 8006bc8:	4b30      	ldr	r3, [pc, #192]	; (8006c8c <pbuf_copy.part.0+0x12c>)
 8006bca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006bce:	4930      	ldr	r1, [pc, #192]	; (8006c90 <pbuf_copy.part.0+0x130>)
 8006bd0:	4830      	ldr	r0, [pc, #192]	; (8006c94 <pbuf_copy.part.0+0x134>)
 8006bd2:	f006 f90f 	bl	800cdf4 <iprintf>
 8006bd6:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8006bda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 8006bde:	896a      	ldrh	r2, [r5, #10]
 8006be0:	4297      	cmp	r7, r2
 8006be2:	d040      	beq.n	8006c66 <pbuf_copy.part.0+0x106>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006be4:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d01a      	beq.n	8006c22 <pbuf_copy.part.0+0xc2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006bec:	896c      	ldrh	r4, [r5, #10]
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	d0c4      	beq.n	8006b7c <pbuf_copy.part.0+0x1c>
 8006bf2:	892b      	ldrh	r3, [r5, #8]
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d045      	beq.n	8006c84 <pbuf_copy.part.0+0x124>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006bf8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006bfc:	e7be      	b.n	8006b7c <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006bfe:	4653      	mov	r3, sl
 8006c00:	f240 32da 	movw	r2, #986	; 0x3da
 8006c04:	4924      	ldr	r1, [pc, #144]	; (8006c98 <pbuf_copy.part.0+0x138>)
 8006c06:	4648      	mov	r0, r9
 8006c08:	f006 f8f4 	bl	800cdf4 <iprintf>
    if (offset_from >= p_from->len) {
 8006c0c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006c10:	e7ca      	b.n	8006ba8 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006c12:	4653      	mov	r3, sl
 8006c14:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006c18:	4659      	mov	r1, fp
 8006c1a:	4648      	mov	r0, r9
 8006c1c:	f006 f8ea 	bl	800cdf4 <iprintf>
 8006c20:	e7be      	b.n	8006ba0 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006c22:	f8d8 2000 	ldr.w	r2, [r8]
 8006c26:	2a00      	cmp	r2, #0
 8006c28:	d0e0      	beq.n	8006bec <pbuf_copy.part.0+0x8c>
 8006c2a:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <pbuf_copy.part.0+0x12c>)
 8006c2c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006c30:	4917      	ldr	r1, [pc, #92]	; (8006c90 <pbuf_copy.part.0+0x130>)
 8006c32:	4818      	ldr	r0, [pc, #96]	; (8006c94 <pbuf_copy.part.0+0x134>)
 8006c34:	f006 f8de 	bl	800cdf4 <iprintf>
 8006c38:	f06f 0005 	mvn.w	r0, #5
}
 8006c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006c40:	f1b8 0f00 	cmp.w	r8, #0
 8006c44:	d00a      	beq.n	8006c5c <pbuf_copy.part.0+0xfc>
      offset_to = 0;
 8006c46:	2700      	movs	r7, #0
 8006c48:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006c4a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006c4e:	e7c9      	b.n	8006be4 <pbuf_copy.part.0+0x84>
      p_to = p_to->next;
 8006c50:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	d1f4      	bne.n	8006c40 <pbuf_copy.part.0+0xe0>
 8006c56:	f1b8 0f00 	cmp.w	r8, #0
 8006c5a:	d108      	bne.n	8006c6e <pbuf_copy.part.0+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006c5c:	2d00      	cmp	r5, #0
 8006c5e:	d1ad      	bne.n	8006bbc <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 8006c60:	2000      	movs	r0, #0
}
 8006c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8006c66:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006c68:	b10d      	cbz	r5, 8006c6e <pbuf_copy.part.0+0x10e>
      offset_to = 0;
 8006c6a:	2700      	movs	r7, #0
 8006c6c:	e7ed      	b.n	8006c4a <pbuf_copy.part.0+0xea>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006c6e:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <pbuf_copy.part.0+0x12c>)
 8006c70:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006c74:	4909      	ldr	r1, [pc, #36]	; (8006c9c <pbuf_copy.part.0+0x13c>)
 8006c76:	4807      	ldr	r0, [pc, #28]	; (8006c94 <pbuf_copy.part.0+0x134>)
 8006c78:	f006 f8bc 	bl	800cdf4 <iprintf>
 8006c7c:	f06f 000f 	mvn.w	r0, #15
}
 8006c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0b6      	beq.n	8006bf8 <pbuf_copy.part.0+0x98>
 8006c8a:	e79d      	b.n	8006bc8 <pbuf_copy.part.0+0x68>
 8006c8c:	0800e430 	.word	0x0800e430
 8006c90:	0800e4a4 	.word	0x0800e4a4
 8006c94:	0800dd68 	.word	0x0800dd68
 8006c98:	0800e478 	.word	0x0800e478
 8006c9c:	0800e494 	.word	0x0800e494
 8006ca0:	0800e460 	.word	0x0800e460

08006ca4 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006ca4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8006ca8:	2b01      	cmp	r3, #1
{
 8006caa:	b570      	push	{r4, r5, r6, lr}
 8006cac:	4614      	mov	r4, r2
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006cb2:	d10d      	bne.n	8006cd0 <pbuf_alloc_reference+0x2c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006cb4:	200b      	movs	r0, #11
 8006cb6:	f7ff fcc9 	bl	800664c <memp_malloc>
  if (p == NULL) {
 8006cba:	b140      	cbz	r0, 8006cce <pbuf_alloc_reference+0x2a>
  p->next = NULL;
 8006cbc:	2300      	movs	r3, #0
  p->ref = 1;
 8006cbe:	2201      	movs	r2, #1
  p->payload = payload;
 8006cc0:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8006cc2:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 8006cc4:	6003      	str	r3, [r0, #0]
  p->len = len;
 8006cc6:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8006cc8:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8006cca:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8006ccc:	81c2      	strh	r2, [r0, #14]
}
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006cd0:	4b03      	ldr	r3, [pc, #12]	; (8006ce0 <pbuf_alloc_reference+0x3c>)
 8006cd2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006cd6:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <pbuf_alloc_reference+0x40>)
 8006cd8:	4803      	ldr	r0, [pc, #12]	; (8006ce8 <pbuf_alloc_reference+0x44>)
 8006cda:	f006 f88b 	bl	800cdf4 <iprintf>
 8006cde:	e7e9      	b.n	8006cb4 <pbuf_alloc_reference+0x10>
 8006ce0:	0800e430 	.word	0x0800e430
 8006ce4:	0800e4d0 	.word	0x0800e4d0
 8006ce8:	0800dd68 	.word	0x0800dd68

08006cec <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006cec:	3003      	adds	r0, #3
 8006cee:	f020 0003 	bic.w	r0, r0, #3
{
 8006cf2:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006cf4:	eb01 0e00 	add.w	lr, r1, r0
{
 8006cf8:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8006cfc:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006cfe:	45e6      	cmp	lr, ip
 8006d00:	d80d      	bhi.n	8006d1e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8006d02:	b104      	cbz	r4, 8006d06 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d04:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006d06:	4618      	mov	r0, r3
  p->next = NULL;
 8006d08:	2300      	movs	r3, #0
  p->payload = payload;
 8006d0a:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 8006d0c:	2402      	movs	r4, #2
  p->next = NULL;
 8006d0e:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 8006d10:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8006d12:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8006d14:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8006d16:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8006d18:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 8006d1a:	81c3      	strh	r3, [r0, #14]
}
 8006d1c:	bd10      	pop	{r4, pc}
    return NULL;
 8006d1e:	2000      	movs	r0, #0
}
 8006d20:	bd10      	pop	{r4, pc}
 8006d22:	bf00      	nop

08006d24 <pbuf_add_header>:
{
 8006d24:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006d26:	b310      	cbz	r0, 8006d6e <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006d28:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006d2c:	d20c      	bcs.n	8006d48 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 8006d2e:	b169      	cbz	r1, 8006d4c <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 8006d30:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006d34:	8902      	ldrh	r2, [r0, #8]
 8006d36:	4603      	mov	r3, r0
 8006d38:	4462      	add	r2, ip
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	4594      	cmp	ip, r2
 8006d3e:	d803      	bhi.n	8006d48 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006d40:	f990 000c 	ldrsb.w	r0, [r0, #12]
 8006d44:	2800      	cmp	r0, #0
 8006d46:	db03      	blt.n	8006d50 <pbuf_add_header+0x2c>
    return 1;
 8006d48:	2001      	movs	r0, #1
}
 8006d4a:	bd08      	pop	{r3, pc}
    return 0;
 8006d4c:	4608      	mov	r0, r1
}
 8006d4e:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 8006d50:	6858      	ldr	r0, [r3, #4]
 8006d52:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006d54:	f103 0010 	add.w	r0, r3, #16
 8006d58:	4281      	cmp	r1, r0
 8006d5a:	d3f5      	bcc.n	8006d48 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 8006d5c:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 8006d60:	2000      	movs	r0, #0
  p->payload = payload;
 8006d62:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006d64:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006d66:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006d68:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 8006d6c:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006d6e:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <pbuf_add_header+0x5c>)
 8006d70:	f240 12df 	movw	r2, #479	; 0x1df
 8006d74:	4903      	ldr	r1, [pc, #12]	; (8006d84 <pbuf_add_header+0x60>)
 8006d76:	4804      	ldr	r0, [pc, #16]	; (8006d88 <pbuf_add_header+0x64>)
 8006d78:	f006 f83c 	bl	800cdf4 <iprintf>
    return 1;
 8006d7c:	2001      	movs	r0, #1
}
 8006d7e:	bd08      	pop	{r3, pc}
 8006d80:	0800e430 	.word	0x0800e430
 8006d84:	0800e4e4 	.word	0x0800e4e4
 8006d88:	0800dd68 	.word	0x0800dd68

08006d8c <pbuf_remove_header>:
{
 8006d8c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006d8e:	b1a0      	cbz	r0, 8006dba <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006d90:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006d94:	d21a      	bcs.n	8006dcc <pbuf_remove_header+0x40>
  if (header_size_decrement == 0) {
 8006d96:	b171      	cbz	r1, 8006db6 <pbuf_remove_header+0x2a>
 8006d98:	4603      	mov	r3, r0
  increment_magnitude = (u16_t)header_size_decrement;
 8006d9a:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006d9c:	895a      	ldrh	r2, [r3, #10]
 8006d9e:	4290      	cmp	r0, r2
 8006da0:	d816      	bhi.n	8006dd0 <pbuf_remove_header+0x44>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006da2:	685c      	ldr	r4, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8006da4:	1a12      	subs	r2, r2, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006da6:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006da8:	8919      	ldrh	r1, [r3, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 8006daa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006dac:	1a0a      	subs	r2, r1, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006dae:	605c      	str	r4, [r3, #4]
  return 0;
 8006db0:	2000      	movs	r0, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006db2:	811a      	strh	r2, [r3, #8]
}
 8006db4:	bd10      	pop	{r4, pc}
    return 0;
 8006db6:	4608      	mov	r0, r1
}
 8006db8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <pbuf_remove_header+0x58>)
 8006dbc:	f240 224b 	movw	r2, #587	; 0x24b
 8006dc0:	4909      	ldr	r1, [pc, #36]	; (8006de8 <pbuf_remove_header+0x5c>)
 8006dc2:	480a      	ldr	r0, [pc, #40]	; (8006dec <pbuf_remove_header+0x60>)
 8006dc4:	f006 f816 	bl	800cdf4 <iprintf>
    return 1;
 8006dc8:	2001      	movs	r0, #1
}
 8006dca:	bd10      	pop	{r4, pc}
    return 1;
 8006dcc:	2001      	movs	r0, #1
}
 8006dce:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006dd0:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <pbuf_remove_header+0x58>)
 8006dd2:	f240 2255 	movw	r2, #597	; 0x255
 8006dd6:	4906      	ldr	r1, [pc, #24]	; (8006df0 <pbuf_remove_header+0x64>)
 8006dd8:	4804      	ldr	r0, [pc, #16]	; (8006dec <pbuf_remove_header+0x60>)
 8006dda:	f006 f80b 	bl	800cdf4 <iprintf>
 8006dde:	2001      	movs	r0, #1
}
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	bf00      	nop
 8006de4:	0800e430 	.word	0x0800e430
 8006de8:	0800e4e4 	.word	0x0800e4e4
 8006dec:	0800dd68 	.word	0x0800dd68
 8006df0:	0800e4f0 	.word	0x0800e4f0

08006df4 <pbuf_header_force>:
  if (header_size_increment < 0) {
 8006df4:	2900      	cmp	r1, #0
 8006df6:	db1a      	blt.n	8006e2e <pbuf_header_force+0x3a>
{
 8006df8:	b508      	push	{r3, lr}
 8006dfa:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 8006dfc:	b1d0      	cbz	r0, 8006e34 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 8006dfe:	b341      	cbz	r1, 8006e52 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 8006e00:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006e04:	891a      	ldrh	r2, [r3, #8]
 8006e06:	4462      	add	r2, ip
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	4594      	cmp	ip, r2
 8006e0c:	d81f      	bhi.n	8006e4e <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006e0e:	f993 000c 	ldrsb.w	r0, [r3, #12]
 8006e12:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 8006e14:	6858      	ldr	r0, [r3, #4]
 8006e16:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006e1a:	db14      	blt.n	8006e46 <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 8006e1c:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 8006e20:	2000      	movs	r0, #0
  p->payload = payload;
 8006e22:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006e24:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006e26:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006e28:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 8006e2c:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006e2e:	4249      	negs	r1, r1
 8006e30:	f7ff bfac 	b.w	8006d8c <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 8006e34:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <pbuf_header_force+0x64>)
 8006e36:	f240 12df 	movw	r2, #479	; 0x1df
 8006e3a:	4908      	ldr	r1, [pc, #32]	; (8006e5c <pbuf_header_force+0x68>)
 8006e3c:	4808      	ldr	r0, [pc, #32]	; (8006e60 <pbuf_header_force+0x6c>)
 8006e3e:	f005 ffd9 	bl	800cdf4 <iprintf>
    return 1;
 8006e42:	2001      	movs	r0, #1
}
 8006e44:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006e46:	f103 0010 	add.w	r0, r3, #16
 8006e4a:	4281      	cmp	r1, r0
 8006e4c:	d2e6      	bcs.n	8006e1c <pbuf_header_force+0x28>
    return 1;
 8006e4e:	2001      	movs	r0, #1
}
 8006e50:	bd08      	pop	{r3, pc}
    return 0;
 8006e52:	4608      	mov	r0, r1
}
 8006e54:	bd08      	pop	{r3, pc}
 8006e56:	bf00      	nop
 8006e58:	0800e430 	.word	0x0800e430
 8006e5c:	0800e4e4 	.word	0x0800e4e4
 8006e60:	0800dd68 	.word	0x0800dd68

08006e64 <pbuf_free>:
{
 8006e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (p == NULL) {
 8006e68:	4605      	mov	r5, r0
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d055      	beq.n	8006f1a <pbuf_free+0xb6>
  count = 0;
 8006e6e:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e70:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8006f38 <pbuf_free+0xd4>
 8006e74:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8006f40 <pbuf_free+0xdc>
 8006e78:	4f2c      	ldr	r7, [pc, #176]	; (8006f2c <pbuf_free+0xc8>)
 8006e7a:	e008      	b.n	8006e8e <pbuf_free+0x2a>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006e7c:	692b      	ldr	r3, [r5, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d03d      	beq.n	8006efe <pbuf_free+0x9a>
        pc->custom_free_function(p);
 8006e82:	4628      	mov	r0, r5
 8006e84:	4798      	blx	r3
      count++;
 8006e86:	3601      	adds	r6, #1
 8006e88:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8006e8a:	b1fc      	cbz	r4, 8006ecc <pbuf_free+0x68>
 8006e8c:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 8006e8e:	f005 fe9f 	bl	800cbd0 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e92:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 8006e94:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e96:	b1e3      	cbz	r3, 8006ed2 <pbuf_free+0x6e>
    ref = --(p->ref);
 8006e98:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 8006e9a:	4620      	mov	r0, r4
    ref = --(p->ref);
 8006e9c:	b2dc      	uxtb	r4, r3
 8006e9e:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8006ea0:	f005 fea2 	bl	800cbe8 <sys_arch_unprotect>
    if (ref == 0) {
 8006ea4:	b994      	cbnz	r4, 8006ecc <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006ea6:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 8006ea8:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006eaa:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 8006eac:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006eae:	d4e5      	bmi.n	8006e7c <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 8006eb0:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d01d      	beq.n	8006ef4 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d029      	beq.n	8006f10 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006ebc:	b993      	cbnz	r3, 8006ee4 <pbuf_free+0x80>
      count++;
 8006ebe:	3601      	adds	r6, #1
          mem_free(p);
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f7ff f8d7 	bl	8006074 <mem_free>
      count++;
 8006ec6:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8006ec8:	2c00      	cmp	r4, #0
 8006eca:	d1df      	bne.n	8006e8c <pbuf_free+0x28>
}
 8006ecc:	4630      	mov	r0, r6
 8006ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006ed2:	4643      	mov	r3, r8
 8006ed4:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4638      	mov	r0, r7
 8006edc:	f005 ff8a 	bl	800cdf4 <iprintf>
    ref = --(p->ref);
 8006ee0:	7bab      	ldrb	r3, [r5, #14]
 8006ee2:	e7d9      	b.n	8006e98 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ee4:	4643      	mov	r3, r8
 8006ee6:	f240 320f 	movw	r2, #783	; 0x30f
 8006eea:	4911      	ldr	r1, [pc, #68]	; (8006f30 <pbuf_free+0xcc>)
 8006eec:	4638      	mov	r0, r7
 8006eee:	f005 ff81 	bl	800cdf4 <iprintf>
 8006ef2:	e7c8      	b.n	8006e86 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	200c      	movs	r0, #12
 8006ef8:	f7ff fbee 	bl	80066d8 <memp_free>
 8006efc:	e7c3      	b.n	8006e86 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006efe:	4643      	mov	r3, r8
 8006f00:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006f04:	490b      	ldr	r1, [pc, #44]	; (8006f34 <pbuf_free+0xd0>)
 8006f06:	4638      	mov	r0, r7
 8006f08:	f005 ff74 	bl	800cdf4 <iprintf>
        pc->custom_free_function(p);
 8006f0c:	692b      	ldr	r3, [r5, #16]
 8006f0e:	e7b8      	b.n	8006e82 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 8006f10:	4629      	mov	r1, r5
 8006f12:	200b      	movs	r0, #11
 8006f14:	f7ff fbe0 	bl	80066d8 <memp_free>
 8006f18:	e7b5      	b.n	8006e86 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <pbuf_free+0xd4>)
 8006f1c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006f20:	4906      	ldr	r1, [pc, #24]	; (8006f3c <pbuf_free+0xd8>)
    return 0;
 8006f22:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <pbuf_free+0xc8>)
 8006f26:	f005 ff65 	bl	800cdf4 <iprintf>
    return 0;
 8006f2a:	e7cf      	b.n	8006ecc <pbuf_free+0x68>
 8006f2c:	0800dd68 	.word	0x0800dd68
 8006f30:	0800e54c 	.word	0x0800e54c
 8006f34:	0800e528 	.word	0x0800e528
 8006f38:	0800e430 	.word	0x0800e430
 8006f3c:	0800e4e4 	.word	0x0800e4e4
 8006f40:	0800e510 	.word	0x0800e510

08006f44 <pbuf_alloc>:
  switch (type) {
 8006f44:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8006f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f4c:	4688      	mov	r8, r1
 8006f4e:	b083      	sub	sp, #12
  u16_t offset = (u16_t)layer;
 8006f50:	fa1f f980 	uxth.w	r9, r0
  switch (type) {
 8006f54:	d040      	beq.n	8006fd8 <pbuf_alloc+0x94>
 8006f56:	d80f      	bhi.n	8006f78 <pbuf_alloc+0x34>
 8006f58:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d035      	beq.n	8006fcc <pbuf_alloc+0x88>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006f60:	4b48      	ldr	r3, [pc, #288]	; (8007084 <pbuf_alloc+0x140>)
 8006f62:	f240 1227 	movw	r2, #295	; 0x127
 8006f66:	4948      	ldr	r1, [pc, #288]	; (8007088 <pbuf_alloc+0x144>)
      return NULL;
 8006f68:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006f6a:	4848      	ldr	r0, [pc, #288]	; (800708c <pbuf_alloc+0x148>)
 8006f6c:	f005 ff42 	bl	800cdf4 <iprintf>
}
 8006f70:	4620      	mov	r0, r4
 8006f72:	b003      	add	sp, #12
 8006f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 8006f78:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8006f7c:	d1f0      	bne.n	8006f60 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006f7e:	f109 0303 	add.w	r3, r9, #3
 8006f82:	1cca      	adds	r2, r1, #3
 8006f84:	4605      	mov	r5, r0
 8006f86:	f022 0203 	bic.w	r2, r2, #3
 8006f8a:	f023 0303 	bic.w	r3, r3, #3
 8006f8e:	4413      	add	r3, r2
 8006f90:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006f92:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006f96:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006f98:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006f9a:	d34e      	bcc.n	800703a <pbuf_alloc+0xf6>
 8006f9c:	4282      	cmp	r2, r0
 8006f9e:	d84c      	bhi.n	800703a <pbuf_alloc+0xf6>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006fa0:	f7ff fa18 	bl	80063d4 <mem_malloc>
      if (p == NULL) {
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d0e2      	beq.n	8006f70 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006faa:	1943      	adds	r3, r0, r5
  p->next = NULL;
 8006fac:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 8006fae:	4a38      	ldr	r2, [pc, #224]	; (8007090 <pbuf_alloc+0x14c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006fb0:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 8006fb2:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->next = NULL;
 8006fb6:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006fb8:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 8006fbc:	f8a0 800a 	strh.w	r8, [r0, #10]
  p->type_internal = (u8_t)type;
 8006fc0:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 8006fc2:	6043      	str	r3, [r0, #4]
}
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	b003      	add	sp, #12
 8006fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8006fcc:	2000      	movs	r0, #0
}
 8006fce:	b003      	add	sp, #12
 8006fd0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8006fd4:	f7ff be66 	b.w	8006ca4 <pbuf_alloc_reference>
  switch (type) {
 8006fd8:	2100      	movs	r1, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006fda:	f240 56ec 	movw	r6, #1516	; 0x5ec
  p->type_internal = (u8_t)type;
 8006fde:	4d2d      	ldr	r5, [pc, #180]	; (8007094 <pbuf_alloc+0x150>)
  switch (type) {
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	e009      	b.n	8006ff8 <pbuf_alloc+0xb4>
          last->next = q;
 8006fe4:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 8006fe6:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 8006fea:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 8006fee:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 8006ff2:	f1b8 0f00 	cmp.w	r8, #0
 8006ff6:	d0bb      	beq.n	8006f70 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006ff8:	200c      	movs	r0, #12
 8006ffa:	460f      	mov	r7, r1
 8006ffc:	f7ff fb26 	bl	800664c <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007000:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 8007004:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 8007008:	4601      	mov	r1, r0
 800700a:	b1d8      	cbz	r0, 8007044 <pbuf_alloc+0x100>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800700c:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007010:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 8007014:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007018:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800701a:	3213      	adds	r2, #19
  p->next = NULL;
 800701c:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007020:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007022:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 8007026:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007028:	4543      	cmp	r3, r8
  p->payload = payload;
 800702a:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800702c:	bf28      	it	cs
 800702e:	4643      	movcs	r3, r8
  p->len = len;
 8007030:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8007032:	2c00      	cmp	r4, #0
 8007034:	d1d6      	bne.n	8006fe4 <pbuf_alloc+0xa0>
 8007036:	4604      	mov	r4, r0
 8007038:	e7d5      	b.n	8006fe6 <pbuf_alloc+0xa2>
          return NULL;
 800703a:	2400      	movs	r4, #0
}
 800703c:	4620      	mov	r0, r4
 800703e:	b003      	add	sp, #12
 8007040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 8007044:	4e14      	ldr	r6, [pc, #80]	; (8007098 <pbuf_alloc+0x154>)
 8007046:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 8007048:	f005 fdc2 	bl	800cbd0 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800704c:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 800704e:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8007050:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8007052:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007054:	f005 fdc8 	bl	800cbe8 <sys_arch_unprotect>
  if (!queued) {
 8007058:	9901      	ldr	r1, [sp, #4]
 800705a:	b135      	cbz	r5, 800706a <pbuf_alloc+0x126>
          if (p) {
 800705c:	2c00      	cmp	r4, #0
 800705e:	d0ec      	beq.n	800703a <pbuf_alloc+0xf6>
            pbuf_free(p);
 8007060:	4620      	mov	r0, r4
          return NULL;
 8007062:	2400      	movs	r4, #0
            pbuf_free(p);
 8007064:	f7ff fefe 	bl	8006e64 <pbuf_free>
 8007068:	e782      	b.n	8006f70 <pbuf_alloc+0x2c>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800706a:	480c      	ldr	r0, [pc, #48]	; (800709c <pbuf_alloc+0x158>)
 800706c:	f7fe feca 	bl	8005e04 <tcpip_try_callback>
 8007070:	2800      	cmp	r0, #0
 8007072:	d0f3      	beq.n	800705c <pbuf_alloc+0x118>
 8007074:	f005 fdac 	bl	800cbd0 <sys_arch_protect>
 8007078:	9901      	ldr	r1, [sp, #4]
 800707a:	7031      	strb	r1, [r6, #0]
 800707c:	f005 fdb4 	bl	800cbe8 <sys_arch_unprotect>
 8007080:	e7ec      	b.n	800705c <pbuf_alloc+0x118>
 8007082:	bf00      	nop
 8007084:	0800e430 	.word	0x0800e430
 8007088:	0800e560 	.word	0x0800e560
 800708c:	0800dd68 	.word	0x0800dd68
 8007090:	00010080 	.word	0x00010080
 8007094:	00010082 	.word	0x00010082
 8007098:	24010541 	.word	0x24010541
 800709c:	08006b2d 	.word	0x08006b2d

080070a0 <pbuf_realloc>:
{
 80070a0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80070a2:	4604      	mov	r4, r0
{
 80070a4:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d037      	beq.n	800711a <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 80070aa:	8922      	ldrh	r2, [r4, #8]
 80070ac:	42aa      	cmp	r2, r5
 80070ae:	d91b      	bls.n	80070e8 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 80070b0:	8963      	ldrh	r3, [r4, #10]
 80070b2:	429d      	cmp	r5, r3
 80070b4:	d90d      	bls.n	80070d2 <pbuf_realloc+0x32>
 80070b6:	1aa9      	subs	r1, r5, r2
 80070b8:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80070ba:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 80070bc:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80070be:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 80070c0:	b29d      	uxth	r5, r3
    q = q->next;
 80070c2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80070c4:	2c00      	cmp	r4, #0
 80070c6:	d030      	beq.n	800712a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 80070c8:	8963      	ldrh	r3, [r4, #10]
 80070ca:	42ab      	cmp	r3, r5
 80070cc:	d201      	bcs.n	80070d2 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80070ce:	8922      	ldrh	r2, [r4, #8]
 80070d0:	e7f3      	b.n	80070ba <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80070d2:	7b22      	ldrb	r2, [r4, #12]
 80070d4:	0712      	lsls	r2, r2, #28
 80070d6:	d008      	beq.n	80070ea <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 80070d8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80070da:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80070dc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80070de:	b108      	cbz	r0, 80070e4 <pbuf_realloc+0x44>
    pbuf_free(q->next);
 80070e0:	f7ff fec0 	bl	8006e64 <pbuf_free>
  q->next = NULL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	6023      	str	r3, [r4, #0]
}
 80070e8:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80070ea:	42ab      	cmp	r3, r5
 80070ec:	d0f4      	beq.n	80070d8 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80070ee:	7b63      	ldrb	r3, [r4, #13]
 80070f0:	079b      	lsls	r3, r3, #30
 80070f2:	d4f1      	bmi.n	80070d8 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	4620      	mov	r0, r4
 80070f8:	1b1b      	subs	r3, r3, r4
 80070fa:	18e9      	adds	r1, r5, r3
 80070fc:	b289      	uxth	r1, r1
 80070fe:	f7ff f8a5 	bl	800624c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007102:	4604      	mov	r4, r0
 8007104:	2800      	cmp	r0, #0
 8007106:	d1e7      	bne.n	80070d8 <pbuf_realloc+0x38>
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <pbuf_realloc+0x9c>)
 800710a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800710e:	490c      	ldr	r1, [pc, #48]	; (8007140 <pbuf_realloc+0xa0>)
 8007110:	480c      	ldr	r0, [pc, #48]	; (8007144 <pbuf_realloc+0xa4>)
 8007112:	f005 fe6f 	bl	800cdf4 <iprintf>
  q->len = rem_len;
 8007116:	8164      	strh	r4, [r4, #10]
 8007118:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800711a:	4b08      	ldr	r3, [pc, #32]	; (800713c <pbuf_realloc+0x9c>)
 800711c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007120:	4909      	ldr	r1, [pc, #36]	; (8007148 <pbuf_realloc+0xa8>)
 8007122:	4808      	ldr	r0, [pc, #32]	; (8007144 <pbuf_realloc+0xa4>)
 8007124:	f005 fe66 	bl	800cdf4 <iprintf>
 8007128:	e7bf      	b.n	80070aa <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800712a:	4b04      	ldr	r3, [pc, #16]	; (800713c <pbuf_realloc+0x9c>)
 800712c:	f240 12af 	movw	r2, #431	; 0x1af
 8007130:	4906      	ldr	r1, [pc, #24]	; (800714c <pbuf_realloc+0xac>)
 8007132:	4804      	ldr	r0, [pc, #16]	; (8007144 <pbuf_realloc+0xa4>)
 8007134:	f005 fe5e 	bl	800cdf4 <iprintf>
  while (rem_len > q->len) {
 8007138:	8963      	ldrh	r3, [r4, #10]
 800713a:	deff      	udf	#255	; 0xff
 800713c:	0800e430 	.word	0x0800e430
 8007140:	0800e5ac 	.word	0x0800e5ac
 8007144:	0800dd68 	.word	0x0800dd68
 8007148:	0800e57c 	.word	0x0800e57c
 800714c:	0800e594 	.word	0x0800e594

08007150 <pbuf_clen>:
  while (p != NULL) {
 8007150:	b138      	cbz	r0, 8007162 <pbuf_clen+0x12>
  len = 0;
 8007152:	2300      	movs	r3, #0
    ++len;
 8007154:	3301      	adds	r3, #1
    p = p->next;
 8007156:	6800      	ldr	r0, [r0, #0]
    ++len;
 8007158:	b29b      	uxth	r3, r3
  while (p != NULL) {
 800715a:	2800      	cmp	r0, #0
 800715c:	d1fa      	bne.n	8007154 <pbuf_clen+0x4>
}
 800715e:	4618      	mov	r0, r3
 8007160:	4770      	bx	lr
  len = 0;
 8007162:	4603      	mov	r3, r0
}
 8007164:	4618      	mov	r0, r3
 8007166:	4770      	bx	lr

08007168 <pbuf_ref>:
  if (p != NULL) {
 8007168:	b158      	cbz	r0, 8007182 <pbuf_ref+0x1a>
{
 800716a:	b510      	push	{r4, lr}
 800716c:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800716e:	f005 fd2f 	bl	800cbd0 <sys_arch_protect>
 8007172:	7ba3      	ldrb	r3, [r4, #14]
 8007174:	3301      	adds	r3, #1
 8007176:	73a3      	strb	r3, [r4, #14]
 8007178:	f005 fd36 	bl	800cbe8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800717c:	7ba3      	ldrb	r3, [r4, #14]
 800717e:	b10b      	cbz	r3, 8007184 <pbuf_ref+0x1c>
}
 8007180:	bd10      	pop	{r4, pc}
 8007182:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <pbuf_ref+0x30>)
 8007186:	f240 3242 	movw	r2, #834	; 0x342
 800718a:	4904      	ldr	r1, [pc, #16]	; (800719c <pbuf_ref+0x34>)
 800718c:	4804      	ldr	r0, [pc, #16]	; (80071a0 <pbuf_ref+0x38>)
}
 800718e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007192:	f005 be2f 	b.w	800cdf4 <iprintf>
 8007196:	bf00      	nop
 8007198:	0800e430 	.word	0x0800e430
 800719c:	0800e5c8 	.word	0x0800e5c8
 80071a0:	0800dd68 	.word	0x0800dd68

080071a4 <pbuf_cat>:
{
 80071a4:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80071a6:	b330      	cbz	r0, 80071f6 <pbuf_cat+0x52>
 80071a8:	460d      	mov	r5, r1
 80071aa:	b321      	cbz	r1, 80071f6 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 80071ac:	6803      	ldr	r3, [r0, #0]
 80071ae:	4604      	mov	r4, r0
 80071b0:	b13b      	cbz	r3, 80071c2 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80071b2:	8922      	ldrh	r2, [r4, #8]
 80071b4:	8928      	ldrh	r0, [r5, #8]
 80071b6:	4402      	add	r2, r0
 80071b8:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80071ba:	461c      	mov	r4, r3
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f7      	bne.n	80071b2 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80071c2:	8963      	ldrh	r3, [r4, #10]
 80071c4:	8922      	ldrh	r2, [r4, #8]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d010      	beq.n	80071ec <pbuf_cat+0x48>
 80071ca:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <pbuf_cat+0x64>)
 80071cc:	f240 3262 	movw	r2, #866	; 0x362
 80071d0:	490e      	ldr	r1, [pc, #56]	; (800720c <pbuf_cat+0x68>)
 80071d2:	480f      	ldr	r0, [pc, #60]	; (8007210 <pbuf_cat+0x6c>)
 80071d4:	f005 fe0e 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	b133      	cbz	r3, 80071ea <pbuf_cat+0x46>
 80071dc:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <pbuf_cat+0x64>)
 80071de:	f240 3263 	movw	r2, #867	; 0x363
 80071e2:	490c      	ldr	r1, [pc, #48]	; (8007214 <pbuf_cat+0x70>)
 80071e4:	480a      	ldr	r0, [pc, #40]	; (8007210 <pbuf_cat+0x6c>)
 80071e6:	f005 fe05 	bl	800cdf4 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80071ea:	8923      	ldrh	r3, [r4, #8]
 80071ec:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 80071ee:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80071f0:	4413      	add	r3, r2
 80071f2:	8123      	strh	r3, [r4, #8]
}
 80071f4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <pbuf_cat+0x64>)
 80071f8:	f240 3259 	movw	r2, #857	; 0x359
 80071fc:	4906      	ldr	r1, [pc, #24]	; (8007218 <pbuf_cat+0x74>)
 80071fe:	4804      	ldr	r0, [pc, #16]	; (8007210 <pbuf_cat+0x6c>)
}
 8007200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007204:	f005 bdf6 	b.w	800cdf4 <iprintf>
 8007208:	0800e430 	.word	0x0800e430
 800720c:	0800e614 	.word	0x0800e614
 8007210:	0800dd68 	.word	0x0800dd68
 8007214:	0800e644 	.word	0x0800e644
 8007218:	0800e5dc 	.word	0x0800e5dc

0800721c <pbuf_chain>:
{
 800721c:	b510      	push	{r4, lr}
 800721e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8007220:	f7ff ffc0 	bl	80071a4 <pbuf_cat>
  if (p != NULL) {
 8007224:	b144      	cbz	r4, 8007238 <pbuf_chain+0x1c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007226:	f005 fcd3 	bl	800cbd0 <sys_arch_protect>
 800722a:	7ba3      	ldrb	r3, [r4, #14]
 800722c:	3301      	adds	r3, #1
 800722e:	73a3      	strb	r3, [r4, #14]
 8007230:	f005 fcda 	bl	800cbe8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007234:	7ba3      	ldrb	r3, [r4, #14]
 8007236:	b103      	cbz	r3, 800723a <pbuf_chain+0x1e>
}
 8007238:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800723a:	4b04      	ldr	r3, [pc, #16]	; (800724c <pbuf_chain+0x30>)
 800723c:	f240 3242 	movw	r2, #834	; 0x342
 8007240:	4903      	ldr	r1, [pc, #12]	; (8007250 <pbuf_chain+0x34>)
 8007242:	4804      	ldr	r0, [pc, #16]	; (8007254 <pbuf_chain+0x38>)
}
 8007244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007248:	f005 bdd4 	b.w	800cdf4 <iprintf>
 800724c:	0800e430 	.word	0x0800e430
 8007250:	0800e5c8 	.word	0x0800e5c8
 8007254:	0800dd68 	.word	0x0800dd68

08007258 <pbuf_copy>:
{
 8007258:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800725a:	b140      	cbz	r0, 800726e <pbuf_copy+0x16>
 800725c:	b139      	cbz	r1, 800726e <pbuf_copy+0x16>
 800725e:	8902      	ldrh	r2, [r0, #8]
 8007260:	890b      	ldrh	r3, [r1, #8]
 8007262:	429a      	cmp	r2, r3
 8007264:	d303      	bcc.n	800726e <pbuf_copy+0x16>
}
 8007266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800726a:	f7ff bc79 	b.w	8006b60 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800726e:	4b05      	ldr	r3, [pc, #20]	; (8007284 <pbuf_copy+0x2c>)
 8007270:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007274:	4904      	ldr	r1, [pc, #16]	; (8007288 <pbuf_copy+0x30>)
 8007276:	4805      	ldr	r0, [pc, #20]	; (800728c <pbuf_copy+0x34>)
 8007278:	f005 fdbc 	bl	800cdf4 <iprintf>
}
 800727c:	f06f 000f 	mvn.w	r0, #15
 8007280:	bd08      	pop	{r3, pc}
 8007282:	bf00      	nop
 8007284:	0800e430 	.word	0x0800e430
 8007288:	0800e654 	.word	0x0800e654
 800728c:	0800dd68 	.word	0x0800dd68

08007290 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007294:	4605      	mov	r5, r0
 8007296:	b370      	cbz	r0, 80072f6 <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007298:	460f      	mov	r7, r1
 800729a:	2900      	cmp	r1, #0
 800729c:	d036      	beq.n	800730c <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800729e:	4690      	mov	r8, r2
 80072a0:	b392      	cbz	r2, 8007308 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 80072a2:	2600      	movs	r6, #0
 80072a4:	e005      	b.n	80072b2 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80072a6:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80072a8:	682d      	ldr	r5, [r5, #0]
 80072aa:	f1b8 0f00 	cmp.w	r8, #0
 80072ae:	d01f      	beq.n	80072f0 <pbuf_copy_partial+0x60>
 80072b0:	b1f5      	cbz	r5, 80072f0 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80072b2:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 80072b4:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 80072b8:	b11b      	cbz	r3, 80072c2 <pbuf_copy_partial+0x32>
 80072ba:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 80072bc:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 80072c0:	d2f1      	bcs.n	80072a6 <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 80072c2:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80072c6:	6869      	ldr	r1, [r5, #4]
 80072c8:	fa1f f48c 	uxth.w	r4, ip
 80072cc:	4419      	add	r1, r3
 80072ce:	4544      	cmp	r4, r8
 80072d0:	bf28      	it	cs
 80072d2:	4644      	movcs	r4, r8
 80072d4:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80072d6:	4426      	add	r6, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80072d8:	f005 febd 	bl	800d056 <memcpy>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 80072dc:	eba8 0204 	sub.w	r2, r8, r4
      offset = 0;
 80072e0:	2300      	movs	r3, #0
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80072e2:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 80072e4:	fa1f f882 	uxth.w	r8, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80072e8:	682d      	ldr	r5, [r5, #0]
 80072ea:	f1b8 0f00 	cmp.w	r8, #0
 80072ee:	d1df      	bne.n	80072b0 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 80072f0:	4630      	mov	r0, r6
 80072f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80072f6:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <pbuf_copy_partial+0x90>)
 80072f8:	f240 420a 	movw	r2, #1034	; 0x40a
 80072fc:	4909      	ldr	r1, [pc, #36]	; (8007324 <pbuf_copy_partial+0x94>)
 80072fe:	462e      	mov	r6, r5
 8007300:	4809      	ldr	r0, [pc, #36]	; (8007328 <pbuf_copy_partial+0x98>)
 8007302:	f005 fd77 	bl	800cdf4 <iprintf>
 8007306:	e7f3      	b.n	80072f0 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 8007308:	4616      	mov	r6, r2
 800730a:	e7f1      	b.n	80072f0 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <pbuf_copy_partial+0x90>)
 800730e:	f240 420b 	movw	r2, #1035	; 0x40b
 8007312:	4906      	ldr	r1, [pc, #24]	; (800732c <pbuf_copy_partial+0x9c>)
 8007314:	463e      	mov	r6, r7
 8007316:	4804      	ldr	r0, [pc, #16]	; (8007328 <pbuf_copy_partial+0x98>)
 8007318:	f005 fd6c 	bl	800cdf4 <iprintf>
 800731c:	e7e8      	b.n	80072f0 <pbuf_copy_partial+0x60>
 800731e:	bf00      	nop
 8007320:	0800e430 	.word	0x0800e430
 8007324:	0800e684 	.word	0x0800e684
 8007328:	0800dd68 	.word	0x0800dd68
 800732c:	0800e6a4 	.word	0x0800e6a4

08007330 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4615      	mov	r5, r2
 8007334:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007336:	8929      	ldrh	r1, [r5, #8]
 8007338:	f7ff fe04 	bl	8006f44 <pbuf_alloc>
  if (q == NULL) {
 800733c:	4604      	mov	r4, r0
 800733e:	b138      	cbz	r0, 8007350 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007340:	8902      	ldrh	r2, [r0, #8]
 8007342:	892b      	ldrh	r3, [r5, #8]
 8007344:	429a      	cmp	r2, r3
 8007346:	d305      	bcc.n	8007354 <pbuf_clone+0x24>
 8007348:	4629      	mov	r1, r5
 800734a:	f7ff fc09 	bl	8006b60 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800734e:	b940      	cbnz	r0, 8007362 <pbuf_clone+0x32>
  return q;
}
 8007350:	4620      	mov	r0, r4
 8007352:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007354:	4b07      	ldr	r3, [pc, #28]	; (8007374 <pbuf_clone+0x44>)
 8007356:	f240 32c9 	movw	r2, #969	; 0x3c9
 800735a:	4907      	ldr	r1, [pc, #28]	; (8007378 <pbuf_clone+0x48>)
 800735c:	4807      	ldr	r0, [pc, #28]	; (800737c <pbuf_clone+0x4c>)
 800735e:	f005 fd49 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007362:	4b04      	ldr	r3, [pc, #16]	; (8007374 <pbuf_clone+0x44>)
 8007364:	f240 5224 	movw	r2, #1316	; 0x524
 8007368:	4905      	ldr	r1, [pc, #20]	; (8007380 <pbuf_clone+0x50>)
 800736a:	4804      	ldr	r0, [pc, #16]	; (800737c <pbuf_clone+0x4c>)
 800736c:	f005 fd42 	bl	800cdf4 <iprintf>
}
 8007370:	4620      	mov	r0, r4
 8007372:	bd38      	pop	{r3, r4, r5, pc}
 8007374:	0800e430 	.word	0x0800e430
 8007378:	0800e654 	.word	0x0800e654
 800737c:	0800dd68 	.word	0x0800dd68
 8007380:	0800e6c8 	.word	0x0800e6c8

08007384 <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007384:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007386:	4604      	mov	r4, r0
 8007388:	b308      	cbz	r0, 80073ce <tcp_close_shutdown_fin+0x4a>

  switch (pcb->state) {
 800738a:	7d23      	ldrb	r3, [r4, #20]
 800738c:	2b04      	cmp	r3, #4
 800738e:	d005      	beq.n	800739c <tcp_close_shutdown_fin+0x18>
 8007390:	2b07      	cmp	r3, #7
 8007392:	d00e      	beq.n	80073b2 <tcp_close_shutdown_fin+0x2e>
 8007394:	2b03      	cmp	r3, #3
 8007396:	d001      	beq.n	800739c <tcp_close_shutdown_fin+0x18>
 8007398:	2000      	movs	r0, #0
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 800739a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800739c:	4620      	mov	r0, r4
 800739e:	f002 ff11 	bl	800a1c4 <tcp_send_fin>
      if (err == ERR_OK) {
 80073a2:	b950      	cbnz	r0, 80073ba <tcp_close_shutdown_fin+0x36>
  if (err == ERR_OK) {
 80073a4:	2305      	movs	r3, #5
    tcp_output(pcb);
 80073a6:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 80073a8:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80073aa:	f003 f87b 	bl	800a4a4 <tcp_output>
 80073ae:	2000      	movs	r0, #0
}
 80073b0:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 80073b2:	4620      	mov	r0, r4
 80073b4:	f002 ff06 	bl	800a1c4 <tcp_send_fin>
      if (err == ERR_OK) {
 80073b8:	b138      	cbz	r0, 80073ca <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 80073ba:	1c43      	adds	r3, r0, #1
 80073bc:	d1ed      	bne.n	800739a <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80073be:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 80073c0:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80073c2:	f043 0308 	orr.w	r3, r3, #8
 80073c6:	8363      	strh	r3, [r4, #26]
}
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	2309      	movs	r3, #9
 80073cc:	e7eb      	b.n	80073a6 <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80073ce:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <tcp_close_shutdown_fin+0x5c>)
 80073d0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80073d4:	4903      	ldr	r1, [pc, #12]	; (80073e4 <tcp_close_shutdown_fin+0x60>)
 80073d6:	4804      	ldr	r0, [pc, #16]	; (80073e8 <tcp_close_shutdown_fin+0x64>)
 80073d8:	f005 fd0c 	bl	800cdf4 <iprintf>
 80073dc:	e7d5      	b.n	800738a <tcp_close_shutdown_fin+0x6>
 80073de:	bf00      	nop
 80073e0:	0800e6dc 	.word	0x0800e6dc
 80073e4:	0800e70c 	.word	0x0800e70c
 80073e8:	0800dd68 	.word	0x0800dd68

080073ec <tcp_init>:
{
 80073ec:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80073ee:	f005 fc01 	bl	800cbf4 <rand>
 80073f2:	4b02      	ldr	r3, [pc, #8]	; (80073fc <tcp_init+0x10>)
 80073f4:	4a02      	ldr	r2, [pc, #8]	; (8007400 <tcp_init+0x14>)
 80073f6:	4303      	orrs	r3, r0
 80073f8:	8013      	strh	r3, [r2, #0]
}
 80073fa:	bd08      	pop	{r3, pc}
 80073fc:	ffffc000 	.word	0xffffc000
 8007400:	2400002c 	.word	0x2400002c

08007404 <tcp_free>:
{
 8007404:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007406:	7d03      	ldrb	r3, [r0, #20]
{
 8007408:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800740a:	2b01      	cmp	r3, #1
 800740c:	d005      	beq.n	800741a <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800740e:	4621      	mov	r1, r4
 8007410:	2001      	movs	r0, #1
}
 8007412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8007416:	f7ff b95f 	b.w	80066d8 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800741a:	4906      	ldr	r1, [pc, #24]	; (8007434 <tcp_free+0x30>)
 800741c:	22d4      	movs	r2, #212	; 0xd4
 800741e:	4b06      	ldr	r3, [pc, #24]	; (8007438 <tcp_free+0x34>)
 8007420:	4806      	ldr	r0, [pc, #24]	; (800743c <tcp_free+0x38>)
 8007422:	f005 fce7 	bl	800cdf4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8007426:	4621      	mov	r1, r4
 8007428:	2001      	movs	r0, #1
}
 800742a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800742e:	f7ff b953 	b.w	80066d8 <memp_free>
 8007432:	bf00      	nop
 8007434:	0800e718 	.word	0x0800e718
 8007438:	0800e6dc 	.word	0x0800e6dc
 800743c:	0800dd68 	.word	0x0800dd68

08007440 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007440:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007442:	4604      	mov	r4, r0
 8007444:	b1c8      	cbz	r0, 800747a <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007446:	8d23      	ldrh	r3, [r4, #40]	; 0x28

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007448:	f640 3c68 	movw	ip, #2920	; 0xb68
 800744c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800744e:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007452:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007454:	1a58      	subs	r0, r3, r1
 8007456:	45e6      	cmp	lr, ip
 8007458:	4410      	add	r0, r2
 800745a:	bf94      	ite	ls
 800745c:	eba0 050e 	subls.w	r5, r0, lr
 8007460:	eba0 050c 	subhi.w	r5, r0, ip
 8007464:	2d00      	cmp	r5, #0
 8007466:	db01      	blt.n	800746c <tcp_update_rcv_ann_wnd+0x2c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007468:	8563      	strh	r3, [r4, #42]	; 0x2a
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
    }
    return 0;
  }
}
 800746a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800746c:	1a53      	subs	r3, r2, r1
 800746e:	2b00      	cmp	r3, #0
 8007470:	dd0b      	ble.n	800748a <tcp_update_rcv_ann_wnd+0x4a>
 8007472:	2300      	movs	r3, #0
    return 0;
 8007474:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007476:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 8007478:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800747a:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <tcp_update_rcv_ann_wnd+0x6c>)
 800747c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007480:	490b      	ldr	r1, [pc, #44]	; (80074b0 <tcp_update_rcv_ann_wnd+0x70>)
 8007482:	480c      	ldr	r0, [pc, #48]	; (80074b4 <tcp_update_rcv_ann_wnd+0x74>)
 8007484:	f005 fcb6 	bl	800cdf4 <iprintf>
 8007488:	e7dd      	b.n	8007446 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800748a:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800748c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007490:	d203      	bcs.n	800749a <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007492:	b2ab      	uxth	r3, r5
    return 0;
 8007494:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007496:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 8007498:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800749a:	4b04      	ldr	r3, [pc, #16]	; (80074ac <tcp_update_rcv_ann_wnd+0x6c>)
 800749c:	f240 32b6 	movw	r2, #950	; 0x3b6
 80074a0:	4905      	ldr	r1, [pc, #20]	; (80074b8 <tcp_update_rcv_ann_wnd+0x78>)
 80074a2:	4804      	ldr	r0, [pc, #16]	; (80074b4 <tcp_update_rcv_ann_wnd+0x74>)
 80074a4:	f005 fca6 	bl	800cdf4 <iprintf>
 80074a8:	e7f3      	b.n	8007492 <tcp_update_rcv_ann_wnd+0x52>
 80074aa:	bf00      	nop
 80074ac:	0800e6dc 	.word	0x0800e6dc
 80074b0:	0800e72c 	.word	0x0800e72c
 80074b4:	0800dd68 	.word	0x0800dd68
 80074b8:	0800e750 	.word	0x0800e750

080074bc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	4605      	mov	r5, r0
 80074c0:	460c      	mov	r4, r1
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 80074c2:	f7fb ffe1 	bl	8003488 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80074c6:	b33d      	cbz	r5, 8007518 <tcp_recved+0x5c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80074c8:	7d2b      	ldrb	r3, [r5, #20]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d01c      	beq.n	8007508 <tcp_recved+0x4c>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80074ce:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80074d0:	1919      	adds	r1, r3, r4
 80074d2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80074d4:	428b      	cmp	r3, r1
 80074d6:	d803      	bhi.n	80074e0 <tcp_recved+0x24>
 80074d8:	f241 63d0 	movw	r3, #5840	; 0x16d0
 80074dc:	4299      	cmp	r1, r3
 80074de:	d901      	bls.n	80074e4 <tcp_recved+0x28>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80074e0:	f241 61d0 	movw	r1, #5840	; 0x16d0
  } else  {
    pcb->rcv_wnd = rcv_wnd;
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80074e4:	4628      	mov	r0, r5
 80074e6:	8529      	strh	r1, [r5, #40]	; 0x28
 80074e8:	f7ff ffaa 	bl	8007440 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80074ec:	f240 53b3 	movw	r3, #1459	; 0x5b3
 80074f0:	4298      	cmp	r0, r3
 80074f2:	d800      	bhi.n	80074f6 <tcp_recved+0x3a>
    tcp_output(pcb);
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 80074f6:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 80074f8:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 80074fa:	f043 0302 	orr.w	r3, r3, #2
 80074fe:	836b      	strh	r3, [r5, #26]
}
 8007500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8007504:	f002 bfce 	b.w	800a4a4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007508:	4b08      	ldr	r3, [pc, #32]	; (800752c <tcp_recved+0x70>)
 800750a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800750e:	4908      	ldr	r1, [pc, #32]	; (8007530 <tcp_recved+0x74>)
 8007510:	4808      	ldr	r0, [pc, #32]	; (8007534 <tcp_recved+0x78>)
 8007512:	f005 fc6f 	bl	800cdf4 <iprintf>
 8007516:	e7da      	b.n	80074ce <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007518:	4b04      	ldr	r3, [pc, #16]	; (800752c <tcp_recved+0x70>)
 800751a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800751e:	4906      	ldr	r1, [pc, #24]	; (8007538 <tcp_recved+0x7c>)
 8007520:	4804      	ldr	r0, [pc, #16]	; (8007534 <tcp_recved+0x78>)
}
 8007522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007526:	f005 bc65 	b.w	800cdf4 <iprintf>
 800752a:	bf00      	nop
 800752c:	0800e6dc 	.word	0x0800e6dc
 8007530:	0800e784 	.word	0x0800e784
 8007534:	0800dd68 	.word	0x0800dd68
 8007538:	0800e76c 	.word	0x0800e76c

0800753c <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 800753c:	b170      	cbz	r0, 800755c <tcp_segs_free+0x20>
{
 800753e:	b538      	push	{r3, r4, r5, lr}
 8007540:	4604      	mov	r4, r0
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
    if (seg->p != NULL) {
      pbuf_free(seg->p);
 8007542:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 8007544:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8007546:	6868      	ldr	r0, [r5, #4]
 8007548:	b108      	cbz	r0, 800754e <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800754a:	f7ff fc8b 	bl	8006e64 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800754e:	4629      	mov	r1, r5
 8007550:	2003      	movs	r0, #3
 8007552:	f7ff f8c1 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 8007556:	2c00      	cmp	r4, #0
 8007558:	d1f3      	bne.n	8007542 <tcp_segs_free+0x6>
}
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop

08007560 <tcp_seg_free>:
  if (seg != NULL) {
 8007560:	b158      	cbz	r0, 800757a <tcp_seg_free+0x1a>
{
 8007562:	b510      	push	{r4, lr}
 8007564:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8007566:	6840      	ldr	r0, [r0, #4]
 8007568:	b108      	cbz	r0, 800756e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800756a:	f7ff fc7b 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800756e:	4621      	mov	r1, r4
 8007570:	2003      	movs	r0, #3
  }
}
 8007572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8007576:	f7ff b8af 	b.w	80066d8 <memp_free>
 800757a:	4770      	bx	lr

0800757c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800757c:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800757e:	4605      	mov	r5, r0
 8007580:	b188      	cbz	r0, 80075a6 <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007582:	2003      	movs	r0, #3
 8007584:	f7ff f862 	bl	800664c <memp_malloc>
  if (cseg == NULL) {
 8007588:	4604      	mov	r4, r0
 800758a:	b150      	cbz	r0, 80075a2 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800758c:	6868      	ldr	r0, [r5, #4]
 800758e:	6829      	ldr	r1, [r5, #0]
 8007590:	68aa      	ldr	r2, [r5, #8]
 8007592:	68eb      	ldr	r3, [r5, #12]
 8007594:	6060      	str	r0, [r4, #4]
 8007596:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 8007598:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800759a:	60a2      	str	r2, [r4, #8]
 800759c:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800759e:	f7ff fde3 	bl	8007168 <pbuf_ref>
  return cseg;
}
 80075a2:	4620      	mov	r0, r4
 80075a4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80075a6:	4b04      	ldr	r3, [pc, #16]	; (80075b8 <tcp_seg_copy+0x3c>)
 80075a8:	f240 6282 	movw	r2, #1666	; 0x682
 80075ac:	4903      	ldr	r1, [pc, #12]	; (80075bc <tcp_seg_copy+0x40>)
 80075ae:	4804      	ldr	r0, [pc, #16]	; (80075c0 <tcp_seg_copy+0x44>)
 80075b0:	f005 fc20 	bl	800cdf4 <iprintf>
 80075b4:	e7e5      	b.n	8007582 <tcp_seg_copy+0x6>
 80075b6:	bf00      	nop
 80075b8:	0800e6dc 	.word	0x0800e6dc
 80075bc:	0800e7ac 	.word	0x0800e7ac
 80075c0:	0800dd68 	.word	0x0800dd68

080075c4 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d041      	beq.n	800764c <tcp_pcb_purge+0x88>
{
 80075c8:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 80075ca:	7d03      	ldrb	r3, [r0, #20]
 80075cc:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 80075ce:	2b0a      	cmp	r3, #10
 80075d0:	d001      	beq.n	80075d6 <tcp_pcb_purge+0x12>
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d800      	bhi.n	80075d8 <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 80075d8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80075da:	b118      	cbz	r0, 80075e4 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 80075dc:	f7ff fc42 	bl	8006e64 <pbuf_free>
      pcb->refused_data = NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 80075e4:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 80075e6:	b164      	cbz	r4, 8007602 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 80075e8:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 80075ea:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 80075ec:	6870      	ldr	r0, [r6, #4]
 80075ee:	b108      	cbz	r0, 80075f4 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 80075f0:	f7ff fc38 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80075f4:	4631      	mov	r1, r6
 80075f6:	2003      	movs	r0, #3
 80075f8:	f7ff f86e 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 80075fc:	2c00      	cmp	r4, #0
 80075fe:	d1f3      	bne.n	80075e8 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 8007600:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 8007602:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8007606:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 8007608:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 800760a:	b15c      	cbz	r4, 8007624 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800760c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800760e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8007610:	6870      	ldr	r0, [r6, #4]
 8007612:	b108      	cbz	r0, 8007618 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 8007614:	f7ff fc26 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8007618:	4631      	mov	r1, r6
 800761a:	2003      	movs	r0, #3
 800761c:	f7ff f85c 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 8007620:	2c00      	cmp	r4, #0
 8007622:	d1f3      	bne.n	800760c <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 8007624:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 8007626:	b15c      	cbz	r4, 8007640 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 8007628:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800762a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800762c:	6870      	ldr	r0, [r6, #4]
 800762e:	b108      	cbz	r0, 8007634 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 8007630:	f7ff fc18 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8007634:	4631      	mov	r1, r6
 8007636:	2003      	movs	r0, #3
 8007638:	f7ff f84e 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 800763c:	2c00      	cmp	r4, #0
 800763e:	d1f3      	bne.n	8007628 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 8007646:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 800764a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800764c:	4b03      	ldr	r3, [pc, #12]	; (800765c <tcp_pcb_purge+0x98>)
 800764e:	f640 0251 	movw	r2, #2129	; 0x851
 8007652:	4903      	ldr	r1, [pc, #12]	; (8007660 <tcp_pcb_purge+0x9c>)
 8007654:	4803      	ldr	r0, [pc, #12]	; (8007664 <tcp_pcb_purge+0xa0>)
 8007656:	f005 bbcd 	b.w	800cdf4 <iprintf>
 800765a:	bf00      	nop
 800765c:	0800e6dc 	.word	0x0800e6dc
 8007660:	0800e7c8 	.word	0x0800e7c8
 8007664:	0800dd68 	.word	0x0800dd68

08007668 <tcp_slowtmr>:
{
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800766c:	4da9      	ldr	r5, [pc, #676]	; (8007914 <tcp_slowtmr+0x2ac>)
{
 800766e:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 8007670:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 8007940 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 8007674:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007676:	4fa8      	ldr	r7, [pc, #672]	; (8007918 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 8007678:	3301      	adds	r3, #1
 800767a:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800767c:	f89b 3000 	ldrb.w	r3, [fp]
 8007680:	3301      	adds	r3, #1
 8007682:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 8007686:	4ba5      	ldr	r3, [pc, #660]	; (800791c <tcp_slowtmr+0x2b4>)
 8007688:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800768a:	2c00      	cmp	r4, #0
 800768c:	f000 808a 	beq.w	80077a4 <tcp_slowtmr+0x13c>
  prev = NULL;
 8007690:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007692:	46b1      	mov	r9, r6
 8007694:	7d23      	ldrb	r3, [r4, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80fc 	beq.w	8007894 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800769c:	2b01      	cmp	r3, #1
 800769e:	f000 8104 	beq.w	80078aa <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80076a2:	2b0a      	cmp	r3, #10
 80076a4:	f000 810c 	beq.w	80078c0 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 80076a8:	f89b 2000 	ldrb.w	r2, [fp]
 80076ac:	7fa3      	ldrb	r3, [r4, #30]
 80076ae:	4293      	cmp	r3, r2
 80076b0:	f000 8113 	beq.w	80078da <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80076b4:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 80076b6:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80076be:	f000 8112 	beq.w	80078e6 <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80076c2:	2a0b      	cmp	r2, #11
 80076c4:	f240 80cb 	bls.w	800785e <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 80076c8:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 80076cc:	2b06      	cmp	r3, #6
 80076ce:	f000 80b7 	beq.w	8007840 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80076d2:	f894 a009 	ldrb.w	sl, [r4, #9]
 80076d6:	f01a 0a08 	ands.w	sl, sl, #8
 80076da:	d01d      	beq.n	8007718 <tcp_slowtmr+0xb0>
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d007      	beq.n	80076f0 <tcp_slowtmr+0x88>
 80076e0:	f1a3 0307 	sub.w	r3, r3, #7
 80076e4:	fab3 f383 	clz	r3, r3
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 80b4 	beq.w	8007858 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80076f0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80076f4:	4b8a      	ldr	r3, [pc, #552]	; (8007920 <tcp_slowtmr+0x2b8>)
 80076f6:	488b      	ldr	r0, [pc, #556]	; (8007924 <tcp_slowtmr+0x2bc>)
 80076f8:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076fa:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80076fc:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007700:	6a20      	ldr	r0, [r4, #32]
 8007702:	1a12      	subs	r2, r2, r0
 8007704:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8007708:	f240 8160 	bls.w	80079cc <tcp_slowtmr+0x364>
        ++pcb_remove;
 800770c:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 8007710:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 8007714:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 8007718:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800771a:	b156      	cbz	r6, 8007732 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	6a22      	ldr	r2, [r4, #32]
 8007720:	1a9a      	subs	r2, r3, r2
 8007722:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800772a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800772e:	f080 80e1 	bcs.w	80078f4 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 8007732:	7d23      	ldrb	r3, [r4, #20]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d057      	beq.n	80077e8 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 8007738:	2b09      	cmp	r3, #9
 800773a:	d15a      	bne.n	80077f2 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	6a22      	ldr	r2, [r4, #32]
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	2bf0      	cmp	r3, #240	; 0xf0
 8007744:	d955      	bls.n	80077f2 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 8007746:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8007748:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800774c:	f7ff ff3a 	bl	80075c4 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007750:	4b72      	ldr	r3, [pc, #456]	; (800791c <tcp_slowtmr+0x2b4>)
 8007752:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 8007754:	f1b9 0f00 	cmp.w	r9, #0
 8007758:	f000 817e 	beq.w	8007a58 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800775c:	42a3      	cmp	r3, r4
 800775e:	f000 81da 	beq.w	8007b16 <tcp_slowtmr+0x4ae>
        prev->next = pcb->next;
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 8007768:	f1ba 0f00 	cmp.w	sl, #0
 800776c:	f040 8147 	bne.w	80079fe <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007770:	7d23      	ldrb	r3, [r4, #20]
 8007772:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 8007774:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007778:	f000 8153 	beq.w	8007a22 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 800777c:	4621      	mov	r1, r4
 800777e:	2001      	movs	r0, #1
 8007780:	f7fe ffaa 	bl	80066d8 <memp_free>
      tcp_active_pcbs_changed = 0;
 8007784:	4c68      	ldr	r4, [pc, #416]	; (8007928 <tcp_slowtmr+0x2c0>)
 8007786:	2300      	movs	r3, #0
 8007788:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800778a:	b13e      	cbz	r6, 800779c <tcp_slowtmr+0x134>
 800778c:	f06f 010c 	mvn.w	r1, #12
 8007790:	4650      	mov	r0, sl
 8007792:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 8007794:	7823      	ldrb	r3, [r4, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f47f af75 	bne.w	8007686 <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 800779c:	4644      	mov	r4, r8
  while (pcb != NULL) {
 800779e:	2c00      	cmp	r4, #0
 80077a0:	f47f af78 	bne.w	8007694 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 80077a4:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8007944 <tcp_slowtmr+0x2dc>
 80077a8:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 80077ac:	b1cc      	cbz	r4, 80077e2 <tcp_slowtmr+0x17a>
  prev = NULL;
 80077ae:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80077b0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8007918 <tcp_slowtmr+0x2b0>
 80077b4:	f8df a190 	ldr.w	sl, [pc, #400]	; 8007948 <tcp_slowtmr+0x2e0>
 80077b8:	4f5c      	ldr	r7, [pc, #368]	; (800792c <tcp_slowtmr+0x2c4>)
 80077ba:	7d23      	ldrb	r3, [r4, #20]
 80077bc:	2b0a      	cmp	r3, #10
 80077be:	d006      	beq.n	80077ce <tcp_slowtmr+0x166>
 80077c0:	4643      	mov	r3, r8
 80077c2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80077c6:	4651      	mov	r1, sl
 80077c8:	4638      	mov	r0, r7
 80077ca:	f005 fb13 	bl	800cdf4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	6a22      	ldr	r2, [r4, #32]
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	2bf0      	cmp	r3, #240	; 0xf0
 80077d6:	f200 80d4 	bhi.w	8007982 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 80077da:	4626      	mov	r6, r4
 80077dc:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80077de:	2c00      	cmp	r4, #0
 80077e0:	d1eb      	bne.n	80077ba <tcp_slowtmr+0x152>
}
 80077e2:	b007      	add	sp, #28
 80077e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	6a22      	ldr	r2, [r4, #32]
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	2b28      	cmp	r3, #40	; 0x28
 80077f0:	d8a9      	bhi.n	8007746 <tcp_slowtmr+0xde>
    if (pcb_remove) {
 80077f2:	f1b8 0f00 	cmp.w	r8, #0
 80077f6:	d1a6      	bne.n	8007746 <tcp_slowtmr+0xde>
      ++prev->polltmr;
 80077f8:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80077fa:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 80077fc:	3301      	adds	r3, #1
      pcb = pcb->next;
 80077fe:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 8007800:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8007802:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8007804:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007806:	d815      	bhi.n	8007834 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 8007808:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8007928 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 800780c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 8007810:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8007814:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80ce 	beq.w	80079ba <tcp_slowtmr+0x352>
 800781e:	4621      	mov	r1, r4
 8007820:	6920      	ldr	r0, [r4, #16]
 8007822:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8007824:	f899 3000 	ldrb.w	r3, [r9]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f47f af2c 	bne.w	8007686 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800782e:	2800      	cmp	r0, #0
 8007830:	f000 80c3 	beq.w	80079ba <tcp_slowtmr+0x352>
 8007834:	46a1      	mov	r9, r4
      pcb = pcb->next;
 8007836:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8007838:	2c00      	cmp	r4, #0
 800783a:	f47f af2b 	bne.w	8007694 <tcp_slowtmr+0x2c>
 800783e:	e7b1      	b.n	80077a4 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 8007840:	8b63      	ldrh	r3, [r4, #26]
 8007842:	06db      	lsls	r3, r3, #27
 8007844:	d508      	bpl.n	8007858 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007846:	682b      	ldr	r3, [r5, #0]
 8007848:	6a22      	ldr	r2, [r4, #32]
 800784a:	1a9b      	subs	r3, r3, r2
 800784c:	2b28      	cmp	r3, #40	; 0x28
 800784e:	d903      	bls.n	8007858 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 8007850:	f108 0801 	add.w	r8, r8, #1
 8007854:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 8007858:	f04f 0a00 	mov.w	sl, #0
 800785c:	e75c      	b.n	8007718 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 800785e:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 8007862:	f1b8 0f00 	cmp.w	r8, #0
 8007866:	d071      	beq.n	800794c <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007868:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800786a:	b133      	cbz	r3, 800787a <tcp_slowtmr+0x212>
 800786c:	463b      	mov	r3, r7
 800786e:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007872:	492f      	ldr	r1, [pc, #188]	; (8007930 <tcp_slowtmr+0x2c8>)
 8007874:	482d      	ldr	r0, [pc, #180]	; (800792c <tcp_slowtmr+0x2c4>)
 8007876:	f005 fabd 	bl	800cdf4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800787a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 816c 	beq.w	8007b5a <tcp_slowtmr+0x4f2>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007882:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8007886:	2b0b      	cmp	r3, #11
 8007888:	f240 80d2 	bls.w	8007a30 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 800788c:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 800788e:	f04f 0801 	mov.w	r8, #1
 8007892:	e71b      	b.n	80076cc <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007894:	463b      	mov	r3, r7
 8007896:	f240 42be 	movw	r2, #1214	; 0x4be
 800789a:	4926      	ldr	r1, [pc, #152]	; (8007934 <tcp_slowtmr+0x2cc>)
 800789c:	4823      	ldr	r0, [pc, #140]	; (800792c <tcp_slowtmr+0x2c4>)
 800789e:	f005 faa9 	bl	800cdf4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80078a2:	7d23      	ldrb	r3, [r4, #20]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	f47f aefc 	bne.w	80076a2 <tcp_slowtmr+0x3a>
 80078aa:	463b      	mov	r3, r7
 80078ac:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80078b0:	4921      	ldr	r1, [pc, #132]	; (8007938 <tcp_slowtmr+0x2d0>)
 80078b2:	481e      	ldr	r0, [pc, #120]	; (800792c <tcp_slowtmr+0x2c4>)
 80078b4:	f005 fa9e 	bl	800cdf4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80078b8:	7d23      	ldrb	r3, [r4, #20]
 80078ba:	2b0a      	cmp	r3, #10
 80078bc:	f47f aef4 	bne.w	80076a8 <tcp_slowtmr+0x40>
 80078c0:	463b      	mov	r3, r7
 80078c2:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80078c6:	491d      	ldr	r1, [pc, #116]	; (800793c <tcp_slowtmr+0x2d4>)
 80078c8:	4818      	ldr	r0, [pc, #96]	; (800792c <tcp_slowtmr+0x2c4>)
 80078ca:	f005 fa93 	bl	800cdf4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80078ce:	f89b 2000 	ldrb.w	r2, [fp]
 80078d2:	7fa3      	ldrb	r3, [r4, #30]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	f47f aeed 	bne.w	80076b4 <tcp_slowtmr+0x4c>
      continue;
 80078da:	46a1      	mov	r9, r4
      pcb = pcb->next;
 80078dc:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80078de:	2c00      	cmp	r4, #0
 80078e0:	f47f aed8 	bne.w	8007694 <tcp_slowtmr+0x2c>
 80078e4:	e75e      	b.n	80077a4 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80078e6:	2a05      	cmp	r2, #5
 80078e8:	d9b9      	bls.n	800785e <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 80078ea:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 80078ee:	f04f 0801 	mov.w	r8, #1
 80078f2:	e711      	b.n	8007718 <tcp_slowtmr+0xb0>
 80078f4:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 80078f6:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 80078f8:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 80078fa:	6860      	ldr	r0, [r4, #4]
 80078fc:	b108      	cbz	r0, 8007902 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 80078fe:	f7ff fab1 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8007902:	4621      	mov	r1, r4
 8007904:	2003      	movs	r0, #3
 8007906:	f7fe fee7 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 800790a:	2e00      	cmp	r6, #0
 800790c:	d1f3      	bne.n	80078f6 <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 800790e:	9c05      	ldr	r4, [sp, #20]
 8007910:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007912:	e70e      	b.n	8007732 <tcp_slowtmr+0xca>
 8007914:	24010554 	.word	0x24010554
 8007918:	0800e6dc 	.word	0x0800e6dc
 800791c:	24010544 	.word	0x24010544
 8007920:	000a4cb8 	.word	0x000a4cb8
 8007924:	10624dd3 	.word	0x10624dd3
 8007928:	24010548 	.word	0x24010548
 800792c:	0800dd68 	.word	0x0800dd68
 8007930:	0800e86c 	.word	0x0800e86c
 8007934:	0800e7e4 	.word	0x0800e7e4
 8007938:	0800e810 	.word	0x0800e810
 800793c:	0800e83c 	.word	0x0800e83c
 8007940:	24010559 	.word	0x24010559
 8007944:	2401055c 	.word	0x2401055c
 8007948:	0800e930 	.word	0x0800e930
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800794c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8007950:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8007954:	b291      	uxth	r1, r2
 8007956:	4281      	cmp	r1, r0
 8007958:	d802      	bhi.n	8007960 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 800795a:	3101      	adds	r1, #1
 800795c:	b20a      	sxth	r2, r1
 800795e:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8007960:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8007964:	4291      	cmp	r1, r2
 8007966:	f73f aeb1 	bgt.w	80076cc <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800796a:	4620      	mov	r0, r4
 800796c:	f002 fc5c 	bl	800a228 <tcp_rexmit_rto_prepare>
 8007970:	2800      	cmp	r0, #0
 8007972:	f000 809e 	beq.w	8007ab2 <tcp_slowtmr+0x44a>
 8007976:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8096 	beq.w	8007aaa <tcp_slowtmr+0x442>
    if (pcb->state == FIN_WAIT_2) {
 800797e:	7d23      	ldrb	r3, [r4, #20]
 8007980:	e6a4      	b.n	80076cc <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 8007982:	4620      	mov	r0, r4
 8007984:	f7ff fe1e 	bl	80075c4 <tcp_pcb_purge>
      if (prev != NULL) {
 8007988:	2e00      	cmp	r6, #0
 800798a:	f000 80cc 	beq.w	8007b26 <tcp_slowtmr+0x4be>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800798e:	f8d9 3000 	ldr.w	r3, [r9]
 8007992:	42a3      	cmp	r3, r4
 8007994:	f000 80e9 	beq.w	8007b6a <tcp_slowtmr+0x502>
        prev->next = pcb->next;
 8007998:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800799c:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80079a0:	7d23      	ldrb	r3, [r4, #20]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	f000 80d2 	beq.w	8007b4c <tcp_slowtmr+0x4e4>
  memp_free(MEMP_TCP_PCB, pcb);
 80079a8:	4621      	mov	r1, r4
      pcb = pcb->next;
 80079aa:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 80079ac:	2001      	movs	r0, #1
 80079ae:	f7fe fe93 	bl	80066d8 <memp_free>
  while (pcb != NULL) {
 80079b2:	2c00      	cmp	r4, #0
 80079b4:	f47f af01 	bne.w	80077ba <tcp_slowtmr+0x152>
 80079b8:	e713      	b.n	80077e2 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 80079ba:	4620      	mov	r0, r4
 80079bc:	46a1      	mov	r9, r4
      pcb = pcb->next;
 80079be:	4634      	mov	r4, r6
          tcp_output(prev);
 80079c0:	f002 fd70 	bl	800a4a4 <tcp_output>
  while (pcb != NULL) {
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	f47f ae65 	bne.w	8007694 <tcp_slowtmr+0x2c>
 80079ca:	e6eb      	b.n	80077a4 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80079cc:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 80079d0:	486e      	ldr	r0, [pc, #440]	; (8007b8c <tcp_slowtmr+0x524>)
 80079d2:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 80079d6:	4b6e      	ldr	r3, [pc, #440]	; (8007b90 <tcp_slowtmr+0x528>)
 80079d8:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079dc:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 80079e0:	f67f af3a 	bls.w	8007858 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 80079e4:	4620      	mov	r0, r4
 80079e6:	f002 ff8b 	bl	800a900 <tcp_keepalive>
        if (err == ERR_OK) {
 80079ea:	2800      	cmp	r0, #0
 80079ec:	f47f af34 	bne.w	8007858 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 80079f0:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 80079f4:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 80079f6:	3301      	adds	r3, #1
 80079f8:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 80079fc:	e68c      	b.n	8007718 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80079fe:	8b23      	ldrh	r3, [r4, #24]
 8007a00:	4620      	mov	r0, r4
 8007a02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007a04:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007a06:	9302      	str	r3, [sp, #8]
 8007a08:	8ae3      	ldrh	r3, [r4, #22]
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	1d23      	adds	r3, r4, #4
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4623      	mov	r3, r4
 8007a12:	f002 fccd 	bl	800a3b0 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007a16:	7d23      	ldrb	r3, [r4, #20]
 8007a18:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 8007a1a:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007a1e:	f47f aead 	bne.w	800777c <tcp_slowtmr+0x114>
 8007a22:	463b      	mov	r3, r7
 8007a24:	22d4      	movs	r2, #212	; 0xd4
 8007a26:	495b      	ldr	r1, [pc, #364]	; (8007b94 <tcp_slowtmr+0x52c>)
 8007a28:	485b      	ldr	r0, [pc, #364]	; (8007b98 <tcp_slowtmr+0x530>)
 8007a2a:	f005 f9e3 	bl	800cdf4 <iprintf>
 8007a2e:	e6a5      	b.n	800777c <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007a30:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8007a34:	4a59      	ldr	r2, [pc, #356]	; (8007b9c <tcp_slowtmr+0x534>)
 8007a36:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 8007a38:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007a3c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d216      	bcs.n	8007a72 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 8007a44:	3301      	adds	r3, #1
 8007a46:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 8007a48:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 8007a4a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8007a4e:	d210      	bcs.n	8007a72 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 8007a50:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 8007a52:	f04f 0800 	mov.w	r8, #0
 8007a56:	e639      	b.n	80076cc <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	d006      	beq.n	8007a6a <tcp_slowtmr+0x402>
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	f240 5271 	movw	r2, #1393	; 0x571
 8007a62:	494f      	ldr	r1, [pc, #316]	; (8007ba0 <tcp_slowtmr+0x538>)
 8007a64:	484c      	ldr	r0, [pc, #304]	; (8007b98 <tcp_slowtmr+0x530>)
 8007a66:	f005 f9c5 	bl	800cdf4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007a6a:	68e3      	ldr	r3, [r4, #12]
 8007a6c:	4a4d      	ldr	r2, [pc, #308]	; (8007ba4 <tcp_slowtmr+0x53c>)
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	e67a      	b.n	8007768 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 8007a72:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 8007a76:	b936      	cbnz	r6, 8007a86 <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f002 ff67 	bl	800a94c <tcp_zero_window_probe>
 8007a7e:	b140      	cbz	r0, 8007a92 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 8007a80:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 8007a82:	7d23      	ldrb	r3, [r4, #20]
 8007a84:	e622      	b.n	80076cc <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007a86:	4631      	mov	r1, r6
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f002 fa19 	bl	8009ec0 <tcp_split_unsent_seg>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d073      	beq.n	8007b7a <tcp_slowtmr+0x512>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007a92:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 8007a96:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007a9a:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8007a9c:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
                pcb->persist_backoff++;
 8007aa0:	bf9c      	itt	ls
 8007aa2:	3301      	addls	r3, #1
 8007aa4:	f884 3099 	strbls.w	r3, [r4, #153]	; 0x99
 8007aa8:	e769      	b.n	800797e <tcp_slowtmr+0x316>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007aaa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f43f af66 	beq.w	800797e <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 8007ab2:	7d23      	ldrb	r3, [r4, #20]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d014      	beq.n	8007ae2 <tcp_slowtmr+0x47a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007ab8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007abc:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8007ac0:	2a0c      	cmp	r2, #12
 8007ac2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8007ac6:	bf28      	it	cs
 8007ac8:	220c      	movcs	r2, #12
 8007aca:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8007ace:	4936      	ldr	r1, [pc, #216]	; (8007ba8 <tcp_slowtmr+0x540>)
 8007ad0:	5c8a      	ldrb	r2, [r1, r2]
 8007ad2:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007ad4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	bfa8      	it	ge
 8007adc:	4613      	movge	r3, r2
 8007ade:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007ae2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            tcp_rexmit_rto_commit(pcb);
 8007ae4:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007ae6:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            pcb->cwnd = pcb->mss;
 8007aea:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007af2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->ssthresh = eff_wnd >> 1;
 8007af6:	428b      	cmp	r3, r1
 8007af8:	bf28      	it	cs
 8007afa:	460b      	movcs	r3, r1
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	4293      	cmp	r3, r2
 8007b00:	bf38      	it	cc
 8007b02:	4613      	movcc	r3, r2
 8007b04:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 8007b0c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007b10:	f002 feaa 	bl	800a868 <tcp_rexmit_rto_commit>
 8007b14:	e733      	b.n	800797e <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007b16:	463b      	mov	r3, r7
 8007b18:	f240 526d 	movw	r2, #1389	; 0x56d
 8007b1c:	4923      	ldr	r1, [pc, #140]	; (8007bac <tcp_slowtmr+0x544>)
 8007b1e:	481e      	ldr	r0, [pc, #120]	; (8007b98 <tcp_slowtmr+0x530>)
 8007b20:	f005 f968 	bl	800cdf4 <iprintf>
 8007b24:	e61d      	b.n	8007762 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007b26:	f8d9 3000 	ldr.w	r3, [r9]
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	d006      	beq.n	8007b3c <tcp_slowtmr+0x4d4>
 8007b2e:	4643      	mov	r3, r8
 8007b30:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007b34:	491e      	ldr	r1, [pc, #120]	; (8007bb0 <tcp_slowtmr+0x548>)
 8007b36:	4638      	mov	r0, r7
 8007b38:	f005 f95c 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007b3c:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 8007b3e:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007b42:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 8007b44:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007b48:	f47f af2e 	bne.w	80079a8 <tcp_slowtmr+0x340>
 8007b4c:	4643      	mov	r3, r8
 8007b4e:	22d4      	movs	r2, #212	; 0xd4
 8007b50:	4910      	ldr	r1, [pc, #64]	; (8007b94 <tcp_slowtmr+0x52c>)
 8007b52:	4638      	mov	r0, r7
 8007b54:	f005 f94e 	bl	800cdf4 <iprintf>
 8007b58:	e726      	b.n	80079a8 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007b60:	4914      	ldr	r1, [pc, #80]	; (8007bb4 <tcp_slowtmr+0x54c>)
 8007b62:	480d      	ldr	r0, [pc, #52]	; (8007b98 <tcp_slowtmr+0x530>)
 8007b64:	f005 f946 	bl	800cdf4 <iprintf>
 8007b68:	e68b      	b.n	8007882 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007b6a:	4643      	mov	r3, r8
 8007b6c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007b70:	4911      	ldr	r1, [pc, #68]	; (8007bb8 <tcp_slowtmr+0x550>)
 8007b72:	4638      	mov	r0, r7
 8007b74:	f005 f93e 	bl	800cdf4 <iprintf>
 8007b78:	e70e      	b.n	8007998 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f002 fc92 	bl	800a4a4 <tcp_output>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d186      	bne.n	8007a92 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 8007b84:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 8007b86:	7d23      	ldrb	r3, [r4, #20]
 8007b88:	e5a0      	b.n	80076cc <tcp_slowtmr+0x64>
 8007b8a:	bf00      	nop
 8007b8c:	000124f8 	.word	0x000124f8
 8007b90:	10624dd3 	.word	0x10624dd3
 8007b94:	0800e718 	.word	0x0800e718
 8007b98:	0800dd68 	.word	0x0800dd68
 8007b9c:	0800ebbc 	.word	0x0800ebbc
 8007ba0:	0800e904 	.word	0x0800e904
 8007ba4:	24010544 	.word	0x24010544
 8007ba8:	0800eb9c 	.word	0x0800eb9c
 8007bac:	0800e8d8 	.word	0x0800e8d8
 8007bb0:	0800e988 	.word	0x0800e988
 8007bb4:	0800e8a0 	.word	0x0800e8a0
 8007bb8:	0800e960 	.word	0x0800e960

08007bbc <tcp_pcb_remove>:
{
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	2900      	cmp	r1, #0
 8007bc4:	d04a      	beq.n	8007c5c <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	d051      	beq.n	8007c6e <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	d032      	beq.n	8007c36 <tcp_pcb_remove+0x7a>
 8007bd0:	b12b      	cbz	r3, 8007bde <tcp_pcb_remove+0x22>
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	42a2      	cmp	r2, r4
 8007bd6:	d03e      	beq.n	8007c56 <tcp_pcb_remove+0x9a>
 8007bd8:	4613      	mov	r3, r2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1f9      	bne.n	8007bd2 <tcp_pcb_remove+0x16>
 8007bde:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8007be0:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8007be2:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8007be4:	f7ff fcee 	bl	80075c4 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8007be8:	7d23      	ldrb	r3, [r4, #20]
 8007bea:	2b0a      	cmp	r3, #10
 8007bec:	d02d      	beq.n	8007c4a <tcp_pcb_remove+0x8e>
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d01d      	beq.n	8007c2e <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 8007bf2:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8007bf4:	07da      	lsls	r2, r3, #31
 8007bf6:	d421      	bmi.n	8007c3c <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007bf8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007bfa:	b133      	cbz	r3, 8007c0a <tcp_pcb_remove+0x4e>
 8007bfc:	4b20      	ldr	r3, [pc, #128]	; (8007c80 <tcp_pcb_remove+0xc4>)
 8007bfe:	f640 0293 	movw	r2, #2195	; 0x893
 8007c02:	4920      	ldr	r1, [pc, #128]	; (8007c84 <tcp_pcb_remove+0xc8>)
 8007c04:	4820      	ldr	r0, [pc, #128]	; (8007c88 <tcp_pcb_remove+0xcc>)
 8007c06:	f005 f8f5 	bl	800cdf4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007c0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007c0c:	b133      	cbz	r3, 8007c1c <tcp_pcb_remove+0x60>
 8007c0e:	4b1c      	ldr	r3, [pc, #112]	; (8007c80 <tcp_pcb_remove+0xc4>)
 8007c10:	f640 0294 	movw	r2, #2196	; 0x894
 8007c14:	491d      	ldr	r1, [pc, #116]	; (8007c8c <tcp_pcb_remove+0xd0>)
 8007c16:	481c      	ldr	r0, [pc, #112]	; (8007c88 <tcp_pcb_remove+0xcc>)
 8007c18:	f005 f8ec 	bl	800cdf4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007c1c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007c1e:	b133      	cbz	r3, 8007c2e <tcp_pcb_remove+0x72>
 8007c20:	4b17      	ldr	r3, [pc, #92]	; (8007c80 <tcp_pcb_remove+0xc4>)
 8007c22:	f640 0296 	movw	r2, #2198	; 0x896
 8007c26:	491a      	ldr	r1, [pc, #104]	; (8007c90 <tcp_pcb_remove+0xd4>)
 8007c28:	4817      	ldr	r0, [pc, #92]	; (8007c88 <tcp_pcb_remove+0xcc>)
 8007c2a:	f005 f8e3 	bl	800cdf4 <iprintf>
  pcb->state = CLOSED;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8007c32:	82e3      	strh	r3, [r4, #22]
}
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 8007c36:	68e3      	ldr	r3, [r4, #12]
 8007c38:	602b      	str	r3, [r5, #0]
 8007c3a:	e7d0      	b.n	8007bde <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 8007c3c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8007c40:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8007c42:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8007c44:	f002 fc2e 	bl	800a4a4 <tcp_output>
  if (pcb->state != LISTEN) {
 8007c48:	7d23      	ldrb	r3, [r4, #20]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d0ef      	beq.n	8007c2e <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007c4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1d3      	bne.n	8007bfc <tcp_pcb_remove+0x40>
 8007c54:	e7d9      	b.n	8007c0a <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 8007c56:	68e2      	ldr	r2, [r4, #12]
 8007c58:	60da      	str	r2, [r3, #12]
 8007c5a:	e7c0      	b.n	8007bde <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007c5c:	4b08      	ldr	r3, [pc, #32]	; (8007c80 <tcp_pcb_remove+0xc4>)
 8007c5e:	f640 0283 	movw	r2, #2179	; 0x883
 8007c62:	490c      	ldr	r1, [pc, #48]	; (8007c94 <tcp_pcb_remove+0xd8>)
 8007c64:	4808      	ldr	r0, [pc, #32]	; (8007c88 <tcp_pcb_remove+0xcc>)
 8007c66:	f005 f8c5 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	d1ad      	bne.n	8007bca <tcp_pcb_remove+0xe>
 8007c6e:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <tcp_pcb_remove+0xc4>)
 8007c70:	f640 0284 	movw	r2, #2180	; 0x884
 8007c74:	4908      	ldr	r1, [pc, #32]	; (8007c98 <tcp_pcb_remove+0xdc>)
 8007c76:	4804      	ldr	r0, [pc, #16]	; (8007c88 <tcp_pcb_remove+0xcc>)
 8007c78:	f005 f8bc 	bl	800cdf4 <iprintf>
 8007c7c:	e7a5      	b.n	8007bca <tcp_pcb_remove+0xe>
 8007c7e:	bf00      	nop
 8007c80:	0800e6dc 	.word	0x0800e6dc
 8007c84:	0800e9ec 	.word	0x0800e9ec
 8007c88:	0800dd68 	.word	0x0800dd68
 8007c8c:	0800ea04 	.word	0x0800ea04
 8007c90:	0800ea20 	.word	0x0800ea20
 8007c94:	0800e9b0 	.word	0x0800e9b0
 8007c98:	0800e9cc 	.word	0x0800e9cc

08007c9c <tcp_abandon>:
{
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 8007ca6:	f7fb fbef 	bl	8003488 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007caa:	2d00      	cmp	r5, #0
 8007cac:	f000 80a8 	beq.w	8007e00 <tcp_abandon+0x164>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007cb0:	7d2b      	ldrb	r3, [r5, #20]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	f000 808b 	beq.w	8007dce <tcp_abandon+0x132>
  if (pcb->state == TIME_WAIT) {
 8007cb8:	2b0a      	cmp	r3, #10
 8007cba:	f000 8093 	beq.w	8007de4 <tcp_abandon+0x148>
    seqno = pcb->snd_nxt;
 8007cbe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8007cc0:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 8007cc4:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8007cc8:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 8007ccc:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 8007cce:	b96b      	cbnz	r3, 8007cec <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 8007cd0:	8aef      	ldrh	r7, [r5, #22]
 8007cd2:	2f00      	cmp	r7, #0
 8007cd4:	d052      	beq.n	8007d7c <tcp_abandon+0xe0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007cd6:	4a53      	ldr	r2, [pc, #332]	; (8007e24 <tcp_abandon+0x188>)
 8007cd8:	6813      	ldr	r3, [r2, #0]
 8007cda:	42ab      	cmp	r3, r5
 8007cdc:	d074      	beq.n	8007dc8 <tcp_abandon+0x12c>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d050      	beq.n	8007d84 <tcp_abandon+0xe8>
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	42aa      	cmp	r2, r5
 8007ce6:	d04b      	beq.n	8007d80 <tcp_abandon+0xe4>
 8007ce8:	4613      	mov	r3, r2
 8007cea:	e7f8      	b.n	8007cde <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007cec:	4629      	mov	r1, r5
 8007cee:	484e      	ldr	r0, [pc, #312]	; (8007e28 <tcp_abandon+0x18c>)
      local_port = pcb->local_port;
 8007cf0:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007cf2:	f7ff ff63 	bl	8007bbc <tcp_pcb_remove>
 8007cf6:	4b4d      	ldr	r3, [pc, #308]	; (8007e2c <tcp_abandon+0x190>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007cfc:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8007cfe:	b164      	cbz	r4, 8007d1a <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 8007d00:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8007d02:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8007d04:	f8da 0004 	ldr.w	r0, [sl, #4]
 8007d08:	b108      	cbz	r0, 8007d0e <tcp_abandon+0x72>
      pbuf_free(seg->p);
 8007d0a:	f7ff f8ab 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8007d0e:	4651      	mov	r1, sl
 8007d10:	2003      	movs	r0, #3
 8007d12:	f7fe fce1 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 8007d16:	2c00      	cmp	r4, #0
 8007d18:	d1f2      	bne.n	8007d00 <tcp_abandon+0x64>
    if (pcb->unsent != NULL) {
 8007d1a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8007d1c:	b164      	cbz	r4, 8007d38 <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 8007d1e:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8007d20:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8007d22:	f8da 0004 	ldr.w	r0, [sl, #4]
 8007d26:	b108      	cbz	r0, 8007d2c <tcp_abandon+0x90>
      pbuf_free(seg->p);
 8007d28:	f7ff f89c 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8007d2c:	4651      	mov	r1, sl
 8007d2e:	2003      	movs	r0, #3
 8007d30:	f7fe fcd2 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 8007d34:	2c00      	cmp	r4, #0
 8007d36:	d1f2      	bne.n	8007d1e <tcp_abandon+0x82>
    if (pcb->ooseq != NULL) {
 8007d38:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 8007d3a:	b164      	cbz	r4, 8007d56 <tcp_abandon+0xba>
      pbuf_free(seg->p);
 8007d3c:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8007d3e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8007d40:	f8da 0004 	ldr.w	r0, [sl, #4]
 8007d44:	b108      	cbz	r0, 8007d4a <tcp_abandon+0xae>
      pbuf_free(seg->p);
 8007d46:	f7ff f88d 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8007d4a:	4651      	mov	r1, sl
 8007d4c:	2003      	movs	r0, #3
 8007d4e:	f7fe fcc3 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	d1f2      	bne.n	8007d3c <tcp_abandon+0xa0>
    if (send_rst) {
 8007d56:	b9ce      	cbnz	r6, 8007d8c <tcp_abandon+0xf0>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007d58:	7d2b      	ldrb	r3, [r5, #20]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d024      	beq.n	8007da8 <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 8007d5e:	4629      	mov	r1, r5
 8007d60:	2001      	movs	r0, #1
 8007d62:	f7fe fcb9 	bl	80066d8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007d66:	f1b8 0f00 	cmp.w	r8, #0
 8007d6a:	d02a      	beq.n	8007dc2 <tcp_abandon+0x126>
 8007d6c:	f06f 010c 	mvn.w	r1, #12
 8007d70:	4648      	mov	r0, r9
 8007d72:	4643      	mov	r3, r8
}
 8007d74:	b007      	add	sp, #28
 8007d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007d7a:	4718      	bx	r3
    int send_rst = 0;
 8007d7c:	461e      	mov	r6, r3
 8007d7e:	e7bd      	b.n	8007cfc <tcp_abandon+0x60>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007d80:	68ea      	ldr	r2, [r5, #12]
 8007d82:	60da      	str	r2, [r3, #12]
 8007d84:	2700      	movs	r7, #0
    int send_rst = 0;
 8007d86:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007d88:	60ef      	str	r7, [r5, #12]
 8007d8a:	e7b7      	b.n	8007cfc <tcp_abandon+0x60>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007d8c:	9701      	str	r7, [sp, #4]
 8007d8e:	465a      	mov	r2, fp
 8007d90:	8b2b      	ldrh	r3, [r5, #24]
 8007d92:	4628      	mov	r0, r5
 8007d94:	9905      	ldr	r1, [sp, #20]
 8007d96:	9302      	str	r3, [sp, #8]
 8007d98:	1d2b      	adds	r3, r5, #4
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	f002 fb07 	bl	800a3b0 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007da2:	7d2b      	ldrb	r3, [r5, #20]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d1da      	bne.n	8007d5e <tcp_abandon+0xc2>
 8007da8:	4921      	ldr	r1, [pc, #132]	; (8007e30 <tcp_abandon+0x194>)
 8007daa:	22d4      	movs	r2, #212	; 0xd4
 8007dac:	4b21      	ldr	r3, [pc, #132]	; (8007e34 <tcp_abandon+0x198>)
 8007dae:	4822      	ldr	r0, [pc, #136]	; (8007e38 <tcp_abandon+0x19c>)
 8007db0:	f005 f820 	bl	800cdf4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8007db4:	4629      	mov	r1, r5
 8007db6:	2001      	movs	r0, #1
 8007db8:	f7fe fc8e 	bl	80066d8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007dbc:	f1b8 0f00 	cmp.w	r8, #0
 8007dc0:	d1d4      	bne.n	8007d6c <tcp_abandon+0xd0>
}
 8007dc2:	b007      	add	sp, #28
 8007dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007dc8:	68eb      	ldr	r3, [r5, #12]
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e7da      	b.n	8007d84 <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007dce:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <tcp_abandon+0x198>)
 8007dd0:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007dd4:	4919      	ldr	r1, [pc, #100]	; (8007e3c <tcp_abandon+0x1a0>)
 8007dd6:	4818      	ldr	r0, [pc, #96]	; (8007e38 <tcp_abandon+0x19c>)
 8007dd8:	f005 f80c 	bl	800cdf4 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8007ddc:	7d2b      	ldrb	r3, [r5, #20]
 8007dde:	2b0a      	cmp	r3, #10
 8007de0:	f47f af6d 	bne.w	8007cbe <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007de4:	4629      	mov	r1, r5
 8007de6:	4816      	ldr	r0, [pc, #88]	; (8007e40 <tcp_abandon+0x1a4>)
 8007de8:	f7ff fee8 	bl	8007bbc <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007dec:	7d2b      	ldrb	r3, [r5, #20]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d010      	beq.n	8007e14 <tcp_abandon+0x178>
  memp_free(MEMP_TCP_PCB, pcb);
 8007df2:	4629      	mov	r1, r5
 8007df4:	2001      	movs	r0, #1
}
 8007df6:	b007      	add	sp, #28
 8007df8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8007dfc:	f7fe bc6c 	b.w	80066d8 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <tcp_abandon+0x198>)
 8007e02:	f240 223d 	movw	r2, #573	; 0x23d
 8007e06:	490f      	ldr	r1, [pc, #60]	; (8007e44 <tcp_abandon+0x1a8>)
 8007e08:	480b      	ldr	r0, [pc, #44]	; (8007e38 <tcp_abandon+0x19c>)
}
 8007e0a:	b007      	add	sp, #28
 8007e0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007e10:	f004 bff0 	b.w	800cdf4 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007e14:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <tcp_abandon+0x198>)
 8007e16:	22d4      	movs	r2, #212	; 0xd4
 8007e18:	4905      	ldr	r1, [pc, #20]	; (8007e30 <tcp_abandon+0x194>)
 8007e1a:	4807      	ldr	r0, [pc, #28]	; (8007e38 <tcp_abandon+0x19c>)
 8007e1c:	f004 ffea 	bl	800cdf4 <iprintf>
 8007e20:	e7e7      	b.n	8007df2 <tcp_abandon+0x156>
 8007e22:	bf00      	nop
 8007e24:	2401054c 	.word	0x2401054c
 8007e28:	24010544 	.word	0x24010544
 8007e2c:	24010548 	.word	0x24010548
 8007e30:	0800e718 	.word	0x0800e718
 8007e34:	0800e6dc 	.word	0x0800e6dc
 8007e38:	0800dd68 	.word	0x0800dd68
 8007e3c:	0800ea54 	.word	0x0800ea54
 8007e40:	2401055c 	.word	0x2401055c
 8007e44:	0800ea38 	.word	0x0800ea38

08007e48 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8007e48:	2101      	movs	r1, #1
 8007e4a:	f7ff bf27 	b.w	8007c9c <tcp_abandon>
 8007e4e:	bf00      	nop

08007e50 <tcp_netif_ip_addr_changed_pcblist>:
{
 8007e50:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007e52:	4605      	mov	r5, r0
{
 8007e54:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007e56:	b178      	cbz	r0, 8007e78 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 8007e58:	b134      	cbz	r4, 8007e68 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007e5a:	6822      	ldr	r2, [r4, #0]
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d003      	beq.n	8007e6a <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 8007e62:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8007e64:	2c00      	cmp	r4, #0
 8007e66:	d1f8      	bne.n	8007e5a <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 8007e6a:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	2101      	movs	r1, #1
      pcb = next;
 8007e70:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 8007e72:	f7ff ff13 	bl	8007c9c <tcp_abandon>
      pcb = next;
 8007e76:	e7ef      	b.n	8007e58 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007e78:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8007e7a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007e7e:	4903      	ldr	r1, [pc, #12]	; (8007e8c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8007e80:	4803      	ldr	r0, [pc, #12]	; (8007e90 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8007e82:	f004 ffb7 	bl	800cdf4 <iprintf>
 8007e86:	e7e7      	b.n	8007e58 <tcp_netif_ip_addr_changed_pcblist+0x8>
 8007e88:	0800e6dc 	.word	0x0800e6dc
 8007e8c:	0800ea88 	.word	0x0800ea88
 8007e90:	0800dd68 	.word	0x0800dd68

08007e94 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e94:	4b0f      	ldr	r3, [pc, #60]	; (8007ed4 <tcp_kill_state+0x40>)
 8007e96:	6819      	ldr	r1, [r3, #0]
 8007e98:	b1d1      	cbz	r1, 8007ed0 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <tcp_kill_state+0x44>)
  inactivity = 0;
 8007e9c:	2200      	movs	r2, #0
{
 8007e9e:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ea0:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8007ea2:	4614      	mov	r4, r2
 8007ea4:	e001      	b.n	8007eaa <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ea6:	68c9      	ldr	r1, [r1, #12]
 8007ea8:	b159      	cbz	r1, 8007ec2 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 8007eaa:	7d0b      	ldrb	r3, [r1, #20]
 8007eac:	4283      	cmp	r3, r0
 8007eae:	d1fa      	bne.n	8007ea6 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007eb0:	6a0b      	ldr	r3, [r1, #32]
 8007eb2:	1aeb      	subs	r3, r5, r3
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d3f6      	bcc.n	8007ea6 <tcp_kill_state+0x12>
 8007eb8:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007eba:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ebc:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ebe:	2900      	cmp	r1, #0
 8007ec0:	d1f3      	bne.n	8007eaa <tcp_kill_state+0x16>
  if (inactive != NULL) {
 8007ec2:	b11c      	cbz	r4, 8007ecc <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 8007ec4:	4620      	mov	r0, r4
}
 8007ec6:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8007ec8:	f7ff bee8 	b.w	8007c9c <tcp_abandon>
}
 8007ecc:	bc30      	pop	{r4, r5}
 8007ece:	4770      	bx	lr
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	24010544 	.word	0x24010544
 8007ed8:	24010554 	.word	0x24010554

08007edc <tcp_alloc>:
{
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 8007ee0:	f7fb fad2 	bl	8003488 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	f7fe fbb1 	bl	800664c <memp_malloc>
  if (pcb == NULL) {
 8007eea:	4603      	mov	r3, r0
 8007eec:	b320      	cbz	r0, 8007f38 <tcp_alloc+0x5c>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007eee:	229c      	movs	r2, #156	; 0x9c
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 8007ef4:	f241 64d0 	movw	r4, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007ef8:	f004 ffe1 	bl	800cebe <memset>
    pcb->last_timer = tcp_timer_ctr;
 8007efc:	4943      	ldr	r1, [pc, #268]	; (800800c <tcp_alloc+0x130>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007efe:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007f00:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 8007f02:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 8007f04:	4842      	ldr	r0, [pc, #264]	; (8008010 <tcp_alloc+0x134>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007f06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 8007f0a:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 8007f0e:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007f10:	4a40      	ldr	r2, [pc, #256]	; (8008014 <tcp_alloc+0x138>)
    pcb->recv = tcp_recv_null;
 8007f12:	4941      	ldr	r1, [pc, #260]	; (8008018 <tcp_alloc+0x13c>)
    pcb->snd_buf = TCP_SND_BUF;
 8007f14:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 8007f18:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 8007f1a:	4c40      	ldr	r4, [pc, #256]	; (800801c <tcp_alloc+0x140>)
    pcb->cwnd = 1;
 8007f1c:	4840      	ldr	r0, [pc, #256]	; (8008020 <tcp_alloc+0x144>)
    pcb->recv = tcp_recv_null;
 8007f1e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007f22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 8007f26:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007f28:	493e      	ldr	r1, [pc, #248]	; (8008024 <tcp_alloc+0x148>)
    pcb->cwnd = 1;
 8007f2a:	6498      	str	r0, [r3, #72]	; 0x48
}
 8007f2c:	4618      	mov	r0, r3
    pcb->prio = prio;
 8007f2e:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 8007f30:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007f32:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007f34:	72da      	strb	r2, [r3, #11]
}
 8007f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007f38:	4e3b      	ldr	r6, [pc, #236]	; (8008028 <tcp_alloc+0x14c>)
 8007f3a:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 8007f3c:	b15c      	cbz	r4, 8007f56 <tcp_alloc+0x7a>
    struct tcp_pcb *next = pcb->next;
 8007f3e:	4620      	mov	r0, r4
 8007f40:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8007f42:	8b43      	ldrh	r3, [r0, #26]
 8007f44:	0719      	lsls	r1, r3, #28
 8007f46:	d5f9      	bpl.n	8007f3c <tcp_alloc+0x60>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007f48:	f023 0308 	bic.w	r3, r3, #8
 8007f4c:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8007f4e:	f7ff fa19 	bl	8007384 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	d1f3      	bne.n	8007f3e <tcp_alloc+0x62>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f56:	4b35      	ldr	r3, [pc, #212]	; (800802c <tcp_alloc+0x150>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	b193      	cbz	r3, 8007f82 <tcp_alloc+0xa6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f5c:	4a2c      	ldr	r2, [pc, #176]	; (8008010 <tcp_alloc+0x134>)
 8007f5e:	4618      	mov	r0, r3
 8007f60:	6a19      	ldr	r1, [r3, #32]
 8007f62:	6814      	ldr	r4, [r2, #0]
 8007f64:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	b143      	cbz	r3, 8007f7c <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f6a:	6a1a      	ldr	r2, [r3, #32]
 8007f6c:	1aa2      	subs	r2, r4, r2
 8007f6e:	428a      	cmp	r2, r1
 8007f70:	d3f9      	bcc.n	8007f66 <tcp_alloc+0x8a>
 8007f72:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f74:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f76:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f6      	bne.n	8007f6a <tcp_alloc+0x8e>
  tcp_abandon(pcb, 1);
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	f7ff fe8d 	bl	8007c9c <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f82:	2001      	movs	r0, #1
 8007f84:	f7fe fb62 	bl	800664c <memp_malloc>
    if (pcb == NULL) {
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d1af      	bne.n	8007eee <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 8007f8e:	2009      	movs	r0, #9
 8007f90:	f7ff ff80 	bl	8007e94 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f94:	2001      	movs	r0, #1
 8007f96:	f7fe fb59 	bl	800664c <memp_malloc>
      if (pcb == NULL) {
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d1a6      	bne.n	8007eee <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 8007fa0:	2008      	movs	r0, #8
 8007fa2:	f7ff ff77 	bl	8007e94 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	f7fe fb50 	bl	800664c <memp_malloc>
        if (pcb == NULL) {
 8007fac:	4603      	mov	r3, r0
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d19d      	bne.n	8007eee <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007fb2:	062a      	lsls	r2, r5, #24
 8007fb4:	d427      	bmi.n	8008006 <tcp_alloc+0x12a>
  if (mprio == 0) {
 8007fb6:	b1ed      	cbz	r5, 8007ff4 <tcp_alloc+0x118>
 8007fb8:	462a      	mov	r2, r5
  mprio--;
 8007fba:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fbc:	6832      	ldr	r2, [r6, #0]
  mprio--;
 8007fbe:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fc0:	b1c2      	cbz	r2, 8007ff4 <tcp_alloc+0x118>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007fc2:	4813      	ldr	r0, [pc, #76]	; (8008010 <tcp_alloc+0x134>)
  inactivity = 0;
 8007fc4:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007fc6:	6807      	ldr	r7, [r0, #0]
 8007fc8:	e005      	b.n	8007fd6 <tcp_alloc+0xfa>
 8007fca:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 8007fcc:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 8007fce:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 8007fd0:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fd2:	68d2      	ldr	r2, [r2, #12]
 8007fd4:	b14a      	cbz	r2, 8007fea <tcp_alloc+0x10e>
    if ((pcb->prio < mprio) ||
 8007fd6:	7d50      	ldrb	r0, [r2, #21]
 8007fd8:	4288      	cmp	r0, r1
 8007fda:	d3f6      	bcc.n	8007fca <tcp_alloc+0xee>
 8007fdc:	d1f9      	bne.n	8007fd2 <tcp_alloc+0xf6>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007fde:	6a14      	ldr	r4, [r2, #32]
 8007fe0:	eba7 0e04 	sub.w	lr, r7, r4
 8007fe4:	45b6      	cmp	lr, r6
 8007fe6:	d3f4      	bcc.n	8007fd2 <tcp_alloc+0xf6>
 8007fe8:	e7f0      	b.n	8007fcc <tcp_alloc+0xf0>
  if (inactive != NULL) {
 8007fea:	b11b      	cbz	r3, 8007ff4 <tcp_alloc+0x118>
  tcp_abandon(pcb, 1);
 8007fec:	2101      	movs	r1, #1
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff fe54 	bl	8007c9c <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	f7fe fb29 	bl	800664c <memp_malloc>
  if (pcb != NULL) {
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f47f af76 	bne.w	8007eee <tcp_alloc+0x12>
}
 8008002:	4618      	mov	r0, r3
 8008004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008006:	227f      	movs	r2, #127	; 0x7f
 8008008:	e7d7      	b.n	8007fba <tcp_alloc+0xde>
 800800a:	bf00      	nop
 800800c:	24010559 	.word	0x24010559
 8008010:	24010554 	.word	0x24010554
 8008014:	006ddd00 	.word	0x006ddd00
 8008018:	080081d1 	.word	0x080081d1
 800801c:	0218ffff 	.word	0x0218ffff
 8008020:	16d00001 	.word	0x16d00001
 8008024:	16d016d0 	.word	0x16d016d0
 8008028:	24010544 	.word	0x24010544
 800802c:	2401055c 	.word	0x2401055c

08008030 <tcp_close_shutdown>:
{
 8008030:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008032:	4604      	mov	r4, r0
{
 8008034:	b085      	sub	sp, #20
 8008036:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008038:	2800      	cmp	r0, #0
 800803a:	d06b      	beq.n	8008114 <tcp_close_shutdown+0xe4>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800803c:	7d23      	ldrb	r3, [r4, #20]
 800803e:	b11d      	cbz	r5, 8008048 <tcp_close_shutdown+0x18>
 8008040:	2b04      	cmp	r3, #4
 8008042:	d00c      	beq.n	800805e <tcp_close_shutdown+0x2e>
 8008044:	2b07      	cmp	r3, #7
 8008046:	d00a      	beq.n	800805e <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 8008048:	2b01      	cmp	r3, #1
 800804a:	d06b      	beq.n	8008124 <tcp_close_shutdown+0xf4>
 800804c:	2b02      	cmp	r3, #2
 800804e:	d030      	beq.n	80080b2 <tcp_close_shutdown+0x82>
 8008050:	b333      	cbz	r3, 80080a0 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 8008052:	4620      	mov	r0, r4
}
 8008054:	b005      	add	sp, #20
 8008056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800805a:	f7ff b993 	b.w	8007384 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800805e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8008060:	2a00      	cmp	r2, #0
 8008062:	d037      	beq.n	80080d4 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008064:	8b63      	ldrh	r3, [r4, #26]
 8008066:	06db      	lsls	r3, r3, #27
 8008068:	f140 8085 	bpl.w	8008176 <tcp_close_shutdown+0x146>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800806c:	8b21      	ldrh	r1, [r4, #24]
 800806e:	1d20      	adds	r0, r4, #4
 8008070:	8ae2      	ldrh	r2, [r4, #22]
 8008072:	4623      	mov	r3, r4
 8008074:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008078:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800807a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800807c:	9000      	str	r0, [sp, #0]
 800807e:	4620      	mov	r0, r4
 8008080:	f002 f996 	bl	800a3b0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8008084:	4620      	mov	r0, r4
 8008086:	f7ff fa9d 	bl	80075c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800808a:	4a45      	ldr	r2, [pc, #276]	; (80081a0 <tcp_close_shutdown+0x170>)
 800808c:	6813      	ldr	r3, [r2, #0]
 800808e:	42a3      	cmp	r3, r4
 8008090:	d031      	beq.n	80080f6 <tcp_close_shutdown+0xc6>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d031      	beq.n	80080fa <tcp_close_shutdown+0xca>
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	42a2      	cmp	r2, r4
 800809a:	d069      	beq.n	8008170 <tcp_close_shutdown+0x140>
 800809c:	4613      	mov	r3, r2
 800809e:	e7f8      	b.n	8008092 <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 80080a0:	8ae3      	ldrh	r3, [r4, #22]
 80080a2:	b9eb      	cbnz	r3, 80080e0 <tcp_close_shutdown+0xb0>
  memp_free(MEMP_TCP_PCB, pcb);
 80080a4:	4621      	mov	r1, r4
 80080a6:	2001      	movs	r0, #1
 80080a8:	f7fe fb16 	bl	80066d8 <memp_free>
}
 80080ac:	2000      	movs	r0, #0
 80080ae:	b005      	add	sp, #20
 80080b0:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80080b2:	4621      	mov	r1, r4
 80080b4:	483a      	ldr	r0, [pc, #232]	; (80081a0 <tcp_close_shutdown+0x170>)
 80080b6:	f7ff fd81 	bl	8007bbc <tcp_pcb_remove>
 80080ba:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80080bc:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80080be:	4a39      	ldr	r2, [pc, #228]	; (80081a4 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80080c0:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80080c2:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80080c4:	d1ee      	bne.n	80080a4 <tcp_close_shutdown+0x74>
 80080c6:	4b38      	ldr	r3, [pc, #224]	; (80081a8 <tcp_close_shutdown+0x178>)
 80080c8:	22d4      	movs	r2, #212	; 0xd4
 80080ca:	4938      	ldr	r1, [pc, #224]	; (80081ac <tcp_close_shutdown+0x17c>)
 80080cc:	4838      	ldr	r0, [pc, #224]	; (80081b0 <tcp_close_shutdown+0x180>)
 80080ce:	f004 fe91 	bl	800cdf4 <iprintf>
 80080d2:	e7e7      	b.n	80080a4 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80080d4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80080d6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80080da:	4291      	cmp	r1, r2
 80080dc:	d0b4      	beq.n	8008048 <tcp_close_shutdown+0x18>
 80080de:	e7c1      	b.n	8008064 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80080e0:	4a34      	ldr	r2, [pc, #208]	; (80081b4 <tcp_close_shutdown+0x184>)
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	d051      	beq.n	800818c <tcp_close_shutdown+0x15c>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d03e      	beq.n	800816a <tcp_close_shutdown+0x13a>
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	42a2      	cmp	r2, r4
 80080f0:	d039      	beq.n	8008166 <tcp_close_shutdown+0x136>
 80080f2:	4613      	mov	r3, r2
 80080f4:	e7f8      	b.n	80080e8 <tcp_close_shutdown+0xb8>
      TCP_RMV_ACTIVE(pcb);
 80080f6:	68e3      	ldr	r3, [r4, #12]
 80080f8:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 80080fa:	4b2f      	ldr	r3, [pc, #188]	; (80081b8 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 80080fc:	2000      	movs	r0, #0
 80080fe:	4a29      	ldr	r2, [pc, #164]	; (80081a4 <tcp_close_shutdown+0x174>)
 8008100:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 8008102:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 8008104:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 8008106:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 8008108:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800810a:	d03c      	beq.n	8008186 <tcp_close_shutdown+0x156>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800810c:	7d23      	ldrb	r3, [r4, #20]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d1c8      	bne.n	80080a4 <tcp_close_shutdown+0x74>
 8008112:	e7d8      	b.n	80080c6 <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008114:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <tcp_close_shutdown+0x178>)
 8008116:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800811a:	4928      	ldr	r1, [pc, #160]	; (80081bc <tcp_close_shutdown+0x18c>)
 800811c:	4824      	ldr	r0, [pc, #144]	; (80081b0 <tcp_close_shutdown+0x180>)
 800811e:	f004 fe69 	bl	800cdf4 <iprintf>
 8008122:	e78b      	b.n	800803c <tcp_close_shutdown+0xc>
 8008124:	4926      	ldr	r1, [pc, #152]	; (80081c0 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 8008126:	2000      	movs	r0, #0
  switch (pcb->state) {
 8008128:	4b22      	ldr	r3, [pc, #136]	; (80081b4 <tcp_close_shutdown+0x184>)
 800812a:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800812e:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008130:	b133      	cbz	r3, 8008140 <tcp_close_shutdown+0x110>
    if (pcb->listener == lpcb) {
 8008132:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008134:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8008136:	bf08      	it	eq
 8008138:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1f8      	bne.n	8008132 <tcp_close_shutdown+0x102>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008140:	42a9      	cmp	r1, r5
 8008142:	d002      	beq.n	800814a <tcp_close_shutdown+0x11a>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008144:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8008148:	e7f1      	b.n	800812e <tcp_close_shutdown+0xfe>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800814a:	4621      	mov	r1, r4
 800814c:	481d      	ldr	r0, [pc, #116]	; (80081c4 <tcp_close_shutdown+0x194>)
 800814e:	f7ff fd35 	bl	8007bbc <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008152:	7d23      	ldrb	r3, [r4, #20]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d01c      	beq.n	8008192 <tcp_close_shutdown+0x162>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008158:	4621      	mov	r1, r4
 800815a:	2002      	movs	r0, #2
 800815c:	f7fe fabc 	bl	80066d8 <memp_free>
}
 8008160:	2000      	movs	r0, #0
 8008162:	b005      	add	sp, #20
 8008164:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008166:	68e2      	ldr	r2, [r4, #12]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	2300      	movs	r3, #0
 800816c:	60e3      	str	r3, [r4, #12]
 800816e:	e799      	b.n	80080a4 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 8008170:	68e2      	ldr	r2, [r4, #12]
 8008172:	60da      	str	r2, [r3, #12]
 8008174:	e7c1      	b.n	80080fa <tcp_close_shutdown+0xca>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008176:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <tcp_close_shutdown+0x178>)
 8008178:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800817c:	4912      	ldr	r1, [pc, #72]	; (80081c8 <tcp_close_shutdown+0x198>)
 800817e:	480c      	ldr	r0, [pc, #48]	; (80081b0 <tcp_close_shutdown+0x180>)
 8008180:	f004 fe38 	bl	800cdf4 <iprintf>
 8008184:	e772      	b.n	800806c <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 8008186:	f001 fd69 	bl	8009c5c <tcp_trigger_input_pcb_close>
 800818a:	e78f      	b.n	80080ac <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800818c:	68e3      	ldr	r3, [r4, #12]
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	e7eb      	b.n	800816a <tcp_close_shutdown+0x13a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008192:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <tcp_close_shutdown+0x178>)
 8008194:	22df      	movs	r2, #223	; 0xdf
 8008196:	490d      	ldr	r1, [pc, #52]	; (80081cc <tcp_close_shutdown+0x19c>)
 8008198:	4805      	ldr	r0, [pc, #20]	; (80081b0 <tcp_close_shutdown+0x180>)
 800819a:	f004 fe2b 	bl	800cdf4 <iprintf>
 800819e:	e7db      	b.n	8008158 <tcp_close_shutdown+0x128>
 80081a0:	24010544 	.word	0x24010544
 80081a4:	24010548 	.word	0x24010548
 80081a8:	0800e6dc 	.word	0x0800e6dc
 80081ac:	0800e718 	.word	0x0800e718
 80081b0:	0800dd68 	.word	0x0800dd68
 80081b4:	2401054c 	.word	0x2401054c
 80081b8:	24010588 	.word	0x24010588
 80081bc:	0800eabc 	.word	0x0800eabc
 80081c0:	0800ebb0 	.word	0x0800ebb0
 80081c4:	24010550 	.word	0x24010550
 80081c8:	0800eadc 	.word	0x0800eadc
 80081cc:	0800eaf8 	.word	0x0800eaf8

080081d0 <tcp_recv_null>:
{
 80081d0:	b510      	push	{r4, lr}
 80081d2:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80081d4:	b301      	cbz	r1, 8008218 <tcp_recv_null+0x48>
  if (p != NULL) {
 80081d6:	4614      	mov	r4, r2
 80081d8:	4608      	mov	r0, r1
 80081da:	b142      	cbz	r2, 80081ee <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 80081dc:	8911      	ldrh	r1, [r2, #8]
 80081de:	f7ff f96d 	bl	80074bc <tcp_recved>
    pbuf_free(p);
 80081e2:	4620      	mov	r0, r4
 80081e4:	f7fe fe3e 	bl	8006e64 <pbuf_free>
  return ERR_OK;
 80081e8:	2000      	movs	r0, #0
}
 80081ea:	b002      	add	sp, #8
 80081ec:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80081ee:	b113      	cbz	r3, 80081f6 <tcp_recv_null+0x26>
  return ERR_OK;
 80081f0:	4610      	mov	r0, r2
}
 80081f2:	b002      	add	sp, #8
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 80081f8:	f7fb f946 	bl	8003488 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 80081fc:	9801      	ldr	r0, [sp, #4]
 80081fe:	7d03      	ldrb	r3, [r0, #20]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d003      	beq.n	800820c <tcp_recv_null+0x3c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008204:	8b43      	ldrh	r3, [r0, #26]
 8008206:	f043 0310 	orr.w	r3, r3, #16
 800820a:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800820c:	2101      	movs	r1, #1
}
 800820e:	b002      	add	sp, #8
 8008210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 8008214:	f7ff bf0c 	b.w	8008030 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008218:	4b04      	ldr	r3, [pc, #16]	; (800822c <tcp_recv_null+0x5c>)
 800821a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800821e:	4904      	ldr	r1, [pc, #16]	; (8008230 <tcp_recv_null+0x60>)
 8008220:	4804      	ldr	r0, [pc, #16]	; (8008234 <tcp_recv_null+0x64>)
 8008222:	f004 fde7 	bl	800cdf4 <iprintf>
 8008226:	f06f 000f 	mvn.w	r0, #15
 800822a:	e7de      	b.n	80081ea <tcp_recv_null+0x1a>
 800822c:	0800e6dc 	.word	0x0800e6dc
 8008230:	0800eb14 	.word	0x0800eb14
 8008234:	0800dd68 	.word	0x0800dd68

08008238 <tcp_process_refused_data>:
{
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800823a:	b380      	cbz	r0, 800829e <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800823c:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 800823e:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008240:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8008244:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8008246:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 8008248:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800824a:	b156      	cbz	r6, 8008262 <tcp_process_refused_data+0x2a>
 800824c:	4601      	mov	r1, r0
 800824e:	462a      	mov	r2, r5
 8008250:	6900      	ldr	r0, [r0, #16]
 8008252:	47b0      	blx	r6
    if (err == ERR_OK) {
 8008254:	b158      	cbz	r0, 800826e <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 8008256:	300d      	adds	r0, #13
 8008258:	d01e      	beq.n	8008298 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800825a:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800825e:	67a5      	str	r5, [r4, #120]	; 0x78
}
 8008260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 8008262:	8929      	ldrh	r1, [r5, #8]
 8008264:	f7ff f92a 	bl	80074bc <tcp_recved>
    pbuf_free(p);
 8008268:	4628      	mov	r0, r5
 800826a:	f7fe fdfb 	bl	8006e64 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800826e:	06bb      	lsls	r3, r7, #26
 8008270:	d510      	bpl.n	8008294 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008272:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008274:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8008278:	4293      	cmp	r3, r2
 800827a:	d001      	beq.n	8008280 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800827c:	3301      	adds	r3, #1
 800827e:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008280:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8008284:	b135      	cbz	r5, 8008294 <tcp_process_refused_data+0x5c>
 8008286:	2300      	movs	r3, #0
 8008288:	4621      	mov	r1, r4
 800828a:	6920      	ldr	r0, [r4, #16]
 800828c:	461a      	mov	r2, r3
 800828e:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 8008290:	300d      	adds	r0, #13
 8008292:	d001      	beq.n	8008298 <tcp_process_refused_data+0x60>
  return ERR_OK;
 8008294:	2000      	movs	r0, #0
}
 8008296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 8008298:	f06f 000c 	mvn.w	r0, #12
}
 800829c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <tcp_process_refused_data+0x7c>)
 80082a0:	f240 6209 	movw	r2, #1545	; 0x609
 80082a4:	4904      	ldr	r1, [pc, #16]	; (80082b8 <tcp_process_refused_data+0x80>)
 80082a6:	4805      	ldr	r0, [pc, #20]	; (80082bc <tcp_process_refused_data+0x84>)
 80082a8:	f004 fda4 	bl	800cdf4 <iprintf>
 80082ac:	f06f 000f 	mvn.w	r0, #15
}
 80082b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b2:	bf00      	nop
 80082b4:	0800e6dc 	.word	0x0800e6dc
 80082b8:	0800eb30 	.word	0x0800eb30
 80082bc:	0800dd68 	.word	0x0800dd68

080082c0 <tcp_fasttmr>:
{
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80082c4:	4d1c      	ldr	r5, [pc, #112]	; (8008338 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 80082c6:	2700      	movs	r7, #0
 80082c8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8008340 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 80082cc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80082ce:	4e1b      	ldr	r6, [pc, #108]	; (800833c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80082d0:	3301      	adds	r3, #1
 80082d2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80082d4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 80082d8:	b1bc      	cbz	r4, 800830a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 80082da:	782a      	ldrb	r2, [r5, #0]
 80082dc:	7fa3      	ldrb	r3, [r4, #30]
 80082de:	4293      	cmp	r3, r2
 80082e0:	d015      	beq.n	800830e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 80082e2:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 80082e4:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 80082e6:	07d9      	lsls	r1, r3, #31
 80082e8:	d41a      	bmi.n	8008320 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 80082ea:	071a      	lsls	r2, r3, #28
 80082ec:	d411      	bmi.n	8008312 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 80082ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 80082f0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80082f4:	b133      	cbz	r3, 8008304 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 80082f6:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 80082f8:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 80082fa:	f7ff ff9d 	bl	8008238 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80082fe:	7833      	ldrb	r3, [r6, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e7      	bne.n	80082d4 <tcp_fasttmr+0x14>
      pcb = next;
 8008304:	464c      	mov	r4, r9
  while (pcb != NULL) {
 8008306:	2c00      	cmp	r4, #0
 8008308:	d1e7      	bne.n	80082da <tcp_fasttmr+0x1a>
}
 800830a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 800830e:	68e4      	ldr	r4, [r4, #12]
 8008310:	e7e2      	b.n	80082d8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008312:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8008316:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008318:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800831a:	f7ff f833 	bl	8007384 <tcp_close_shutdown_fin>
 800831e:	e7e6      	b.n	80082ee <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8008320:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8008324:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8008326:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8008328:	f002 f8bc 	bl	800a4a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800832c:	8b63      	ldrh	r3, [r4, #26]
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	b29b      	uxth	r3, r3
 8008334:	8363      	strh	r3, [r4, #26]
 8008336:	e7d8      	b.n	80082ea <tcp_fasttmr+0x2a>
 8008338:	24010559 	.word	0x24010559
 800833c:	24010548 	.word	0x24010548
 8008340:	24010544 	.word	0x24010544

08008344 <tcp_tmr>:
{
 8008344:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8008346:	f7ff ffbb 	bl	80082c0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800834a:	4a06      	ldr	r2, [pc, #24]	; (8008364 <tcp_tmr+0x20>)
 800834c:	7813      	ldrb	r3, [r2, #0]
 800834e:	3301      	adds	r3, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	7013      	strb	r3, [r2, #0]
 8008354:	07db      	lsls	r3, r3, #31
 8008356:	d400      	bmi.n	800835a <tcp_tmr+0x16>
}
 8008358:	bd08      	pop	{r3, pc}
 800835a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800835e:	f7ff b983 	b.w	8007668 <tcp_slowtmr>
 8008362:	bf00      	nop
 8008364:	24010558 	.word	0x24010558

08008368 <tcp_next_iss>:
{
 8008368:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800836a:	b130      	cbz	r0, 800837a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800836c:	4b07      	ldr	r3, [pc, #28]	; (800838c <tcp_next_iss+0x24>)
 800836e:	4a08      	ldr	r2, [pc, #32]	; (8008390 <tcp_next_iss+0x28>)
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	6812      	ldr	r2, [r2, #0]
 8008374:	4410      	add	r0, r2
 8008376:	6018      	str	r0, [r3, #0]
}
 8008378:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800837a:	4b06      	ldr	r3, [pc, #24]	; (8008394 <tcp_next_iss+0x2c>)
 800837c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008380:	4905      	ldr	r1, [pc, #20]	; (8008398 <tcp_next_iss+0x30>)
 8008382:	4806      	ldr	r0, [pc, #24]	; (800839c <tcp_next_iss+0x34>)
 8008384:	f004 fd36 	bl	800cdf4 <iprintf>
 8008388:	e7f0      	b.n	800836c <tcp_next_iss+0x4>
 800838a:	bf00      	nop
 800838c:	24000028 	.word	0x24000028
 8008390:	24010554 	.word	0x24010554
 8008394:	0800e6dc 	.word	0x0800e6dc
 8008398:	0800eb58 	.word	0x0800eb58
 800839c:	0800dd68 	.word	0x0800dd68

080083a0 <tcp_eff_send_mss_netif>:
{
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4605      	mov	r5, r0
 80083a4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80083a6:	b172      	cbz	r2, 80083c6 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 80083a8:	b144      	cbz	r4, 80083bc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 80083aa:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  if (mtu != 0) {
 80083ac:	b133      	cbz	r3, 80083bc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80083ae:	2b28      	cmp	r3, #40	; 0x28
 80083b0:	d906      	bls.n	80083c0 <tcp_eff_send_mss_netif+0x20>
 80083b2:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	429d      	cmp	r5, r3
 80083b8:	bf28      	it	cs
 80083ba:	461d      	movcs	r5, r3
}
 80083bc:	4628      	mov	r0, r5
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	2500      	movs	r5, #0
 80083c2:	4628      	mov	r0, r5
 80083c4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80083c6:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <tcp_eff_send_mss_netif+0x38>)
 80083c8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80083cc:	4903      	ldr	r1, [pc, #12]	; (80083dc <tcp_eff_send_mss_netif+0x3c>)
 80083ce:	4804      	ldr	r0, [pc, #16]	; (80083e0 <tcp_eff_send_mss_netif+0x40>)
 80083d0:	f004 fd10 	bl	800cdf4 <iprintf>
 80083d4:	e7e8      	b.n	80083a8 <tcp_eff_send_mss_netif+0x8>
 80083d6:	bf00      	nop
 80083d8:	0800e6dc 	.word	0x0800e6dc
 80083dc:	0800eb74 	.word	0x0800eb74
 80083e0:	0800dd68 	.word	0x0800dd68

080083e4 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 80083e4:	b308      	cbz	r0, 800842a <tcp_netif_ip_addr_changed+0x46>
{
 80083e6:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 80083e8:	6803      	ldr	r3, [r0, #0]
 80083ea:	4604      	mov	r4, r0
 80083ec:	b903      	cbnz	r3, 80083f0 <tcp_netif_ip_addr_changed+0xc>
}
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80083f0:	4b0e      	ldr	r3, [pc, #56]	; (800842c <tcp_netif_ip_addr_changed+0x48>)
 80083f2:	460d      	mov	r5, r1
 80083f4:	6819      	ldr	r1, [r3, #0]
 80083f6:	f7ff fd2b 	bl	8007e50 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80083fa:	4b0d      	ldr	r3, [pc, #52]	; (8008430 <tcp_netif_ip_addr_changed+0x4c>)
 80083fc:	4620      	mov	r0, r4
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	f7ff fd26 	bl	8007e50 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8008404:	2d00      	cmp	r5, #0
 8008406:	d0f2      	beq.n	80083ee <tcp_netif_ip_addr_changed+0xa>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ef      	beq.n	80083ee <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <tcp_netif_ip_addr_changed+0x50>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0eb      	beq.n	80083ee <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008416:	6819      	ldr	r1, [r3, #0]
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	4291      	cmp	r1, r2
 800841c:	d101      	bne.n	8008422 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800841e:	682a      	ldr	r2, [r5, #0]
 8008420:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1f6      	bne.n	8008416 <tcp_netif_ip_addr_changed+0x32>
}
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	4770      	bx	lr
 800842c:	24010544 	.word	0x24010544
 8008430:	2401054c 	.word	0x2401054c
 8008434:	24010550 	.word	0x24010550

08008438 <tcp_free_ooseq>:
{
 8008438:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800843a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800843c:	b16c      	cbz	r4, 800845a <tcp_free_ooseq+0x22>
 800843e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 8008440:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 8008442:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008444:	6868      	ldr	r0, [r5, #4]
 8008446:	b108      	cbz	r0, 800844c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 8008448:	f7fe fd0c 	bl	8006e64 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800844c:	4629      	mov	r1, r5
 800844e:	2003      	movs	r0, #3
 8008450:	f7fe f942 	bl	80066d8 <memp_free>
  while (seg != NULL) {
 8008454:	2c00      	cmp	r4, #0
 8008456:	d1f3      	bne.n	8008440 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 8008458:	6774      	str	r4, [r6, #116]	; 0x74
}
 800845a:	bd70      	pop	{r4, r5, r6, pc}

0800845c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800845e:	4605      	mov	r5, r0
{
 8008460:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008462:	2800      	cmp	r0, #0
 8008464:	d03e      	beq.n	80084e4 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008466:	68eb      	ldr	r3, [r5, #12]
 8008468:	8998      	ldrh	r0, [r3, #12]
 800846a:	f7fd fd41 	bl	8005ef0 <lwip_htons>
 800846e:	07c2      	lsls	r2, r0, #31
 8008470:	d432      	bmi.n	80084d8 <tcp_oos_insert_segment+0x7c>
 8008472:	4e20      	ldr	r6, [pc, #128]	; (80084f4 <tcp_oos_insert_segment+0x98>)
 8008474:	e005      	b.n	8008482 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 8008476:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8008478:	4620      	mov	r0, r4
 800847a:	f7ff f871 	bl	8007560 <tcp_seg_free>
    while (next &&
 800847e:	463c      	mov	r4, r7
 8008480:	b1ef      	cbz	r7, 80084be <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008482:	68e1      	ldr	r1, [r4, #12]
 8008484:	8923      	ldrh	r3, [r4, #8]
 8008486:	6837      	ldr	r7, [r6, #0]
 8008488:	892a      	ldrh	r2, [r5, #8]
 800848a:	6848      	ldr	r0, [r1, #4]
 800848c:	443a      	add	r2, r7
 800848e:	4403      	add	r3, r0
 8008490:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008492:	2b00      	cmp	r3, #0
 8008494:	db15      	blt.n	80084c2 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008496:	8988      	ldrh	r0, [r1, #12]
 8008498:	f7fd fd2a 	bl	8005ef0 <lwip_htons>
 800849c:	07c3      	lsls	r3, r0, #31
 800849e:	d5ea      	bpl.n	8008476 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80084a0:	68eb      	ldr	r3, [r5, #12]
 80084a2:	2001      	movs	r0, #1
 80084a4:	899f      	ldrh	r7, [r3, #12]
 80084a6:	f7fd fd23 	bl	8005ef0 <lwip_htons>
 80084aa:	68eb      	ldr	r3, [r5, #12]
 80084ac:	4338      	orrs	r0, r7
      next = next->next;
 80084ae:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80084b0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7ff f854 	bl	8007560 <tcp_seg_free>
    while (next &&
 80084b8:	463c      	mov	r4, r7
 80084ba:	2f00      	cmp	r7, #0
 80084bc:	d1e1      	bne.n	8008482 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 80084be:	602c      	str	r4, [r5, #0]
}
 80084c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80084c2:	1a12      	subs	r2, r2, r0
    if (next &&
 80084c4:	2a00      	cmp	r2, #0
 80084c6:	ddfa      	ble.n	80084be <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80084c8:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 80084ca:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80084cc:	b289      	uxth	r1, r1
 80084ce:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80084d0:	f7fe fde6 	bl	80070a0 <pbuf_realloc>
  cseg->next = next;
 80084d4:	602c      	str	r4, [r5, #0]
}
 80084d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 80084d8:	4620      	mov	r0, r4
    next = NULL;
 80084da:	2400      	movs	r4, #0
    tcp_segs_free(next);
 80084dc:	f7ff f82e 	bl	800753c <tcp_segs_free>
  cseg->next = next;
 80084e0:	602c      	str	r4, [r5, #0]
}
 80084e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <tcp_oos_insert_segment+0x9c>)
 80084e6:	f240 421f 	movw	r2, #1055	; 0x41f
 80084ea:	4904      	ldr	r1, [pc, #16]	; (80084fc <tcp_oos_insert_segment+0xa0>)
 80084ec:	4804      	ldr	r0, [pc, #16]	; (8008500 <tcp_oos_insert_segment+0xa4>)
 80084ee:	f004 fc81 	bl	800cdf4 <iprintf>
 80084f2:	e7b8      	b.n	8008466 <tcp_oos_insert_segment+0xa>
 80084f4:	24010584 	.word	0x24010584
 80084f8:	0800ebc4 	.word	0x0800ebc4
 80084fc:	0800ebf8 	.word	0x0800ebf8
 8008500:	0800dd68 	.word	0x0800dd68

08008504 <tcp_input_delayed_close>:
{
 8008504:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008506:	4604      	mov	r4, r0
 8008508:	b1c8      	cbz	r0, 800853e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 800850a:	4b11      	ldr	r3, [pc, #68]	; (8008550 <tcp_input_delayed_close+0x4c>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	f013 0310 	ands.w	r3, r3, #16
 8008512:	d101      	bne.n	8008518 <tcp_input_delayed_close+0x14>
  return 0;
 8008514:	4618      	mov	r0, r3
}
 8008516:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008518:	8b63      	ldrh	r3, [r4, #26]
 800851a:	06db      	lsls	r3, r3, #27
 800851c:	d406      	bmi.n	800852c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800851e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008522:	b11b      	cbz	r3, 800852c <tcp_input_delayed_close+0x28>
 8008524:	f06f 010e 	mvn.w	r1, #14
 8008528:	6920      	ldr	r0, [r4, #16]
 800852a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800852c:	4621      	mov	r1, r4
 800852e:	4809      	ldr	r0, [pc, #36]	; (8008554 <tcp_input_delayed_close+0x50>)
 8008530:	f7ff fb44 	bl	8007bbc <tcp_pcb_remove>
    tcp_free(pcb);
 8008534:	4620      	mov	r0, r4
 8008536:	f7fe ff65 	bl	8007404 <tcp_free>
 800853a:	2001      	movs	r0, #1
}
 800853c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <tcp_input_delayed_close+0x54>)
 8008540:	f240 225a 	movw	r2, #602	; 0x25a
 8008544:	4905      	ldr	r1, [pc, #20]	; (800855c <tcp_input_delayed_close+0x58>)
 8008546:	4806      	ldr	r0, [pc, #24]	; (8008560 <tcp_input_delayed_close+0x5c>)
 8008548:	f004 fc54 	bl	800cdf4 <iprintf>
 800854c:	e7dd      	b.n	800850a <tcp_input_delayed_close+0x6>
 800854e:	bf00      	nop
 8008550:	24010580 	.word	0x24010580
 8008554:	24010544 	.word	0x24010544
 8008558:	0800ebc4 	.word	0x0800ebc4
 800855c:	0800ec20 	.word	0x0800ec20
 8008560:	0800dd68 	.word	0x0800dd68

08008564 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	b083      	sub	sp, #12
 800856a:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800856c:	2900      	cmp	r1, #0
 800856e:	d03d      	beq.n	80085ec <tcp_free_acked_segments.constprop.0+0x88>
 8008570:	4607      	mov	r7, r0
 8008572:	460c      	mov	r4, r1
 8008574:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008638 <tcp_free_acked_segments.constprop.0+0xd4>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008578:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800862c <tcp_free_acked_segments.constprop.0+0xc8>
 800857c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800863c <tcp_free_acked_segments.constprop.0+0xd8>
 8008580:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8008634 <tcp_free_acked_segments.constprop.0+0xd0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008584:	68e3      	ldr	r3, [r4, #12]
 8008586:	6858      	ldr	r0, [r3, #4]
 8008588:	f7fd fcb6 	bl	8005ef8 <lwip_htonl>
 800858c:	68e3      	ldr	r3, [r4, #12]
 800858e:	4605      	mov	r5, r0
 8008590:	8926      	ldrh	r6, [r4, #8]
 8008592:	8998      	ldrh	r0, [r3, #12]
 8008594:	f7fd fcac 	bl	8005ef0 <lwip_htons>
 8008598:	f8d8 3000 	ldr.w	r3, [r8]
 800859c:	f010 0003 	ands.w	r0, r0, #3
 80085a0:	eba5 0503 	sub.w	r5, r5, r3
 80085a4:	bf18      	it	ne
 80085a6:	2001      	movne	r0, #1
 80085a8:	4435      	add	r5, r6
 80085aa:	4405      	add	r5, r0
  while (seg_list != NULL &&
 80085ac:	2d00      	cmp	r5, #0
 80085ae:	dc36      	bgt.n	800861e <tcp_free_acked_segments.constprop.0+0xba>
    seg_list = seg_list->next;
 80085b0:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 80085b4:	f7fe fdcc 	bl	8007150 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80085b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 80085bc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80085be:	4298      	cmp	r0, r3
 80085c0:	d823      	bhi.n	800860a <tcp_free_acked_segments.constprop.0+0xa6>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80085c2:	4919      	ldr	r1, [pc, #100]	; (8008628 <tcp_free_acked_segments.constprop.0+0xc4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80085c4:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80085c6:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 80085c8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80085ca:	880d      	ldrh	r5, [r1, #0]
 80085cc:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80085ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80085d2:	1953      	adds	r3, r2, r5
 80085d4:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 80085d6:	f7fe ffc3 	bl	8007560 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80085da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80085de:	b11b      	cbz	r3, 80085e8 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	ea53 0506 	orrs.w	r5, r3, r6
 80085e6:	d005      	beq.n	80085f4 <tcp_free_acked_segments.constprop.0+0x90>
  while (seg_list != NULL &&
 80085e8:	2e00      	cmp	r6, #0
 80085ea:	d1cb      	bne.n	8008584 <tcp_free_acked_segments.constprop.0+0x20>
 80085ec:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 80085ee:	b003      	add	sp, #12
 80085f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 80085f4:	4b0d      	ldr	r3, [pc, #52]	; (800862c <tcp_free_acked_segments.constprop.0+0xc8>)
 80085f6:	f240 4261 	movw	r2, #1121	; 0x461
 80085fa:	490d      	ldr	r1, [pc, #52]	; (8008630 <tcp_free_acked_segments.constprop.0+0xcc>)
 80085fc:	480d      	ldr	r0, [pc, #52]	; (8008634 <tcp_free_acked_segments.constprop.0+0xd0>)
 80085fe:	f004 fbf9 	bl	800cdf4 <iprintf>
 8008602:	4628      	mov	r0, r5
}
 8008604:	b003      	add	sp, #12
 8008606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800860a:	465b      	mov	r3, fp
 800860c:	f240 4257 	movw	r2, #1111	; 0x457
 8008610:	4651      	mov	r1, sl
 8008612:	4648      	mov	r0, r9
 8008614:	f004 fbee 	bl	800cdf4 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008618:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800861c:	e7d1      	b.n	80085c2 <tcp_free_acked_segments.constprop.0+0x5e>
 800861e:	4620      	mov	r0, r4
}
 8008620:	b003      	add	sp, #12
 8008622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008626:	bf00      	nop
 8008628:	24010578 	.word	0x24010578
 800862c:	0800ebc4 	.word	0x0800ebc4
 8008630:	0800ec70 	.word	0x0800ec70
 8008634:	0800dd68 	.word	0x0800dd68
 8008638:	24010560 	.word	0x24010560
 800863c:	0800ec48 	.word	0x0800ec48

08008640 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008644:	4604      	mov	r4, r0
 8008646:	2800      	cmp	r0, #0
 8008648:	f000 81e2 	beq.w	8008a10 <tcp_receive+0x3d0>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800864c:	7d23      	ldrb	r3, [r4, #20]
 800864e:	2b03      	cmp	r3, #3
 8008650:	f240 80f5 	bls.w	800883e <tcp_receive+0x1fe>

  if (flags & TCP_ACK) {
 8008654:	4baf      	ldr	r3, [pc, #700]	; (8008914 <tcp_receive+0x2d4>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008656:	4eb0      	ldr	r6, [pc, #704]	; (8008918 <tcp_receive+0x2d8>)
  if (flags & TCP_ACK) {
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	06d8      	lsls	r0, r3, #27
 800865c:	d470      	bmi.n	8008740 <tcp_receive+0x100>
 800865e:	4faf      	ldr	r7, [pc, #700]	; (800891c <tcp_receive+0x2dc>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008660:	883b      	ldrh	r3, [r7, #0]
 8008662:	b113      	cbz	r3, 800866a <tcp_receive+0x2a>
 8008664:	7d22      	ldrb	r2, [r4, #20]
 8008666:	2a06      	cmp	r2, #6
 8008668:	d911      	bls.n	800868e <tcp_receive+0x4e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800866a:	6832      	ldr	r2, [r6, #0]
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800866c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800866e:	1ad1      	subs	r1, r2, r3
 8008670:	2900      	cmp	r1, #0
 8008672:	db06      	blt.n	8008682 <tcp_receive+0x42>
 8008674:	f1c3 0301 	rsb	r3, r3, #1
 8008678:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800867a:	1a5b      	subs	r3, r3, r1
 800867c:	4413      	add	r3, r2
 800867e:	2b00      	cmp	r3, #0
 8008680:	dd03      	ble.n	800868a <tcp_receive+0x4a>
      tcp_ack_now(pcb);
 8008682:	8b63      	ldrh	r3, [r4, #26]
 8008684:	f043 0302 	orr.w	r3, r3, #2
 8008688:	8363      	strh	r3, [r4, #26]
    }
  }
}
 800868a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800868e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008690:	6832      	ldr	r2, [r6, #0]
 8008692:	eba1 0802 	sub.w	r8, r1, r2
 8008696:	f1b8 0f01 	cmp.w	r8, #1
 800869a:	d406      	bmi.n	80086aa <tcp_receive+0x6a>
 800869c:	f1c2 0001 	rsb	r0, r2, #1
 80086a0:	1ac3      	subs	r3, r0, r3
 80086a2:	440b      	add	r3, r1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f340 81c2 	ble.w	8008a2e <tcp_receive+0x3ee>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80086aa:	1a53      	subs	r3, r2, r1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f2c0 81b9 	blt.w	8008a24 <tcp_receive+0x3e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80086b2:	f102 0c01 	add.w	ip, r2, #1
 80086b6:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80086b8:	ebac 0301 	sub.w	r3, ip, r1
 80086bc:	1a1b      	subs	r3, r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc39      	bgt.n	8008736 <tcp_receive+0xf6>
      if (pcb->rcv_nxt == seqno) {
 80086c2:	4291      	cmp	r1, r2
 80086c4:	f000 8452 	beq.w	8008f6c <tcp_receive+0x92c>
        if (pcb->ooseq == NULL) {
 80086c8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	f000 835d 	beq.w	8008d8a <tcp_receive+0x74a>
            if (seqno == next->tcphdr->seqno) {
 80086d0:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 80086d2:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80086d6:	f102 3eff 	add.w	lr, r2, #4294967295
            if (seqno == next->tcphdr->seqno) {
 80086da:	6843      	ldr	r3, [r0, #4]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d019      	beq.n	8008714 <tcp_receive+0xd4>
              if (prev == NULL) {
 80086e0:	f1b8 0f00 	cmp.w	r8, #0
 80086e4:	f000 812c 	beq.w	8008940 <tcp_receive+0x300>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80086e8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80086ec:	6849      	ldr	r1, [r1, #4]
 80086ee:	ebae 0101 	sub.w	r1, lr, r1
 80086f2:	2900      	cmp	r1, #0
 80086f4:	db04      	blt.n	8008700 <tcp_receive+0xc0>
 80086f6:	ebac 0103 	sub.w	r1, ip, r3
 80086fa:	2900      	cmp	r1, #0
 80086fc:	f340 834e 	ble.w	8008d9c <tcp_receive+0x75c>
              if (next->next == NULL &&
 8008700:	6829      	ldr	r1, [r5, #0]
 8008702:	46a8      	mov	r8, r5
 8008704:	2900      	cmp	r1, #0
 8008706:	f000 812a 	beq.w	800895e <tcp_receive+0x31e>
 800870a:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800870c:	68e8      	ldr	r0, [r5, #12]
 800870e:	6843      	ldr	r3, [r0, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d1e5      	bne.n	80086e0 <tcp_receive+0xa0>
              if (inseg.len > next->len) {
 8008714:	4882      	ldr	r0, [pc, #520]	; (8008920 <tcp_receive+0x2e0>)
 8008716:	892b      	ldrh	r3, [r5, #8]
 8008718:	8902      	ldrh	r2, [r0, #8]
 800871a:	429a      	cmp	r2, r3
 800871c:	d90b      	bls.n	8008736 <tcp_receive+0xf6>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800871e:	f7fe ff2d 	bl	800757c <tcp_seg_copy>
                if (cseg != NULL) {
 8008722:	b140      	cbz	r0, 8008736 <tcp_receive+0xf6>
                  if (prev != NULL) {
 8008724:	f1b8 0f00 	cmp.w	r8, #0
 8008728:	f000 83f7 	beq.w	8008f1a <tcp_receive+0x8da>
                    prev->next = cseg;
 800872c:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 8008730:	4629      	mov	r1, r5
 8008732:	f7ff fe93 	bl	800845c <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 8008736:	4620      	mov	r0, r4
}
 8008738:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800873c:	f001 be80 	b.w	800a440 <tcp_send_empty_ack>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008740:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008742:	6832      	ldr	r2, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008744:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008748:	1a99      	subs	r1, r3, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800874a:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800874e:	2900      	cmp	r1, #0
 8008750:	db7d      	blt.n	800884e <tcp_receive+0x20e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008752:	4d74      	ldr	r5, [pc, #464]	; (8008924 <tcp_receive+0x2e4>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008754:	4293      	cmp	r3, r2
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008756:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008758:	f000 80cb 	beq.w	80088f2 <tcp_receive+0x2b2>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800875c:	459c      	cmp	ip, r3
 800875e:	f000 80d1 	beq.w	8008904 <tcp_receive+0x2c4>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008762:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008764:	1a19      	subs	r1, r3, r0
 8008766:	2900      	cmp	r1, #0
 8008768:	f340 8085 	ble.w	8008876 <tcp_receive+0x236>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800876c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800876e:	1a9a      	subs	r2, r3, r2
 8008770:	2a00      	cmp	r2, #0
 8008772:	f300 808f 	bgt.w	8008894 <tcp_receive+0x254>
      if (pcb->flags & TF_INFR) {
 8008776:	8b62      	ldrh	r2, [r4, #26]
 8008778:	0750      	lsls	r0, r2, #29
 800877a:	d509      	bpl.n	8008790 <tcp_receive+0x150>
        tcp_clear_flags(pcb, TF_INFR);
 800877c:	f022 0204 	bic.w	r2, r2, #4
 8008780:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008782:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008786:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800878a:	2200      	movs	r2, #0
 800878c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008790:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8008794:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008796:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 8008798:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800879a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800879e:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80087a0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 80087ac:	d913      	bls.n	80087d6 <tcp_receive+0x196>
        if (pcb->cwnd < pcb->ssthresh) {
 80087ae:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80087b2:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 80087b4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80087b8:	429a      	cmp	r2, r3
 80087ba:	f200 81d1 	bhi.w	8008b60 <tcp_receive+0x520>
          TCP_WND_INC(pcb->bytes_acked, acked);
 80087be:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80087c2:	4411      	add	r1, r2
 80087c4:	b289      	uxth	r1, r1
 80087c6:	428a      	cmp	r2, r1
 80087c8:	f200 82c6 	bhi.w	8008d58 <tcp_receive+0x718>
          if (pcb->bytes_acked >= pcb->cwnd) {
 80087cc:	428b      	cmp	r3, r1
 80087ce:	f240 82c5 	bls.w	8008d5c <tcp_receive+0x71c>
 80087d2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80087d6:	4620      	mov	r0, r4
 80087d8:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 80087dc:	f7ff fec2 	bl	8008564 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80087e0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80087e2:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80087e4:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7ff febc 	bl	8008564 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 80087ec:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80087ee:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 80087f0:	fab2 f382 	clz	r3, r2
 80087f4:	095b      	lsrs	r3, r3, #5
 80087f6:	425b      	negs	r3, r3
 80087f8:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 80087fe:	2800      	cmp	r0, #0
 8008800:	f000 81ab 	beq.w	8008b5a <tcp_receive+0x51a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008804:	4b48      	ldr	r3, [pc, #288]	; (8008928 <tcp_receive+0x2e8>)
 8008806:	8819      	ldrh	r1, [r3, #0]
 8008808:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800880c:	440b      	add	r3, r1
 800880e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8008812:	8b63      	ldrh	r3, [r4, #26]
 8008814:	0519      	lsls	r1, r3, #20
 8008816:	f140 8103 	bpl.w	8008a20 <tcp_receive+0x3e0>
        if (pcb->unacked == NULL) {
 800881a:	2a00      	cmp	r2, #0
 800881c:	f000 81b7 	beq.w	8008b8e <tcp_receive+0x54e>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008820:	68d3      	ldr	r3, [r2, #12]
 8008822:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8008824:	6858      	ldr	r0, [r3, #4]
 8008826:	f7fd fb67 	bl	8005ef8 <lwip_htonl>
 800882a:	1a38      	subs	r0, r7, r0
 800882c:	2800      	cmp	r0, #0
 800882e:	f300 80f7 	bgt.w	8008a20 <tcp_receive+0x3e0>
          tcp_clear_flags(pcb, TF_RTO);
 8008832:	8b63      	ldrh	r3, [r4, #26]
 8008834:	4f39      	ldr	r7, [pc, #228]	; (800891c <tcp_receive+0x2dc>)
 8008836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800883a:	8363      	strh	r3, [r4, #26]
 800883c:	e02e      	b.n	800889c <tcp_receive+0x25c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800883e:	4b3b      	ldr	r3, [pc, #236]	; (800892c <tcp_receive+0x2ec>)
 8008840:	f240 427c 	movw	r2, #1148	; 0x47c
 8008844:	493a      	ldr	r1, [pc, #232]	; (8008930 <tcp_receive+0x2f0>)
 8008846:	483b      	ldr	r0, [pc, #236]	; (8008934 <tcp_receive+0x2f4>)
 8008848:	f004 fad4 	bl	800cdf4 <iprintf>
 800884c:	e702      	b.n	8008654 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800884e:	4b3a      	ldr	r3, [pc, #232]	; (8008938 <tcp_receive+0x2f8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008850:	4d34      	ldr	r5, [pc, #208]	; (8008924 <tcp_receive+0x2e4>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	89d9      	ldrh	r1, [r3, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008856:	682b      	ldr	r3, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008858:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800885c:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008860:	4288      	cmp	r0, r1
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008862:	6c60      	ldr	r0, [r4, #68]	; 0x44
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008864:	bf38      	it	cc
 8008866:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800886a:	1a19      	subs	r1, r3, r0
 800886c:	2900      	cmp	r1, #0
      pcb->snd_wl2 = ackno;
 800886e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008872:	f73f af7b 	bgt.w	800876c <tcp_receive+0x12c>
      if (tcplen == 0) {
 8008876:	4f29      	ldr	r7, [pc, #164]	; (800891c <tcp_receive+0x2dc>)
 8008878:	8839      	ldrh	r1, [r7, #0]
 800887a:	b939      	cbnz	r1, 800888c <tcp_receive+0x24c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800887c:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800887e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008880:	f8b4 c060 	ldrh.w	ip, [r4, #96]	; 0x60
 8008884:	4461      	add	r1, ip
 8008886:	4571      	cmp	r1, lr
 8008888:	f000 8191 	beq.w	8008bae <tcp_receive+0x56e>
        pcb->dupacks = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008892:	e003      	b.n	800889c <tcp_receive+0x25c>
      tcp_send_empty_ack(pcb);
 8008894:	4620      	mov	r0, r4
 8008896:	4f21      	ldr	r7, [pc, #132]	; (800891c <tcp_receive+0x2dc>)
 8008898:	f001 fdd2 	bl	800a440 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800889c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800889e:	2900      	cmp	r1, #0
 80088a0:	f43f aede 	beq.w	8008660 <tcp_receive+0x20>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80088a8:	1ad2      	subs	r2, r2, r3
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	f6bf aed8 	bge.w	8008660 <tcp_receive+0x20>
      m = (s16_t)(m - (pcb->sa >> 3));
 80088b0:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80088b4:	b289      	uxth	r1, r1
 80088b6:	4b21      	ldr	r3, [pc, #132]	; (800893c <tcp_receive+0x2fc>)
      m = (s16_t)(m - (pcb->sa >> 3));
 80088b8:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80088bc:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 80088be:	1a2b      	subs	r3, r5, r0
 80088c0:	1a5b      	subs	r3, r3, r1
 80088c2:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 80088c4:	441a      	add	r2, r3
      if (m < 0) {
 80088c6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 80088ca:	b212      	sxth	r2, r2
 80088cc:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 80088ce:	d002      	beq.n	80088d6 <tcp_receive+0x296>
        m = (s16_t) - m;
 80088d0:	1b40      	subs	r0, r0, r5
 80088d2:	4401      	add	r1, r0
 80088d4:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 80088d6:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 80088da:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 80088de:	440b      	add	r3, r1
 80088e0:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80088e2:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 80088e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 80088e8:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80088ea:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80088ee:	6363      	str	r3, [r4, #52]	; 0x34
 80088f0:	e6b6      	b.n	8008660 <tcp_receive+0x20>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80088f2:	ebac 0103 	sub.w	r1, ip, r3
 80088f6:	2900      	cmp	r1, #0
 80088f8:	f6bf af30 	bge.w	800875c <tcp_receive+0x11c>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80088fc:	490e      	ldr	r1, [pc, #56]	; (8008938 <tcp_receive+0x2f8>)
 80088fe:	6809      	ldr	r1, [r1, #0]
 8008900:	89c9      	ldrh	r1, [r1, #14]
 8008902:	e7a9      	b.n	8008858 <tcp_receive+0x218>
 8008904:	490c      	ldr	r1, [pc, #48]	; (8008938 <tcp_receive+0x2f8>)
 8008906:	6809      	ldr	r1, [r1, #0]
 8008908:	89c9      	ldrh	r1, [r1, #14]
 800890a:	458e      	cmp	lr, r1
 800890c:	f4bf af29 	bcs.w	8008762 <tcp_receive+0x122>
 8008910:	e7a2      	b.n	8008858 <tcp_receive+0x218>
 8008912:	bf00      	nop
 8008914:	24010564 	.word	0x24010564
 8008918:	24010584 	.word	0x24010584
 800891c:	2401059e 	.word	0x2401059e
 8008920:	24010568 	.word	0x24010568
 8008924:	24010560 	.word	0x24010560
 8008928:	24010578 	.word	0x24010578
 800892c:	0800ebc4 	.word	0x0800ebc4
 8008930:	0800ecac 	.word	0x0800ecac
 8008934:	0800dd68 	.word	0x0800dd68
 8008938:	24010590 	.word	0x24010590
 800893c:	24010554 	.word	0x24010554
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008940:	1ad1      	subs	r1, r2, r3
 8008942:	2900      	cmp	r1, #0
 8008944:	f6bf aedc 	bge.w	8008700 <tcp_receive+0xc0>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008948:	48af      	ldr	r0, [pc, #700]	; (8008c08 <tcp_receive+0x5c8>)
 800894a:	f7fe fe17 	bl	800757c <tcp_seg_copy>
                  if (cseg != NULL) {
 800894e:	2800      	cmp	r0, #0
 8008950:	f43f aef1 	beq.w	8008736 <tcp_receive+0xf6>
                    tcp_oos_insert_segment(cseg, next);
 8008954:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 8008956:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008958:	f7ff fd80 	bl	800845c <tcp_oos_insert_segment>
 800895c:	e6eb      	b.n	8008736 <tcp_receive+0xf6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800895e:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008960:	2b00      	cmp	r3, #0
 8008962:	f77f aee8 	ble.w	8008736 <tcp_receive+0xf6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008966:	8980      	ldrh	r0, [r0, #12]
 8008968:	f7fd fac2 	bl	8005ef0 <lwip_htons>
 800896c:	07c1      	lsls	r1, r0, #31
 800896e:	f53f aee2 	bmi.w	8008736 <tcp_receive+0xf6>
                next->next = tcp_seg_copy(&inseg);
 8008972:	48a5      	ldr	r0, [pc, #660]	; (8008c08 <tcp_receive+0x5c8>)
 8008974:	f7fe fe02 	bl	800757c <tcp_seg_copy>
 8008978:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800897a:	2800      	cmp	r0, #0
 800897c:	f43f aedb 	beq.w	8008736 <tcp_receive+0xf6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008980:	68eb      	ldr	r3, [r5, #12]
 8008982:	892a      	ldrh	r2, [r5, #8]
 8008984:	6859      	ldr	r1, [r3, #4]
 8008986:	6833      	ldr	r3, [r6, #0]
 8008988:	440a      	add	r2, r1
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	2a00      	cmp	r2, #0
 800898e:	dd05      	ble.n	800899c <tcp_receive+0x35c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008990:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 8008992:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008994:	b299      	uxth	r1, r3
 8008996:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8008998:	f7fe fb82 	bl	80070a0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800899c:	6832      	ldr	r2, [r6, #0]
 800899e:	883b      	ldrh	r3, [r7, #0]
 80089a0:	4413      	add	r3, r2
 80089a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80089a8:	1a9b      	subs	r3, r3, r2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f77f aec3 	ble.w	8008736 <tcp_receive+0xf6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	8998      	ldrh	r0, [r3, #12]
 80089b6:	f7fd fa9b 	bl	8005ef0 <lwip_htons>
 80089ba:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80089bc:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80089be:	f100 82c3 	bmi.w	8008f48 <tcp_receive+0x908>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80089c2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80089c4:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 80089c6:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80089c8:	1a89      	subs	r1, r1, r2
 80089ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80089cc:	4411      	add	r1, r2
 80089ce:	b289      	uxth	r1, r1
 80089d0:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80089d2:	f7fe fb65 	bl	80070a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80089d6:	682b      	ldr	r3, [r5, #0]
 80089d8:	891d      	ldrh	r5, [r3, #8]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	8998      	ldrh	r0, [r3, #12]
 80089de:	f7fd fa87 	bl	8005ef0 <lwip_htons>
 80089e2:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089e6:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 80089e8:	bf18      	it	ne
 80089ea:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 80089ee:	182b      	adds	r3, r5, r0
 80089f0:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089f2:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 80089f4:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089f8:	4413      	add	r3, r2
 80089fa:	4299      	cmp	r1, r3
 80089fc:	f43f ae9b 	beq.w	8008736 <tcp_receive+0xf6>
 8008a00:	4b82      	ldr	r3, [pc, #520]	; (8008c0c <tcp_receive+0x5cc>)
 8008a02:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008a06:	4982      	ldr	r1, [pc, #520]	; (8008c10 <tcp_receive+0x5d0>)
 8008a08:	4882      	ldr	r0, [pc, #520]	; (8008c14 <tcp_receive+0x5d4>)
 8008a0a:	f004 f9f3 	bl	800cdf4 <iprintf>
 8008a0e:	e692      	b.n	8008736 <tcp_receive+0xf6>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008a10:	4b7e      	ldr	r3, [pc, #504]	; (8008c0c <tcp_receive+0x5cc>)
 8008a12:	f240 427b 	movw	r2, #1147	; 0x47b
 8008a16:	4980      	ldr	r1, [pc, #512]	; (8008c18 <tcp_receive+0x5d8>)
 8008a18:	487e      	ldr	r0, [pc, #504]	; (8008c14 <tcp_receive+0x5d4>)
 8008a1a:	f004 f9eb 	bl	800cdf4 <iprintf>
 8008a1e:	e615      	b.n	800864c <tcp_receive+0xc>
 8008a20:	4f7e      	ldr	r7, [pc, #504]	; (8008c1c <tcp_receive+0x5dc>)
 8008a22:	e73b      	b.n	800889c <tcp_receive+0x25c>
        tcp_ack_now(pcb);
 8008a24:	8b63      	ldrh	r3, [r4, #26]
 8008a26:	f043 0302 	orr.w	r3, r3, #2
 8008a2a:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008a2c:	e683      	b.n	8008736 <tcp_receive+0xf6>
      struct pbuf *p = inseg.p;
 8008a2e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8008c08 <tcp_receive+0x5c8>
 8008a32:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	f000 8186 	beq.w	8008d48 <tcp_receive+0x708>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008a3c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008a40:	4598      	cmp	r8, r3
 8008a42:	f200 80d9 	bhi.w	8008bf8 <tcp_receive+0x5b8>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008a46:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 8008a4a:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008a4e:	891a      	ldrh	r2, [r3, #8]
 8008a50:	4542      	cmp	r2, r8
 8008a52:	f0c0 80c6 	bcc.w	8008be2 <tcp_receive+0x5a2>
      inseg.len -= off;
 8008a56:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008a5a:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 8008a5e:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008a62:	b292      	uxth	r2, r2
      inseg.len -= off;
 8008a64:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 8008a68:	896b      	ldrh	r3, [r5, #10]
 8008a6a:	4543      	cmp	r3, r8
 8008a6c:	d20a      	bcs.n	8008a84 <tcp_receive+0x444>
        p->len = 0;
 8008a6e:	2100      	movs	r1, #0
        off -= p->len;
 8008a70:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 8008a74:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 8008a76:	812a      	strh	r2, [r5, #8]
        p = p->next;
 8008a78:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 8008a7a:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 8008a7e:	896b      	ldrh	r3, [r5, #10]
 8008a80:	4543      	cmp	r3, r8
 8008a82:	d3f5      	bcc.n	8008a70 <tcp_receive+0x430>
      pbuf_remove_header(p, off);
 8008a84:	4641      	mov	r1, r8
 8008a86:	4628      	mov	r0, r5
 8008a88:	f7fe f980 	bl	8006d8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a8e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8008a92:	6033      	str	r3, [r6, #0]
 8008a94:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008a96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f43f ae4c 	beq.w	8008736 <tcp_receive+0xf6>
        tcplen = TCP_TCPLEN(&inseg);
 8008a9e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008aa2:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8008aa6:	8998      	ldrh	r0, [r3, #12]
 8008aa8:	f7fd fa22 	bl	8005ef0 <lwip_htons>
 8008aac:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8008ab0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8008ab2:	bf18      	it	ne
 8008ab4:	2001      	movne	r0, #1
 8008ab6:	182b      	adds	r3, r5, r0
 8008ab8:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8008aba:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8008abc:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008abe:	f0c0 8197 	bcc.w	8008df0 <tcp_receive+0x7b0>
        if (pcb->ooseq != NULL) {
 8008ac2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 80b6 	beq.w	8008c36 <tcp_receive+0x5f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008aca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008ace:	8998      	ldrh	r0, [r3, #12]
 8008ad0:	f7fd fa0e 	bl	8005ef0 <lwip_htons>
 8008ad4:	07c2      	lsls	r2, r0, #31
 8008ad6:	f100 80ab 	bmi.w	8008c30 <tcp_receive+0x5f0>
            struct tcp_seg *next = pcb->ooseq;
 8008ada:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8008adc:	b955      	cbnz	r5, 8008af4 <tcp_receive+0x4b4>
 8008ade:	e208      	b.n	8008ef2 <tcp_receive+0x8b2>
              next = next->next;
 8008ae0:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f7fe fd3b 	bl	8007560 <tcp_seg_free>
            while (next &&
 8008aea:	4645      	mov	r5, r8
 8008aec:	f1b8 0f00 	cmp.w	r8, #0
 8008af0:	f000 81ff 	beq.w	8008ef2 <tcp_receive+0x8b2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008af4:	68e8      	ldr	r0, [r5, #12]
 8008af6:	883a      	ldrh	r2, [r7, #0]
 8008af8:	f8d6 e000 	ldr.w	lr, [r6]
 8008afc:	892b      	ldrh	r3, [r5, #8]
 8008afe:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8008b02:	eb02 010e 	add.w	r1, r2, lr
 8008b06:	4463      	add	r3, ip
 8008b08:	1acb      	subs	r3, r1, r3
            while (next &&
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f2c0 81b9 	blt.w	8008e82 <tcp_receive+0x842>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008b10:	8980      	ldrh	r0, [r0, #12]
 8008b12:	f7fd f9ed 	bl	8005ef0 <lwip_htons>
 8008b16:	07c3      	lsls	r3, r0, #31
 8008b18:	d5e2      	bpl.n	8008ae0 <tcp_receive+0x4a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008b1a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008b1e:	8998      	ldrh	r0, [r3, #12]
 8008b20:	f7fd f9e6 	bl	8005ef0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008b24:	0780      	lsls	r0, r0, #30
 8008b26:	d4db      	bmi.n	8008ae0 <tcp_receive+0x4a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008b28:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8008b32:	f7fd f9dd 	bl	8005ef0 <lwip_htons>
 8008b36:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008b3a:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 8008b3e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008b42:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008b44:	b280      	uxth	r0, r0
 8008b46:	f7fd f9d3 	bl	8005ef0 <lwip_htons>
 8008b4a:	f010 0003 	ands.w	r0, r0, #3
 8008b4e:	bf18      	it	ne
 8008b50:	2001      	movne	r0, #1
 8008b52:	4480      	add	r8, r0
 8008b54:	f8a7 8000 	strh.w	r8, [r7]
 8008b58:	e7c2      	b.n	8008ae0 <tcp_receive+0x4a0>
        pcb->unsent_oversize = 0;
 8008b5a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8008b5e:	e651      	b.n	8008804 <tcp_receive+0x1c4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008b60:	8b62      	ldrh	r2, [r4, #26]
 8008b62:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008b66:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008b68:	bf14      	ite	ne
 8008b6a:	2001      	movne	r0, #1
 8008b6c:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008b6e:	fb12 f200 	smulbb	r2, r2, r0
 8008b72:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8008b74:	428a      	cmp	r2, r1
 8008b76:	bf94      	ite	ls
 8008b78:	1898      	addls	r0, r3, r2
 8008b7a:	1858      	addhi	r0, r3, r1
 8008b7c:	b282      	uxth	r2, r0
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	f240 80f5 	bls.w	8008d6e <tcp_receive+0x72e>
 8008b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b88:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8008b8c:	e623      	b.n	80087d6 <tcp_receive+0x196>
          if ((pcb->unsent == NULL) ||
 8008b8e:	b148      	cbz	r0, 8008ba4 <tcp_receive+0x564>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008b90:	68c3      	ldr	r3, [r0, #12]
 8008b92:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8008b94:	6858      	ldr	r0, [r3, #4]
 8008b96:	f7fd f9af 	bl	8005ef8 <lwip_htonl>
 8008b9a:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	f73f af3f 	bgt.w	8008a20 <tcp_receive+0x3e0>
            tcp_clear_flags(pcb, TF_RTO);
 8008ba2:	8b63      	ldrh	r3, [r4, #26]
 8008ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ba8:	4f1c      	ldr	r7, [pc, #112]	; (8008c1c <tcp_receive+0x5dc>)
 8008baa:	8363      	strh	r3, [r4, #26]
 8008bac:	e676      	b.n	800889c <tcp_receive+0x25c>
          if (pcb->rtime >= 0) {
 8008bae:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 8008bb0:	0409      	lsls	r1, r1, #16
 8008bb2:	f53f ae6b 	bmi.w	800888c <tcp_receive+0x24c>
 8008bb6:	4298      	cmp	r0, r3
 8008bb8:	f47f ae68 	bne.w	800888c <tcp_receive+0x24c>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008bbc:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8008bc0:	29ff      	cmp	r1, #255	; 0xff
 8008bc2:	f000 814e 	beq.w	8008e62 <tcp_receive+0x822>
                ++pcb->dupacks;
 8008bc6:	3101      	adds	r1, #1
 8008bc8:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 8008bca:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 8008bcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8008bd0:	f200 8147 	bhi.w	8008e62 <tcp_receive+0x822>
              if (pcb->dupacks >= 3) {
 8008bd4:	f000 8151 	beq.w	8008e7a <tcp_receive+0x83a>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bda:	2900      	cmp	r1, #0
 8008bdc:	f47f ae63 	bne.w	80088a6 <tcp_receive+0x266>
 8008be0:	e544      	b.n	800866c <tcp_receive+0x2c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008be2:	4b0a      	ldr	r3, [pc, #40]	; (8008c0c <tcp_receive+0x5cc>)
 8008be4:	f240 5297 	movw	r2, #1431	; 0x597
 8008be8:	490d      	ldr	r1, [pc, #52]	; (8008c20 <tcp_receive+0x5e0>)
 8008bea:	480a      	ldr	r0, [pc, #40]	; (8008c14 <tcp_receive+0x5d4>)
 8008bec:	f004 f902 	bl	800cdf4 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008bf0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008bf4:	891a      	ldrh	r2, [r3, #8]
 8008bf6:	e72e      	b.n	8008a56 <tcp_receive+0x416>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <tcp_receive+0x5cc>)
 8008bfa:	f240 5295 	movw	r2, #1429	; 0x595
 8008bfe:	4909      	ldr	r1, [pc, #36]	; (8008c24 <tcp_receive+0x5e4>)
 8008c00:	4804      	ldr	r0, [pc, #16]	; (8008c14 <tcp_receive+0x5d4>)
 8008c02:	f004 f8f7 	bl	800cdf4 <iprintf>
 8008c06:	e71e      	b.n	8008a46 <tcp_receive+0x406>
 8008c08:	24010568 	.word	0x24010568
 8008c0c:	0800ebc4 	.word	0x0800ebc4
 8008c10:	0800ecf8 	.word	0x0800ecf8
 8008c14:	0800dd68 	.word	0x0800dd68
 8008c18:	0800ec90 	.word	0x0800ec90
 8008c1c:	2401059e 	.word	0x2401059e
 8008c20:	0800ece8 	.word	0x0800ece8
 8008c24:	0800ecd8 	.word	0x0800ecd8
              pcb->ooseq = pcb->ooseq->next;
 8008c28:	6803      	ldr	r3, [r0, #0]
 8008c2a:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008c2c:	f7fe fc98 	bl	8007560 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008c30:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d1f8      	bne.n	8008c28 <tcp_receive+0x5e8>
        pcb->rcv_nxt = seqno + tcplen;
 8008c36:	883a      	ldrh	r2, [r7, #0]
 8008c38:	6831      	ldr	r1, [r6, #0]
 8008c3a:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008c3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8008c3e:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008c40:	4293      	cmp	r3, r2
 8008c42:	f0c0 80cb 	bcc.w	8008ddc <tcp_receive+0x79c>
        pcb->rcv_wnd -= tcplen;
 8008c46:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 8008c48:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8008c4a:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8008c4c:	f7fe fbf8 	bl	8007440 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8008c50:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c54:	891a      	ldrh	r2, [r3, #8]
 8008c56:	b122      	cbz	r2, 8008c62 <tcp_receive+0x622>
          recv_data = inseg.p;
 8008c58:	4ab1      	ldr	r2, [pc, #708]	; (8008f20 <tcp_receive+0x8e0>)
 8008c5a:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c62:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008c66:	8998      	ldrh	r0, [r3, #12]
 8008c68:	f7fd f942 	bl	8005ef0 <lwip_htons>
 8008c6c:	07c2      	lsls	r2, r0, #31
 8008c6e:	d504      	bpl.n	8008c7a <tcp_receive+0x63a>
          recv_flags |= TF_GOT_FIN;
 8008c70:	4aac      	ldr	r2, [pc, #688]	; (8008f24 <tcp_receive+0x8e4>)
 8008c72:	7813      	ldrb	r3, [r2, #0]
 8008c74:	f043 0320 	orr.w	r3, r3, #32
 8008c78:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8008c7a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8008c7c:	2d00      	cmp	r5, #0
 8008c7e:	d07b      	beq.n	8008d78 <tcp_receive+0x738>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008c80:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8008f2c <tcp_receive+0x8ec>
 8008c84:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8008f44 <tcp_receive+0x904>
 8008c88:	4fa7      	ldr	r7, [pc, #668]	; (8008f28 <tcp_receive+0x8e8>)
 8008c8a:	e033      	b.n	8008cf4 <tcp_receive+0x6b4>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008c8c:	68eb      	ldr	r3, [r5, #12]
 8008c8e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008c92:	8998      	ldrh	r0, [r3, #12]
 8008c94:	f7fd f92c 	bl	8005ef0 <lwip_htons>
 8008c98:	f010 0003 	ands.w	r0, r0, #3
 8008c9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008c9e:	bf18      	it	ne
 8008ca0:	2001      	movne	r0, #1
 8008ca2:	4450      	add	r0, sl
 8008ca4:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 8008ca6:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008ca8:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8008caa:	f7fe fbc9 	bl	8007440 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8008cae:	6869      	ldr	r1, [r5, #4]
 8008cb0:	890b      	ldrh	r3, [r1, #8]
 8008cb2:	b13b      	cbz	r3, 8008cc4 <tcp_receive+0x684>
            if (recv_data) {
 8008cb4:	4b9a      	ldr	r3, [pc, #616]	; (8008f20 <tcp_receive+0x8e0>)
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d05b      	beq.n	8008d74 <tcp_receive+0x734>
              pbuf_cat(recv_data, cseg->p);
 8008cbc:	f7fe fa72 	bl	80071a4 <pbuf_cat>
            cseg->p = NULL;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008cc4:	68eb      	ldr	r3, [r5, #12]
 8008cc6:	8998      	ldrh	r0, [r3, #12]
 8008cc8:	f7fd f912 	bl	8005ef0 <lwip_htons>
 8008ccc:	07c3      	lsls	r3, r0, #31
 8008cce:	d509      	bpl.n	8008ce4 <tcp_receive+0x6a4>
            recv_flags |= TF_GOT_FIN;
 8008cd0:	4a94      	ldr	r2, [pc, #592]	; (8008f24 <tcp_receive+0x8e4>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008cd2:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8008cd4:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008cd6:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8008cd8:	f043 0320 	orr.w	r3, r3, #32
 8008cdc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008cde:	d101      	bne.n	8008ce4 <tcp_receive+0x6a4>
              pcb->state = CLOSE_WAIT;
 8008ce0:	2307      	movs	r3, #7
 8008ce2:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8008ce4:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8008ce6:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8008ce8:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8008cea:	f7fe fc39 	bl	8007560 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008cee:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8008cf0:	2d00      	cmp	r5, #0
 8008cf2:	d041      	beq.n	8008d78 <tcp_receive+0x738>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008cf4:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8008cf6:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008cf8:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8008cfa:	428b      	cmp	r3, r1
 8008cfc:	d13c      	bne.n	8008d78 <tcp_receive+0x738>
          seqno = pcb->ooseq->tcphdr->seqno;
 8008cfe:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008d00:	8990      	ldrh	r0, [r2, #12]
 8008d02:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008d06:	f7fd f8f3 	bl	8005ef0 <lwip_htons>
 8008d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d0c:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008d10:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008d14:	bf18      	it	ne
 8008d16:	2001      	movne	r0, #1
 8008d18:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008d1a:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008d1c:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008d1e:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008d22:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008d24:	8998      	ldrh	r0, [r3, #12]
 8008d26:	f7fd f8e3 	bl	8005ef0 <lwip_htons>
 8008d2a:	f010 0003 	ands.w	r0, r0, #3
 8008d2e:	bf18      	it	ne
 8008d30:	2001      	movne	r0, #1
 8008d32:	4458      	add	r0, fp
 8008d34:	4582      	cmp	sl, r0
 8008d36:	d2a9      	bcs.n	8008c8c <tcp_receive+0x64c>
 8008d38:	464b      	mov	r3, r9
 8008d3a:	f240 622b 	movw	r2, #1579	; 0x62b
 8008d3e:	4641      	mov	r1, r8
 8008d40:	4638      	mov	r0, r7
 8008d42:	f004 f857 	bl	800cdf4 <iprintf>
 8008d46:	e7a1      	b.n	8008c8c <tcp_receive+0x64c>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008d48:	4b78      	ldr	r3, [pc, #480]	; (8008f2c <tcp_receive+0x8ec>)
 8008d4a:	f240 5294 	movw	r2, #1428	; 0x594
 8008d4e:	4978      	ldr	r1, [pc, #480]	; (8008f30 <tcp_receive+0x8f0>)
 8008d50:	4875      	ldr	r0, [pc, #468]	; (8008f28 <tcp_receive+0x8e8>)
 8008d52:	f004 f84f 	bl	800cdf4 <iprintf>
 8008d56:	e671      	b.n	8008a3c <tcp_receive+0x3fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008d58:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008d5c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008d5e:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008d60:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008d62:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008d66:	b292      	uxth	r2, r2
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	f63f af0b 	bhi.w	8008b84 <tcp_receive+0x544>
 8008d6e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8008d72:	e530      	b.n	80087d6 <tcp_receive+0x196>
              recv_data = cseg->p;
 8008d74:	6019      	str	r1, [r3, #0]
 8008d76:	e7a3      	b.n	8008cc0 <tcp_receive+0x680>
        tcp_ack(pcb);
 8008d78:	8b63      	ldrh	r3, [r4, #26]
 8008d7a:	07d8      	lsls	r0, r3, #31
 8008d7c:	d50a      	bpl.n	8008d94 <tcp_receive+0x754>
 8008d7e:	f023 0301 	bic.w	r3, r3, #1
 8008d82:	f043 0302 	orr.w	r3, r3, #2
 8008d86:	8363      	strh	r3, [r4, #26]
 8008d88:	e47f      	b.n	800868a <tcp_receive+0x4a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008d8a:	486a      	ldr	r0, [pc, #424]	; (8008f34 <tcp_receive+0x8f4>)
 8008d8c:	f7fe fbf6 	bl	800757c <tcp_seg_copy>
 8008d90:	6760      	str	r0, [r4, #116]	; 0x74
 8008d92:	e4d0      	b.n	8008736 <tcp_receive+0xf6>
        tcp_ack(pcb);
 8008d94:	f043 0301 	orr.w	r3, r3, #1
 8008d98:	8363      	strh	r3, [r4, #26]
 8008d9a:	e476      	b.n	800868a <tcp_receive+0x4a>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008d9c:	4865      	ldr	r0, [pc, #404]	; (8008f34 <tcp_receive+0x8f4>)
 8008d9e:	f7fe fbed 	bl	800757c <tcp_seg_copy>
                  if (cseg != NULL) {
 8008da2:	4607      	mov	r7, r0
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f43f acc6 	beq.w	8008736 <tcp_receive+0xf6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008daa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dae:	6832      	ldr	r2, [r6, #0]
 8008db0:	6859      	ldr	r1, [r3, #4]
 8008db2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008db6:	440b      	add	r3, r1
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dd07      	ble.n	8008dce <tcp_receive+0x78e>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008dbe:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 8008dc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008dc4:	b291      	uxth	r1, r2
 8008dc6:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008dca:	f7fe f969 	bl	80070a0 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4638      	mov	r0, r7
                    prev->next = cseg;
 8008dd2:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8008dd6:	f7ff fb41 	bl	800845c <tcp_oos_insert_segment>
 8008dda:	e4ac      	b.n	8008736 <tcp_receive+0xf6>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008ddc:	4b53      	ldr	r3, [pc, #332]	; (8008f2c <tcp_receive+0x8ec>)
 8008dde:	f240 6207 	movw	r2, #1543	; 0x607
 8008de2:	4955      	ldr	r1, [pc, #340]	; (8008f38 <tcp_receive+0x8f8>)
 8008de4:	4850      	ldr	r0, [pc, #320]	; (8008f28 <tcp_receive+0x8e8>)
 8008de6:	f004 f805 	bl	800cdf4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008dea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008dec:	883a      	ldrh	r2, [r7, #0]
 8008dee:	e72a      	b.n	8008c46 <tcp_receive+0x606>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008df0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008df4:	8998      	ldrh	r0, [r3, #12]
 8008df6:	f7fd f87b 	bl	8005ef0 <lwip_htons>
 8008dfa:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008dfc:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008e00:	d47b      	bmi.n	8008efa <tcp_receive+0x8ba>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008e02:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008e04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008e06:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e0a:	f7fd f871 	bl	8005ef0 <lwip_htons>
 8008e0e:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8008e10:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e14:	d503      	bpl.n	8008e1e <tcp_receive+0x7de>
            inseg.len -= 1;
 8008e16:	3901      	subs	r1, #1
 8008e18:	b289      	uxth	r1, r1
 8008e1a:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8008e1e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8008e22:	f7fe f93d 	bl	80070a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008e26:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008e2a:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8008e2e:	8998      	ldrh	r0, [r3, #12]
 8008e30:	f7fd f85e 	bl	8005ef0 <lwip_htons>
 8008e34:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008e38:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8008e3a:	bf18      	it	ne
 8008e3c:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008e3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8008e40:	182b      	adds	r3, r5, r0
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008e46:	4413      	add	r3, r2
 8008e48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008e4a:	440a      	add	r2, r1
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	f43f ae38 	beq.w	8008ac2 <tcp_receive+0x482>
 8008e52:	4b36      	ldr	r3, [pc, #216]	; (8008f2c <tcp_receive+0x8ec>)
 8008e54:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008e58:	4938      	ldr	r1, [pc, #224]	; (8008f3c <tcp_receive+0x8fc>)
 8008e5a:	4833      	ldr	r0, [pc, #204]	; (8008f28 <tcp_receive+0x8e8>)
 8008e5c:	f003 ffca 	bl	800cdf4 <iprintf>
 8008e60:	e62f      	b.n	8008ac2 <tcp_receive+0x482>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008e62:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008e66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e6a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008e6c:	4413      	add	r3, r2
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	429a      	cmp	r2, r3
 8008e72:	bf88      	it	hi
 8008e74:	460b      	movhi	r3, r1
 8008e76:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f001 fa5e 	bl	800a33c <tcp_rexmit_fast>
      if (!found_dupack) {
 8008e80:	e50c      	b.n	800889c <tcp_receive+0x25c>
                TCP_SEQ_GT(seqno + tcplen,
 8008e82:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	dc01      	bgt.n	8008e8e <tcp_receive+0x84e>
            pcb->ooseq = next;
 8008e8a:	6765      	str	r5, [r4, #116]	; 0x74
 8008e8c:	e6d6      	b.n	8008c3c <tcp_receive+0x5fc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e8e:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e92:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e96:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e9a:	8998      	ldrh	r0, [r3, #12]
 8008e9c:	f7fd f828 	bl	8005ef0 <lwip_htons>
 8008ea0:	0781      	lsls	r1, r0, #30
 8008ea2:	d504      	bpl.n	8008eae <tcp_receive+0x86e>
                inseg.len -= 1;
 8008ea4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8008eae:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8008eb2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8008eb6:	f7fe f8f3 	bl	80070a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008eba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008ebe:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 8008ec2:	8998      	ldrh	r0, [r3, #12]
 8008ec4:	f7fd f814 	bl	8005ef0 <lwip_htons>
 8008ec8:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008ecc:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 8008ece:	bf18      	it	ne
 8008ed0:	2001      	movne	r0, #1
 8008ed2:	eb08 0200 	add.w	r2, r8, r0
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008eda:	6859      	ldr	r1, [r3, #4]
 8008edc:	6833      	ldr	r3, [r6, #0]
 8008ede:	4413      	add	r3, r2
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	d0d2      	beq.n	8008e8a <tcp_receive+0x84a>
 8008ee4:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <tcp_receive+0x8ec>)
 8008ee6:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008eea:	4915      	ldr	r1, [pc, #84]	; (8008f40 <tcp_receive+0x900>)
 8008eec:	480e      	ldr	r0, [pc, #56]	; (8008f28 <tcp_receive+0x8e8>)
 8008eee:	f003 ff81 	bl	800cdf4 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 8008ef2:	883a      	ldrh	r2, [r7, #0]
 8008ef4:	6831      	ldr	r1, [r6, #0]
 8008ef6:	4411      	add	r1, r2
 8008ef8:	e7c7      	b.n	8008e8a <tcp_receive+0x84a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008efa:	899d      	ldrh	r5, [r3, #12]
 8008efc:	4628      	mov	r0, r5
 8008efe:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8008f02:	f7fc fff5 	bl	8005ef0 <lwip_htons>
 8008f06:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008f0a:	f7fc fff1 	bl	8005ef0 <lwip_htons>
 8008f0e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008f12:	4328      	orrs	r0, r5
 8008f14:	8198      	strh	r0, [r3, #12]
 8008f16:	b280      	uxth	r0, r0
 8008f18:	e774      	b.n	8008e04 <tcp_receive+0x7c4>
                    pcb->ooseq = cseg;
 8008f1a:	6760      	str	r0, [r4, #116]	; 0x74
 8008f1c:	e408      	b.n	8008730 <tcp_receive+0xf0>
 8008f1e:	bf00      	nop
 8008f20:	2401057c 	.word	0x2401057c
 8008f24:	24010580 	.word	0x24010580
 8008f28:	0800dd68 	.word	0x0800dd68
 8008f2c:	0800ebc4 	.word	0x0800ebc4
 8008f30:	0800ecc8 	.word	0x0800ecc8
 8008f34:	24010568 	.word	0x24010568
 8008f38:	0800ed6c 	.word	0x0800ed6c
 8008f3c:	0800ecf8 	.word	0x0800ecf8
 8008f40:	0800ed30 	.word	0x0800ed30
 8008f44:	0800ed8c 	.word	0x0800ed8c
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8008f4e:	4640      	mov	r0, r8
 8008f50:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8008f54:	f7fc ffcc 	bl	8005ef0 <lwip_htons>
 8008f58:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008f5c:	f7fc ffc8 	bl	8005ef0 <lwip_htons>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	ea40 0008 	orr.w	r0, r0, r8
 8008f66:	68da      	ldr	r2, [r3, #12]
 8008f68:	8190      	strh	r0, [r2, #12]
 8008f6a:	e52a      	b.n	80089c2 <tcp_receive+0x382>
 8008f6c:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8008f74 <tcp_receive+0x934>
 8008f70:	e595      	b.n	8008a9e <tcp_receive+0x45e>
 8008f72:	bf00      	nop
 8008f74:	24010568 	.word	0x24010568

08008f78 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d07b      	beq.n	800907a <tcp_parseopt+0x102>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008f82:	4b4b      	ldr	r3, [pc, #300]	; (80090b0 <tcp_parseopt+0x138>)
 8008f84:	8818      	ldrh	r0, [r3, #0]
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d03c      	beq.n	8009004 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f8a:	4b4a      	ldr	r3, [pc, #296]	; (80090b4 <tcp_parseopt+0x13c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80090cc <tcp_parseopt+0x154>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008f92:	f240 5ab3 	movw	sl, #1459	; 0x5b3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f96:	f8b3 e000 	ldrh.w	lr, [r3]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008f9a:	4611      	mov	r1, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f9c:	4b46      	ldr	r3, [pc, #280]	; (80090b8 <tcp_parseopt+0x140>)
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008f9e:	f240 59b4 	movw	r9, #1460	; 0x5b4
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008fa2:	fa5f f78e 	uxtb.w	r7, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008fa6:	f8a8 2000 	strh.w	r2, [r8]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008faa:	681c      	ldr	r4, [r3, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008fac:	4b43      	ldr	r3, [pc, #268]	; (80090bc <tcp_parseopt+0x144>)
 8008fae:	681e      	ldr	r6, [r3, #0]
 8008fb0:	f101 0c14 	add.w	ip, r1, #20
 8008fb4:	44b4      	add	ip, r6
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008fb6:	4288      	cmp	r0, r1
  u16_t optidx = tcp_optidx++;
 8008fb8:	f101 0301 	add.w	r3, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008fbc:	d96b      	bls.n	8009096 <tcp_parseopt+0x11e>
  u16_t optidx = tcp_optidx++;
 8008fbe:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008fc0:	b1b4      	cbz	r4, 8008ff0 <tcp_parseopt+0x78>
 8008fc2:	458e      	cmp	lr, r1
    return tcphdr_opt2[idx];
 8008fc4:	eba3 0207 	sub.w	r2, r3, r7
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008fc8:	d812      	bhi.n	8008ff0 <tcp_parseopt+0x78>
    return tcphdr_opt2[idx];
 8008fca:	3a01      	subs	r2, #1
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	5ca2      	ldrb	r2, [r4, r2]
      switch (opt) {
 8008fd0:	2a01      	cmp	r2, #1
 8008fd2:	d011      	beq.n	8008ff8 <tcp_parseopt+0x80>
 8008fd4:	2a02      	cmp	r2, #2
 8008fd6:	d017      	beq.n	8009008 <tcp_parseopt+0x90>
 8008fd8:	b192      	cbz	r2, 8009000 <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008fda:	b10c      	cbz	r4, 8008fe0 <tcp_parseopt+0x68>
 8008fdc:	4573      	cmp	r3, lr
 8008fde:	d23d      	bcs.n	800905c <tcp_parseopt+0xe4>
    return opts[optidx];
 8008fe0:	4433      	add	r3, r6
 8008fe2:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d95e      	bls.n	80090a6 <tcp_parseopt+0x12e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8008fe8:	440b      	add	r3, r1
 8008fea:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008fec:	2201      	movs	r2, #1
 8008fee:	e7df      	b.n	8008fb0 <tcp_parseopt+0x38>
    return opts[optidx];
 8008ff0:	f89c 2000 	ldrb.w	r2, [ip]
      switch (opt) {
 8008ff4:	2a01      	cmp	r2, #1
 8008ff6:	d1ed      	bne.n	8008fd4 <tcp_parseopt+0x5c>
 8008ff8:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	e7da      	b.n	8008fb6 <tcp_parseopt+0x3e>
 8009000:	f8a8 3000 	strh.w	r3, [r8]
      }
    }
  }
}
 8009004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u16_t optidx = tcp_optidx++;
 8009008:	1c8a      	adds	r2, r1, #2
 800900a:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800900c:	b10c      	cbz	r4, 8009012 <tcp_parseopt+0x9a>
 800900e:	4573      	cmp	r3, lr
 8009010:	d220      	bcs.n	8009054 <tcp_parseopt+0xdc>
    return opts[optidx];
 8009012:	4433      	add	r3, r6
 8009014:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009016:	2b04      	cmp	r3, #4
 8009018:	d142      	bne.n	80090a0 <tcp_parseopt+0x128>
 800901a:	1c53      	adds	r3, r2, #1
 800901c:	4283      	cmp	r3, r0
 800901e:	da3f      	bge.n	80090a0 <tcp_parseopt+0x128>
  u16_t optidx = tcp_optidx++;
 8009020:	1ccb      	adds	r3, r1, #3
 8009022:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009024:	2c00      	cmp	r4, #0
 8009026:	d030      	beq.n	800908a <tcp_parseopt+0x112>
 8009028:	4596      	cmp	lr, r2
 800902a:	d81b      	bhi.n	8009064 <tcp_parseopt+0xec>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800902c:	1bd2      	subs	r2, r2, r7
  u16_t optidx = tcp_optidx++;
 800902e:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009030:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 8009032:	b2d2      	uxtb	r2, r2
  u16_t optidx = tcp_optidx++;
 8009034:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009036:	5ca2      	ldrb	r2, [r4, r2]
 8009038:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800903c:	d81a      	bhi.n	8009074 <tcp_parseopt+0xfc>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800903e:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 8009040:	b2db      	uxtb	r3, r3
 8009042:	5ce3      	ldrb	r3, [r4, r3]
          mss |= tcp_get_next_optbyte();
 8009044:	4313      	orrs	r3, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009046:	1e5a      	subs	r2, r3, #1
 8009048:	b292      	uxth	r2, r2
 800904a:	4552      	cmp	r2, sl
 800904c:	bf88      	it	hi
 800904e:	464b      	movhi	r3, r9
 8009050:	866b      	strh	r3, [r5, #50]	; 0x32
          break;
 8009052:	e7cb      	b.n	8008fec <tcp_parseopt+0x74>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009054:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 8009056:	b2db      	uxtb	r3, r3
 8009058:	5ce3      	ldrb	r3, [r4, r3]
 800905a:	e7dc      	b.n	8009016 <tcp_parseopt+0x9e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800905c:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800905e:	b2db      	uxtb	r3, r3
 8009060:	5ce3      	ldrb	r3, [r4, r3]
 8009062:	e7bf      	b.n	8008fe4 <tcp_parseopt+0x6c>
    return opts[optidx];
 8009064:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 8009066:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009068:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800906a:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800906c:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800906e:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009072:	d9e4      	bls.n	800903e <tcp_parseopt+0xc6>
    return opts[optidx];
 8009074:	4433      	add	r3, r6
 8009076:	7d1b      	ldrb	r3, [r3, #20]
 8009078:	e7e4      	b.n	8009044 <tcp_parseopt+0xcc>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800907a:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <tcp_parseopt+0x148>)
 800907c:	f240 727d 	movw	r2, #1917	; 0x77d
 8009080:	4910      	ldr	r1, [pc, #64]	; (80090c4 <tcp_parseopt+0x14c>)
 8009082:	4811      	ldr	r0, [pc, #68]	; (80090c8 <tcp_parseopt+0x150>)
 8009084:	f003 feb6 	bl	800cdf4 <iprintf>
 8009088:	e77b      	b.n	8008f82 <tcp_parseopt+0xa>
    return opts[optidx];
 800908a:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800908c:	3104      	adds	r1, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800908e:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 8009090:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009092:	0212      	lsls	r2, r2, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009094:	e7ee      	b.n	8009074 <tcp_parseopt+0xfc>
 8009096:	2a00      	cmp	r2, #0
 8009098:	d0b4      	beq.n	8009004 <tcp_parseopt+0x8c>
 800909a:	f8a8 1000 	strh.w	r1, [r8]
 800909e:	e7b1      	b.n	8009004 <tcp_parseopt+0x8c>
 80090a0:	f8a8 2000 	strh.w	r2, [r8]
 80090a4:	e7ae      	b.n	8009004 <tcp_parseopt+0x8c>
  u16_t optidx = tcp_optidx++;
 80090a6:	3102      	adds	r1, #2
 80090a8:	f8a8 1000 	strh.w	r1, [r8]
 80090ac:	e7aa      	b.n	8009004 <tcp_parseopt+0x8c>
 80090ae:	bf00      	nop
 80090b0:	2401059c 	.word	0x2401059c
 80090b4:	24010594 	.word	0x24010594
 80090b8:	24010598 	.word	0x24010598
 80090bc:	24010590 	.word	0x24010590
 80090c0:	0800ebc4 	.word	0x0800ebc4
 80090c4:	0800edb4 	.word	0x0800edb4
 80090c8:	0800dd68 	.word	0x0800dd68
 80090cc:	2401058c 	.word	0x2401058c

080090d0 <tcp_input>:
{
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	4604      	mov	r4, r0
 80090d6:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 80090d8:	f7fa f9d6 	bl	8003488 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80090dc:	2c00      	cmp	r4, #0
 80090de:	f000 80d6 	beq.w	800928e <tcp_input+0x1be>
  if (p->len < TCP_HLEN) {
 80090e2:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 80090e4:	4e6d      	ldr	r6, [pc, #436]	; (800929c <tcp_input+0x1cc>)
 80090e6:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 80090e8:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 80090ea:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 80090ec:	d805      	bhi.n	80090fa <tcp_input+0x2a>
  pbuf_free(p);
 80090ee:	4620      	mov	r0, r4
}
 80090f0:	b007      	add	sp, #28
 80090f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80090f6:	f7fd beb5 	b.w	8006e64 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80090fa:	4f69      	ldr	r7, [pc, #420]	; (80092a0 <tcp_input+0x1d0>)
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6978      	ldr	r0, [r7, #20]
 8009100:	f002 ffe8 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
 8009104:	4605      	mov	r5, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	d1f1      	bne.n	80090ee <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009110:	2be0      	cmp	r3, #224	; 0xe0
 8009112:	d0ec      	beq.n	80090ee <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009114:	6833      	ldr	r3, [r6, #0]
 8009116:	8998      	ldrh	r0, [r3, #12]
 8009118:	f7fc feea 	bl	8005ef0 <lwip_htons>
 800911c:	0a80      	lsrs	r0, r0, #10
 800911e:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009122:	2913      	cmp	r1, #19
 8009124:	d9e3      	bls.n	80090ee <tcp_input+0x1e>
 8009126:	8923      	ldrh	r3, [r4, #8]
 8009128:	b28a      	uxth	r2, r1
 800912a:	428b      	cmp	r3, r1
 800912c:	d3df      	bcc.n	80090ee <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800912e:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 8009132:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009134:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80092d4 <tcp_input+0x204>
 8009138:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800913a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80092d8 <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800913e:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009140:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 8009144:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 8009148:	f080 819a 	bcs.w	8009480 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 836e 	beq.w	8009830 <tcp_input+0x760>
    pbuf_remove_header(p, TCP_HLEN);
 8009154:	2114      	movs	r1, #20
 8009156:	4620      	mov	r0, r4
 8009158:	f7fd fe18 	bl	8006d8c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800915c:	8965      	ldrh	r5, [r4, #10]
 800915e:	4b51      	ldr	r3, [pc, #324]	; (80092a4 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 8009160:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009162:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 8009166:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 8009168:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800916a:	f7fd fe0f 	bl	8006d8c <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800916e:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 8009172:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009174:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 8009178:	8943      	ldrh	r3, [r0, #10]
 800917a:	454b      	cmp	r3, r9
 800917c:	d3b7      	bcc.n	80090ee <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800917e:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 8009180:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009182:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 8009186:	f7fd fe01 	bl	8006d8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800918a:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800918c:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800918e:	442b      	add	r3, r5
 8009190:	eba3 030a 	sub.w	r3, r3, sl
 8009194:	b29b      	uxth	r3, r3
 8009196:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009198:	2a00      	cmp	r2, #0
 800919a:	f040 8350 	bne.w	800983e <tcp_input+0x76e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	8912      	ldrh	r2, [r2, #8]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d005      	beq.n	80091b2 <tcp_input+0xe2>
 80091a6:	4b40      	ldr	r3, [pc, #256]	; (80092a8 <tcp_input+0x1d8>)
 80091a8:	22e0      	movs	r2, #224	; 0xe0
 80091aa:	4940      	ldr	r1, [pc, #256]	; (80092ac <tcp_input+0x1dc>)
 80091ac:	4840      	ldr	r0, [pc, #256]	; (80092b0 <tcp_input+0x1e0>)
 80091ae:	f003 fe21 	bl	800cdf4 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80091b2:	6835      	ldr	r5, [r6, #0]
 80091b4:	8828      	ldrh	r0, [r5, #0]
 80091b6:	f7fc fe9b 	bl	8005ef0 <lwip_htons>
 80091ba:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80091bc:	6835      	ldr	r5, [r6, #0]
 80091be:	8868      	ldrh	r0, [r5, #2]
 80091c0:	f7fc fe96 	bl	8005ef0 <lwip_htons>
 80091c4:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80091c6:	6835      	ldr	r5, [r6, #0]
 80091c8:	6868      	ldr	r0, [r5, #4]
 80091ca:	f7fc fe95 	bl	8005ef8 <lwip_htonl>
 80091ce:	4b39      	ldr	r3, [pc, #228]	; (80092b4 <tcp_input+0x1e4>)
 80091d0:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80091d2:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80091d4:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80091d6:	68a8      	ldr	r0, [r5, #8]
 80091d8:	f7fc fe8e 	bl	8005ef8 <lwip_htonl>
 80091dc:	4b36      	ldr	r3, [pc, #216]	; (80092b8 <tcp_input+0x1e8>)
 80091de:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80091e0:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80091e2:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80091e4:	89e8      	ldrh	r0, [r5, #14]
 80091e6:	f7fc fe83 	bl	8005ef0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 80091ea:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80091ec:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 80091ee:	8998      	ldrh	r0, [r3, #12]
 80091f0:	f7fc fe7e 	bl	8005ef0 <lwip_htons>
 80091f4:	4931      	ldr	r1, [pc, #196]	; (80092bc <tcp_input+0x1ec>)
 80091f6:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 80091fa:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 80091fc:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80091fe:	0783      	lsls	r3, r0, #30
 8009200:	f040 8144 	bne.w	800948c <tcp_input+0x3bc>
  tcplen = p->tot_len;
 8009204:	4b2e      	ldr	r3, [pc, #184]	; (80092c0 <tcp_input+0x1f0>)
 8009206:	9305      	str	r3, [sp, #20]
 8009208:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800920a:	4b2e      	ldr	r3, [pc, #184]	; (80092c4 <tcp_input+0x1f4>)
 800920c:	681d      	ldr	r5, [r3, #0]
 800920e:	2d00      	cmp	r5, #0
 8009210:	f000 80e5 	beq.w	80093de <tcp_input+0x30e>
  prev = NULL;
 8009214:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009218:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80092a8 <tcp_input+0x1d8>
 800921c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80092dc <tcp_input+0x20c>
 8009220:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80092b0 <tcp_input+0x1e0>
 8009224:	e017      	b.n	8009256 <tcp_input+0x186>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009226:	2b0a      	cmp	r3, #10
 8009228:	d021      	beq.n	800926e <tcp_input+0x19e>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800922a:	2b01      	cmp	r3, #1
 800922c:	d028      	beq.n	8009280 <tcp_input+0x1b0>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800922e:	7a2a      	ldrb	r2, [r5, #8]
 8009230:	b132      	cbz	r2, 8009240 <tcp_input+0x170>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009238:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800923a:	b2db      	uxtb	r3, r3
 800923c:	429a      	cmp	r2, r3
 800923e:	d104      	bne.n	800924a <tcp_input+0x17a>
    if (pcb->remote_port == tcphdr->src &&
 8009240:	6833      	ldr	r3, [r6, #0]
 8009242:	8b29      	ldrh	r1, [r5, #24]
 8009244:	881a      	ldrh	r2, [r3, #0]
 8009246:	4291      	cmp	r1, r2
 8009248:	d04a      	beq.n	80092e0 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800924a:	68eb      	ldr	r3, [r5, #12]
 800924c:	46a8      	mov	r8, r5
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 80c5 	beq.w	80093de <tcp_input+0x30e>
 8009254:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009256:	7d2b      	ldrb	r3, [r5, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e4      	bne.n	8009226 <tcp_input+0x156>
 800925c:	4653      	mov	r3, sl
 800925e:	22fb      	movs	r2, #251	; 0xfb
 8009260:	4659      	mov	r1, fp
 8009262:	4648      	mov	r0, r9
 8009264:	f003 fdc6 	bl	800cdf4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009268:	7d2b      	ldrb	r3, [r5, #20]
 800926a:	2b0a      	cmp	r3, #10
 800926c:	d1dd      	bne.n	800922a <tcp_input+0x15a>
 800926e:	4653      	mov	r3, sl
 8009270:	22fc      	movs	r2, #252	; 0xfc
 8009272:	4915      	ldr	r1, [pc, #84]	; (80092c8 <tcp_input+0x1f8>)
 8009274:	4648      	mov	r0, r9
 8009276:	f003 fdbd 	bl	800cdf4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800927a:	7d2b      	ldrb	r3, [r5, #20]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d1d6      	bne.n	800922e <tcp_input+0x15e>
 8009280:	4653      	mov	r3, sl
 8009282:	22fd      	movs	r2, #253	; 0xfd
 8009284:	4911      	ldr	r1, [pc, #68]	; (80092cc <tcp_input+0x1fc>)
 8009286:	4648      	mov	r0, r9
 8009288:	f003 fdb4 	bl	800cdf4 <iprintf>
 800928c:	e7cf      	b.n	800922e <tcp_input+0x15e>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800928e:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <tcp_input+0x1d8>)
 8009290:	2283      	movs	r2, #131	; 0x83
 8009292:	490f      	ldr	r1, [pc, #60]	; (80092d0 <tcp_input+0x200>)
 8009294:	4806      	ldr	r0, [pc, #24]	; (80092b0 <tcp_input+0x1e0>)
 8009296:	f003 fdad 	bl	800cdf4 <iprintf>
 800929a:	e722      	b.n	80090e2 <tcp_input+0x12>
 800929c:	24010590 	.word	0x24010590
 80092a0:	24009a84 	.word	0x24009a84
 80092a4:	24010594 	.word	0x24010594
 80092a8:	0800ebc4 	.word	0x0800ebc4
 80092ac:	0800ee04 	.word	0x0800ee04
 80092b0:	0800dd68 	.word	0x0800dd68
 80092b4:	24010584 	.word	0x24010584
 80092b8:	24010560 	.word	0x24010560
 80092bc:	24010564 	.word	0x24010564
 80092c0:	2401059e 	.word	0x2401059e
 80092c4:	24010544 	.word	0x24010544
 80092c8:	0800ee4c 	.word	0x0800ee4c
 80092cc:	0800ee78 	.word	0x0800ee78
 80092d0:	0800edd0 	.word	0x0800edd0
 80092d4:	2401059c 	.word	0x2401059c
 80092d8:	24010598 	.word	0x24010598
 80092dc:	0800ee24 	.word	0x0800ee24
    if (pcb->remote_port == tcphdr->src &&
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	8aea      	ldrh	r2, [r5, #22]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d1b0      	bne.n	800924a <tcp_input+0x17a>
        pcb->local_port == tcphdr->dest &&
 80092e8:	686a      	ldr	r2, [r5, #4]
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d1ac      	bne.n	800924a <tcp_input+0x17a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80092f0:	682a      	ldr	r2, [r5, #0]
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d1a8      	bne.n	800924a <tcp_input+0x17a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80092f8:	68eb      	ldr	r3, [r5, #12]
 80092fa:	42ab      	cmp	r3, r5
 80092fc:	f000 8405 	beq.w	8009b0a <tcp_input+0xa3a>
      if (prev != NULL) {
 8009300:	f1b8 0f00 	cmp.w	r8, #0
 8009304:	d009      	beq.n	800931a <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 8009306:	4a6e      	ldr	r2, [pc, #440]	; (80094c0 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 8009308:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800930c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800930e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 8009310:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009312:	68eb      	ldr	r3, [r5, #12]
 8009314:	42ab      	cmp	r3, r5
 8009316:	f000 8432 	beq.w	8009b7e <tcp_input+0xaae>
    inseg.next = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	4f69      	ldr	r7, [pc, #420]	; (80094c4 <tcp_input+0x3f4>)
    recv_data = NULL;
 800931e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094e0 <tcp_input+0x410>
    recv_flags = 0;
 8009322:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80094e4 <tcp_input+0x414>
    recv_acked = 0;
 8009326:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80094e8 <tcp_input+0x418>
    inseg.len = p->tot_len;
 800932a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 800932c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800932e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 8009332:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 8009336:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800933a:	4b63      	ldr	r3, [pc, #396]	; (80094c8 <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 800933c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800933e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 8009340:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 8009342:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 8009344:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 8009346:	071a      	lsls	r2, r3, #28
 8009348:	d503      	bpl.n	8009352 <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800934a:	7b62      	ldrb	r2, [r4, #13]
 800934c:	f042 0201 	orr.w	r2, r2, #1
 8009350:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 8009352:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8009354:	b172      	cbz	r2, 8009374 <tcp_input+0x2a4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009356:	4628      	mov	r0, r5
 8009358:	f7fe ff6e 	bl	8008238 <tcp_process_refused_data>
 800935c:	300d      	adds	r0, #13
 800935e:	f000 8276 	beq.w	800984e <tcp_input+0x77e>
 8009362:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8009364:	b123      	cbz	r3, 8009370 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009366:	9b05      	ldr	r3, [sp, #20]
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	f040 826f 	bne.w	800984e <tcp_input+0x77e>
  if (flags & TCP_RST) {
 8009370:	4b55      	ldr	r3, [pc, #340]	; (80094c8 <tcp_input+0x3f8>)
 8009372:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 8009374:	4c55      	ldr	r4, [pc, #340]	; (80094cc <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 8009376:	0759      	lsls	r1, r3, #29
    tcp_input_pcb = pcb;
 8009378:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800937a:	f140 814a 	bpl.w	8009612 <tcp_input+0x542>
    if (pcb->state == SYN_SENT) {
 800937e:	7d29      	ldrb	r1, [r5, #20]
 8009380:	2902      	cmp	r1, #2
 8009382:	f000 8331 	beq.w	80099e8 <tcp_input+0x918>
      if (seqno == pcb->rcv_nxt) {
 8009386:	4b52      	ldr	r3, [pc, #328]	; (80094d0 <tcp_input+0x400>)
 8009388:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	f000 8415 	beq.w	8009bbc <tcp_input+0xaec>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	d404      	bmi.n	80093a0 <tcp_input+0x2d0>
 8009396:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8009398:	1a9b      	subs	r3, r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	f340 831f 	ble.w	80099de <tcp_input+0x90e>
      if (recv_flags & TF_RESET) {
 80093a0:	f899 3000 	ldrb.w	r3, [r9]
 80093a4:	0718      	lsls	r0, r3, #28
 80093a6:	f140 8258 	bpl.w	800985a <tcp_input+0x78a>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80093aa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80093ae:	b11b      	cbz	r3, 80093b8 <tcp_input+0x2e8>
 80093b0:	f06f 010d 	mvn.w	r1, #13
 80093b4:	6928      	ldr	r0, [r5, #16]
 80093b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80093b8:	4841      	ldr	r0, [pc, #260]	; (80094c0 <tcp_input+0x3f0>)
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7fe fbfe 	bl	8007bbc <tcp_pcb_remove>
        tcp_free(pcb);
 80093c0:	4628      	mov	r0, r5
 80093c2:	f7fe f81f 	bl	8007404 <tcp_free>
    tcp_input_pcb = NULL;
 80093c6:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 80093c8:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 80093ca:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 80093cc:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 80093d0:	b110      	cbz	r0, 80093d8 <tcp_input+0x308>
      pbuf_free(inseg.p);
 80093d2:	f7fd fd47 	bl	8006e64 <pbuf_free>
      inseg.p = NULL;
 80093d6:	607d      	str	r5, [r7, #4]
}
 80093d8:	b007      	add	sp, #28
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80093de:	4b3d      	ldr	r3, [pc, #244]	; (80094d4 <tcp_input+0x404>)
 80093e0:	681d      	ldr	r5, [r3, #0]
 80093e2:	2d00      	cmp	r5, #0
 80093e4:	d05b      	beq.n	800949e <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80093e6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80094ec <tcp_input+0x41c>
 80093ea:	f8df b104 	ldr.w	fp, [pc, #260]	; 80094f0 <tcp_input+0x420>
 80093ee:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80094f4 <tcp_input+0x424>
 80093f2:	e002      	b.n	80093fa <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80093f4:	68ed      	ldr	r5, [r5, #12]
 80093f6:	2d00      	cmp	r5, #0
 80093f8:	d051      	beq.n	800949e <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80093fa:	7d2b      	ldrb	r3, [r5, #20]
 80093fc:	2b0a      	cmp	r3, #10
 80093fe:	4643      	mov	r3, r8
 8009400:	d005      	beq.n	800940e <tcp_input+0x33e>
 8009402:	f240 121f 	movw	r2, #287	; 0x11f
 8009406:	4659      	mov	r1, fp
 8009408:	4648      	mov	r0, r9
 800940a:	f003 fcf3 	bl	800cdf4 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800940e:	7a2a      	ldrb	r2, [r5, #8]
 8009410:	b132      	cbz	r2, 8009420 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009418:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800941a:	b2db      	uxtb	r3, r3
 800941c:	429a      	cmp	r2, r3
 800941e:	d1e9      	bne.n	80093f4 <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 8009420:	6832      	ldr	r2, [r6, #0]
 8009422:	8b2b      	ldrh	r3, [r5, #24]
 8009424:	8811      	ldrh	r1, [r2, #0]
 8009426:	428b      	cmp	r3, r1
 8009428:	d1e4      	bne.n	80093f4 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800942a:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 800942c:	8ae8      	ldrh	r0, [r5, #22]
 800942e:	4290      	cmp	r0, r2
 8009430:	d1e0      	bne.n	80093f4 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 8009432:	6869      	ldr	r1, [r5, #4]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	4291      	cmp	r1, r2
 8009438:	d1dc      	bne.n	80093f4 <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800943a:	6829      	ldr	r1, [r5, #0]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	4291      	cmp	r1, r2
 8009440:	d1d8      	bne.n	80093f4 <tcp_input+0x324>
  if (flags & TCP_RST) {
 8009442:	4a21      	ldr	r2, [pc, #132]	; (80094c8 <tcp_input+0x3f8>)
 8009444:	7812      	ldrb	r2, [r2, #0]
 8009446:	0757      	lsls	r7, r2, #29
 8009448:	f53f ae51 	bmi.w	80090ee <tcp_input+0x1e>
  if (flags & TCP_SYN) {
 800944c:	0796      	lsls	r6, r2, #30
 800944e:	f140 83aa 	bpl.w	8009ba6 <tcp_input+0xad6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009452:	4a1f      	ldr	r2, [pc, #124]	; (80094d0 <tcp_input+0x400>)
 8009454:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009456:	6812      	ldr	r2, [r2, #0]
 8009458:	1a51      	subs	r1, r2, r1
 800945a:	d404      	bmi.n	8009466 <tcp_input+0x396>
 800945c:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800945e:	1b89      	subs	r1, r1, r6
 8009460:	2900      	cmp	r1, #0
 8009462:	f340 83b6 	ble.w	8009bd2 <tcp_input+0xb02>
  if ((tcplen > 0)) {
 8009466:	9b05      	ldr	r3, [sp, #20]
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	f43f ae3f 	beq.w	80090ee <tcp_input+0x1e>
    tcp_ack_now(pcb);
 8009470:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8009472:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8009474:	f043 0302 	orr.w	r3, r3, #2
 8009478:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800947a:	f001 f813 	bl	800a4a4 <tcp_output>
        pbuf_free(p);
 800947e:	e636      	b.n	80090ee <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 8009480:	4a15      	ldr	r2, [pc, #84]	; (80094d8 <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009482:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 8009484:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009486:	f7fd fc81 	bl	8006d8c <pbuf_remove_header>
 800948a:	e692      	b.n	80091b2 <tcp_input+0xe2>
    tcplen++;
 800948c:	1c53      	adds	r3, r2, #1
 800948e:	4913      	ldr	r1, [pc, #76]	; (80094dc <tcp_input+0x40c>)
 8009490:	b29b      	uxth	r3, r3
 8009492:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 8009494:	429a      	cmp	r2, r3
    tcplen++;
 8009496:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8009498:	f67f aeb7 	bls.w	800920a <tcp_input+0x13a>
 800949c:	e627      	b.n	80090ee <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800949e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80094f8 <tcp_input+0x428>
 80094a2:	f8d9 8000 	ldr.w	r8, [r9]
 80094a6:	f1b8 0f00 	cmp.w	r8, #0
 80094aa:	f000 8226 	beq.w	80098fa <tcp_input+0x82a>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80094ae:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80094b2:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 80094b4:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 80094b6:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80094b8:	f8d7 e014 	ldr.w	lr, [r7, #20]
 80094bc:	e024      	b.n	8009508 <tcp_input+0x438>
 80094be:	bf00      	nop
 80094c0:	24010544 	.word	0x24010544
 80094c4:	24010568 	.word	0x24010568
 80094c8:	24010564 	.word	0x24010564
 80094cc:	24010588 	.word	0x24010588
 80094d0:	24010584 	.word	0x24010584
 80094d4:	2401055c 	.word	0x2401055c
 80094d8:	24010594 	.word	0x24010594
 80094dc:	2401059e 	.word	0x2401059e
 80094e0:	2401057c 	.word	0x2401057c
 80094e4:	24010580 	.word	0x24010580
 80094e8:	24010578 	.word	0x24010578
 80094ec:	0800ebc4 	.word	0x0800ebc4
 80094f0:	0800eef8 	.word	0x0800eef8
 80094f4:	0800dd68 	.word	0x0800dd68
 80094f8:	24010550 	.word	0x24010550
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80094fc:	68eb      	ldr	r3, [r5, #12]
 80094fe:	4629      	mov	r1, r5
 8009500:	461d      	mov	r5, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 81fa 	beq.w	80098fc <tcp_input+0x82c>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009508:	7a2a      	ldrb	r2, [r5, #8]
 800950a:	b12a      	cbz	r2, 8009518 <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800950c:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 8009510:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009512:	b2db      	uxtb	r3, r3
 8009514:	429a      	cmp	r2, r3
 8009516:	d1f1      	bne.n	80094fc <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 8009518:	8aea      	ldrh	r2, [r5, #22]
 800951a:	8843      	ldrh	r3, [r0, #2]
 800951c:	429a      	cmp	r2, r3
 800951e:	d1ed      	bne.n	80094fc <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009520:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009522:	b10a      	cbz	r2, 8009528 <tcp_input+0x458>
 8009524:	4572      	cmp	r2, lr
 8009526:	d1e9      	bne.n	80094fc <tcp_input+0x42c>
      if (prev != NULL) {
 8009528:	b129      	cbz	r1, 8009536 <tcp_input+0x466>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800952a:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800952c:	f8c9 5000 	str.w	r5, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009530:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009532:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 8009536:	4aa8      	ldr	r2, [pc, #672]	; (80097d8 <tcp_input+0x708>)
 8009538:	7812      	ldrb	r2, [r2, #0]
 800953a:	0751      	lsls	r1, r2, #29
 800953c:	f53f add7 	bmi.w	80090ee <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 8009540:	f012 0810 	ands.w	r8, r2, #16
 8009544:	f040 8266 	bne.w	8009a14 <tcp_input+0x944>
  } else if (flags & TCP_SYN) {
 8009548:	0790      	lsls	r0, r2, #30
 800954a:	f57f add0 	bpl.w	80090ee <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800954e:	7d68      	ldrb	r0, [r5, #21]
 8009550:	f7fe fcc4 	bl	8007edc <tcp_alloc>
    if (npcb == NULL) {
 8009554:	4681      	mov	r9, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	f000 82c6 	beq.w	8009ae8 <tcp_input+0xa18>
    npcb->rcv_nxt = seqno + 1;
 800955c:	4b9f      	ldr	r3, [pc, #636]	; (80097dc <tcp_input+0x70c>)
    npcb->remote_port = tcphdr->src;
 800955e:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 8009560:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 8009562:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 8009564:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 8009566:	7849      	ldrb	r1, [r1, #1]
 8009568:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800956c:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800956e:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009570:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009572:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 8009574:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009576:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009578:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 800957a:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800957c:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 800957e:	2303      	movs	r3, #3
 8009580:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 8009582:	f7fe fef1 	bl	8008368 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009586:	4b95      	ldr	r3, [pc, #596]	; (80097dc <tcp_input+0x70c>)
    npcb->snd_nxt = iss;
 8009588:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800958c:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 800958e:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009592:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 8009594:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 8009598:	4a91      	ldr	r2, [pc, #580]	; (80097e0 <tcp_input+0x710>)
    npcb->snd_wl2 = iss;
 800959a:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800959e:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 80095a0:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 80095a4:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80095a8:	7a6b      	ldrb	r3, [r5, #9]
 80095aa:	f003 030c 	and.w	r3, r3, #12
 80095ae:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 80095b2:	7a2b      	ldrb	r3, [r5, #8]
 80095b4:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 80095b8:	6813      	ldr	r3, [r2, #0]
 80095ba:	f8c2 9000 	str.w	r9, [r2]
 80095be:	f8c9 300c 	str.w	r3, [r9, #12]
 80095c2:	f001 fa93 	bl	800aaec <tcp_timer_needed>
 80095c6:	4b87      	ldr	r3, [pc, #540]	; (80097e4 <tcp_input+0x714>)
 80095c8:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 80095ca:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 80095cc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80095ce:	f7ff fcd3 	bl	8008f78 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80095d2:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80095d4:	f109 0204 	add.w	r2, r9, #4
 80095d8:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 80095dc:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80095de:	4610      	mov	r0, r2
 80095e0:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 80095e2:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80095e6:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80095ea:	f002 fbcb 	bl	800bd84 <ip4_route>
 80095ee:	9a05      	ldr	r2, [sp, #20]
 80095f0:	4601      	mov	r1, r0
 80095f2:	4628      	mov	r0, r5
 80095f4:	f7fe fed4 	bl	80083a0 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80095f8:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80095fa:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80095fe:	4648      	mov	r0, r9
 8009600:	f000 fd34 	bl	800a06c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009604:	2800      	cmp	r0, #0
 8009606:	f040 827a 	bne.w	8009afe <tcp_input+0xa2e>
    tcp_output(npcb);
 800960a:	4648      	mov	r0, r9
 800960c:	f000 ff4a 	bl	800a4a4 <tcp_output>
 8009610:	e56d      	b.n	80090ee <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009612:	079a      	lsls	r2, r3, #30
 8009614:	d504      	bpl.n	8009620 <tcp_input+0x550>
 8009616:	7d2b      	ldrb	r3, [r5, #20]
 8009618:	3b02      	subs	r3, #2
 800961a:	2b01      	cmp	r3, #1
 800961c:	f200 81df 	bhi.w	80099de <tcp_input+0x90e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009620:	8b6b      	ldrh	r3, [r5, #26]
 8009622:	06db      	lsls	r3, r3, #27
 8009624:	d402      	bmi.n	800962c <tcp_input+0x55c>
    pcb->tmr = tcp_ticks;
 8009626:	4b70      	ldr	r3, [pc, #448]	; (80097e8 <tcp_input+0x718>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800962c:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800962e:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 8009630:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  tcp_parseopt(pcb);
 8009634:	f7ff fca0 	bl	8008f78 <tcp_parseopt>
  switch (pcb->state) {
 8009638:	7d2b      	ldrb	r3, [r5, #20]
 800963a:	3b02      	subs	r3, #2
 800963c:	2b07      	cmp	r3, #7
 800963e:	f63f aeaf 	bhi.w	80093a0 <tcp_input+0x2d0>
 8009642:	e8df f003 	tbb	[pc, r3]
 8009646:	1334      	.short	0x1334
 8009648:	04748f04 	.word	0x04748f04
 800964c:	5ba8      	.short	0x5ba8
      tcp_receive(pcb);
 800964e:	4628      	mov	r0, r5
 8009650:	f7fe fff6 	bl	8008640 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009654:	f899 3000 	ldrb.w	r3, [r9]
 8009658:	069e      	lsls	r6, r3, #26
 800965a:	f57f aea1 	bpl.w	80093a0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800965e:	8b6b      	ldrh	r3, [r5, #26]
 8009660:	f043 0302 	orr.w	r3, r3, #2
 8009664:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 8009666:	2307      	movs	r3, #7
 8009668:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800966a:	e699      	b.n	80093a0 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 800966c:	4b5a      	ldr	r3, [pc, #360]	; (80097d8 <tcp_input+0x708>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	06d9      	lsls	r1, r3, #27
 8009672:	f140 820d 	bpl.w	8009a90 <tcp_input+0x9c0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009676:	4b5d      	ldr	r3, [pc, #372]	; (80097ec <tcp_input+0x71c>)
 8009678:	6819      	ldr	r1, [r3, #0]
 800967a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800967c:	43db      	mvns	r3, r3
 800967e:	42cb      	cmn	r3, r1
 8009680:	d404      	bmi.n	800968c <tcp_input+0x5bc>
 8009682:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009684:	1acb      	subs	r3, r1, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	f340 824d 	ble.w	8009b26 <tcp_input+0xa56>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800968c:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800968e:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009690:	8810      	ldrh	r0, [r2, #0]
 8009692:	4a52      	ldr	r2, [pc, #328]	; (80097dc <tcp_input+0x70c>)
 8009694:	6812      	ldr	r2, [r2, #0]
 8009696:	4402      	add	r2, r0
 8009698:	8818      	ldrh	r0, [r3, #0]
 800969a:	9002      	str	r0, [sp, #8]
 800969c:	4628      	mov	r0, r5
 800969e:	885b      	ldrh	r3, [r3, #2]
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	4b53      	ldr	r3, [pc, #332]	; (80097f0 <tcp_input+0x720>)
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	3304      	adds	r3, #4
 80096a8:	f000 fe82 	bl	800a3b0 <tcp_rst>
    if (err != ERR_ABRT) {
 80096ac:	e678      	b.n	80093a0 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80096ae:	4b4a      	ldr	r3, [pc, #296]	; (80097d8 <tcp_input+0x708>)
 80096b0:	781a      	ldrb	r2, [r3, #0]
 80096b2:	f002 0312 	and.w	r3, r2, #18
 80096b6:	2b12      	cmp	r3, #18
 80096b8:	f000 813a 	beq.w	8009930 <tcp_input+0x860>
      else if (flags & TCP_ACK) {
 80096bc:	06d0      	lsls	r0, r2, #27
 80096be:	f57f ae6f 	bpl.w	80093a0 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096c2:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096c4:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096c6:	8811      	ldrh	r1, [r2, #0]
 80096c8:	4a44      	ldr	r2, [pc, #272]	; (80097dc <tcp_input+0x70c>)
 80096ca:	8818      	ldrh	r0, [r3, #0]
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	440a      	add	r2, r1
 80096d0:	4946      	ldr	r1, [pc, #280]	; (80097ec <tcp_input+0x71c>)
 80096d2:	6809      	ldr	r1, [r1, #0]
 80096d4:	9002      	str	r0, [sp, #8]
 80096d6:	4628      	mov	r0, r5
 80096d8:	885b      	ldrh	r3, [r3, #2]
 80096da:	9301      	str	r3, [sp, #4]
 80096dc:	4b44      	ldr	r3, [pc, #272]	; (80097f0 <tcp_input+0x720>)
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	3304      	adds	r3, #4
 80096e2:	f000 fe65 	bl	800a3b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80096e6:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 80096ea:	2b05      	cmp	r3, #5
 80096ec:	f63f ae58 	bhi.w	80093a0 <tcp_input+0x2d0>
          pcb->rtime = 0;
 80096f0:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 80096f2:	4628      	mov	r0, r5
          pcb->rtime = 0;
 80096f4:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80096f6:	f001 f8d5 	bl	800a8a4 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 80096fa:	e651      	b.n	80093a0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 80096fc:	4628      	mov	r0, r5
 80096fe:	f7fe ff9f 	bl	8008640 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009702:	4b35      	ldr	r3, [pc, #212]	; (80097d8 <tcp_input+0x708>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	06de      	lsls	r6, r3, #27
 8009708:	f57f ae4a 	bpl.w	80093a0 <tcp_input+0x2d0>
 800970c:	4b37      	ldr	r3, [pc, #220]	; (80097ec <tcp_input+0x71c>)
 800970e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	f47f ae44 	bne.w	80093a0 <tcp_input+0x2d0>
 8009718:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800971a:	2b00      	cmp	r3, #0
 800971c:	f47f ae40 	bne.w	80093a0 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 8009720:	f899 3000 	ldrb.w	r3, [r9]
 8009724:	f043 0310 	orr.w	r3, r3, #16
 8009728:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800972c:	e638      	b.n	80093a0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800972e:	4628      	mov	r0, r5
 8009730:	f7fe ff86 	bl	8008640 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009734:	f899 3000 	ldrb.w	r3, [r9]
 8009738:	069a      	lsls	r2, r3, #26
 800973a:	f57f ae31 	bpl.w	80093a0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800973e:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 8009740:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 8009742:	f043 0302 	orr.w	r3, r3, #2
 8009746:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 8009748:	f7fd ff3c 	bl	80075c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800974c:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <tcp_input+0x710>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	42ab      	cmp	r3, r5
 8009752:	d05e      	beq.n	8009812 <tcp_input+0x742>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d05f      	beq.n	8009818 <tcp_input+0x748>
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	42aa      	cmp	r2, r5
 800975c:	f000 8218 	beq.w	8009b90 <tcp_input+0xac0>
 8009760:	4613      	mov	r3, r2
 8009762:	e7f7      	b.n	8009754 <tcp_input+0x684>
      tcp_receive(pcb);
 8009764:	4628      	mov	r0, r5
 8009766:	f7fe ff6b 	bl	8008640 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800976a:	f899 3000 	ldrb.w	r3, [r9]
 800976e:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009772:	4b19      	ldr	r3, [pc, #100]	; (80097d8 <tcp_input+0x708>)
 8009774:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 8009776:	f000 817b 	beq.w	8009a70 <tcp_input+0x9a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800977a:	06d8      	lsls	r0, r3, #27
 800977c:	d504      	bpl.n	8009788 <tcp_input+0x6b8>
 800977e:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <tcp_input+0x71c>)
 8009780:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d035      	beq.n	80097f4 <tcp_input+0x724>
          tcp_ack_now(pcb);
 8009788:	8b6b      	ldrh	r3, [r5, #26]
 800978a:	f043 0302 	orr.w	r3, r3, #2
 800978e:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 8009790:	2308      	movs	r3, #8
 8009792:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 8009794:	e604      	b.n	80093a0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 8009796:	4628      	mov	r0, r5
 8009798:	f7fe ff52 	bl	8008640 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800979c:	4b0e      	ldr	r3, [pc, #56]	; (80097d8 <tcp_input+0x708>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	06db      	lsls	r3, r3, #27
 80097a2:	f57f adfd 	bpl.w	80093a0 <tcp_input+0x2d0>
 80097a6:	4b11      	ldr	r3, [pc, #68]	; (80097ec <tcp_input+0x71c>)
 80097a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	f47f adf7 	bne.w	80093a0 <tcp_input+0x2d0>
 80097b2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f47f adf3 	bne.w	80093a0 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 80097ba:	4628      	mov	r0, r5
 80097bc:	f7fd ff02 	bl	80075c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <tcp_input+0x710>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	42ab      	cmp	r3, r5
 80097c6:	d024      	beq.n	8009812 <tcp_input+0x742>
 80097c8:	b333      	cbz	r3, 8009818 <tcp_input+0x748>
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	42aa      	cmp	r2, r5
 80097ce:	f000 81df 	beq.w	8009b90 <tcp_input+0xac0>
 80097d2:	4613      	mov	r3, r2
 80097d4:	e7f8      	b.n	80097c8 <tcp_input+0x6f8>
 80097d6:	bf00      	nop
 80097d8:	24010564 	.word	0x24010564
 80097dc:	24010584 	.word	0x24010584
 80097e0:	24010544 	.word	0x24010544
 80097e4:	24010548 	.word	0x24010548
 80097e8:	24010554 	.word	0x24010554
 80097ec:	24010560 	.word	0x24010560
 80097f0:	24009a94 	.word	0x24009a94
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80097f4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1c6      	bne.n	8009788 <tcp_input+0x6b8>
          tcp_ack_now(pcb);
 80097fa:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 80097fc:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 80097fe:	f043 0302 	orr.w	r3, r3, #2
 8009802:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 8009804:	f7fd fede 	bl	80075c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009808:	4bab      	ldr	r3, [pc, #684]	; (8009ab8 <tcp_input+0x9e8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	42ab      	cmp	r3, r5
 800980e:	f040 81c2 	bne.w	8009b96 <tcp_input+0xac6>
        TCP_RMV_ACTIVE(pcb);
 8009812:	68eb      	ldr	r3, [r5, #12]
 8009814:	4aa8      	ldr	r2, [pc, #672]	; (8009ab8 <tcp_input+0x9e8>)
 8009816:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009818:	4ba8      	ldr	r3, [pc, #672]	; (8009abc <tcp_input+0x9ec>)
        pcb->state = TIME_WAIT;
 800981a:	220a      	movs	r2, #10
 800981c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	601d      	str	r5, [r3, #0]
 8009822:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 8009824:	2201      	movs	r2, #1
 8009826:	4ba6      	ldr	r3, [pc, #664]	; (8009ac0 <tcp_input+0x9f0>)
 8009828:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800982a:	f001 f95f 	bl	800aaec <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800982e:	e5b7      	b.n	80093a0 <tcp_input+0x2d0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009830:	4ba4      	ldr	r3, [pc, #656]	; (8009ac4 <tcp_input+0x9f4>)
 8009832:	22c2      	movs	r2, #194	; 0xc2
 8009834:	49a4      	ldr	r1, [pc, #656]	; (8009ac8 <tcp_input+0x9f8>)
 8009836:	48a5      	ldr	r0, [pc, #660]	; (8009acc <tcp_input+0x9fc>)
 8009838:	f003 fadc 	bl	800cdf4 <iprintf>
 800983c:	e48a      	b.n	8009154 <tcp_input+0x84>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800983e:	4ba1      	ldr	r3, [pc, #644]	; (8009ac4 <tcp_input+0x9f4>)
 8009840:	22df      	movs	r2, #223	; 0xdf
 8009842:	49a3      	ldr	r1, [pc, #652]	; (8009ad0 <tcp_input+0xa00>)
 8009844:	48a1      	ldr	r0, [pc, #644]	; (8009acc <tcp_input+0x9fc>)
 8009846:	f003 fad5 	bl	800cdf4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800984a:	8923      	ldrh	r3, [r4, #8]
 800984c:	e4a7      	b.n	800919e <tcp_input+0xce>
        if (pcb->rcv_ann_wnd == 0) {
 800984e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 80da 	beq.w	8009a0a <tcp_input+0x93a>
 8009856:	4c9f      	ldr	r4, [pc, #636]	; (8009ad4 <tcp_input+0xa04>)
 8009858:	e5b5      	b.n	80093c6 <tcp_input+0x2f6>
        if (recv_acked > 0) {
 800985a:	f8bb 2000 	ldrh.w	r2, [fp]
 800985e:	b15a      	cbz	r2, 8009878 <tcp_input+0x7a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009860:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8009864:	b12b      	cbz	r3, 8009872 <tcp_input+0x7a2>
 8009866:	4629      	mov	r1, r5
 8009868:	6928      	ldr	r0, [r5, #16]
 800986a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800986c:	300d      	adds	r0, #13
 800986e:	f43f adaa 	beq.w	80093c6 <tcp_input+0x2f6>
          recv_acked = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 8009878:	4628      	mov	r0, r5
 800987a:	f7fe fe43 	bl	8008504 <tcp_input_delayed_close>
 800987e:	2800      	cmp	r0, #0
 8009880:	f47f ada1 	bne.w	80093c6 <tcp_input+0x2f6>
        if (recv_data != NULL) {
 8009884:	f8d8 2000 	ldr.w	r2, [r8]
 8009888:	b1fa      	cbz	r2, 80098ca <tcp_input+0x7fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800988a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800988c:	b143      	cbz	r3, 80098a0 <tcp_input+0x7d0>
 800988e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009892:	4b8c      	ldr	r3, [pc, #560]	; (8009ac4 <tcp_input+0x9f4>)
 8009894:	4990      	ldr	r1, [pc, #576]	; (8009ad8 <tcp_input+0xa08>)
 8009896:	488d      	ldr	r0, [pc, #564]	; (8009acc <tcp_input+0x9fc>)
 8009898:	f003 faac 	bl	800cdf4 <iprintf>
            pbuf_free(recv_data);
 800989c:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 80098a0:	8b6b      	ldrh	r3, [r5, #26]
 80098a2:	f013 0310 	ands.w	r3, r3, #16
 80098a6:	f040 80dc 	bne.w	8009a62 <tcp_input+0x992>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80098aa:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	f000 80fc 	beq.w	8009aac <tcp_input+0x9dc>
 80098b4:	4629      	mov	r1, r5
 80098b6:	6928      	ldr	r0, [r5, #16]
 80098b8:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80098ba:	f110 0f0d 	cmn.w	r0, #13
 80098be:	f43f ad82 	beq.w	80093c6 <tcp_input+0x2f6>
          if (err != ERR_OK) {
 80098c2:	b110      	cbz	r0, 80098ca <tcp_input+0x7fa>
            pcb->refused_data = recv_data;
 80098c4:	f8d8 3000 	ldr.w	r3, [r8]
 80098c8:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 80098ca:	f899 3000 	ldrb.w	r3, [r9]
 80098ce:	0699      	lsls	r1, r3, #26
 80098d0:	d507      	bpl.n	80098e2 <tcp_input+0x812>
          if (pcb->refused_data != NULL) {
 80098d2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 80af 	beq.w	8009a38 <tcp_input+0x968>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80098da:	7b5a      	ldrb	r2, [r3, #13]
 80098dc:	f042 0220 	orr.w	r2, r2, #32
 80098e0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80098e2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 80098e4:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 80098e6:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 80098e8:	f7fe fe0c 	bl	8008504 <tcp_input_delayed_close>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f47f ad6a 	bne.w	80093c6 <tcp_input+0x2f6>
        tcp_output(pcb);
 80098f2:	4628      	mov	r0, r5
 80098f4:	f000 fdd6 	bl	800a4a4 <tcp_output>
 80098f8:	e565      	b.n	80093c6 <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80098fa:	6830      	ldr	r0, [r6, #0]
 80098fc:	8980      	ldrh	r0, [r0, #12]
 80098fe:	f7fc faf7 	bl	8005ef0 <lwip_htons>
 8009902:	f010 0004 	ands.w	r0, r0, #4
 8009906:	f47f abf2 	bne.w	80090ee <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800990a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800990c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800990e:	8811      	ldrh	r1, [r2, #0]
 8009910:	4a72      	ldr	r2, [pc, #456]	; (8009adc <tcp_input+0xa0c>)
 8009912:	881d      	ldrh	r5, [r3, #0]
 8009914:	6812      	ldr	r2, [r2, #0]
 8009916:	440a      	add	r2, r1
 8009918:	4971      	ldr	r1, [pc, #452]	; (8009ae0 <tcp_input+0xa10>)
 800991a:	6809      	ldr	r1, [r1, #0]
 800991c:	9502      	str	r5, [sp, #8]
 800991e:	885b      	ldrh	r3, [r3, #2]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	4b70      	ldr	r3, [pc, #448]	; (8009ae4 <tcp_input+0xa14>)
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	3304      	adds	r3, #4
 8009928:	f000 fd42 	bl	800a3b0 <tcp_rst>
 800992c:	f7ff bbdf 	b.w	80090ee <tcp_input+0x1e>
          && (ackno == pcb->lastack + 1)) {
 8009930:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009932:	496b      	ldr	r1, [pc, #428]	; (8009ae0 <tcp_input+0xa10>)
 8009934:	3301      	adds	r3, #1
 8009936:	6809      	ldr	r1, [r1, #0]
 8009938:	428b      	cmp	r3, r1
 800993a:	f47f aebf 	bne.w	80096bc <tcp_input+0x5ec>
        pcb->lastack = ackno;
 800993e:	646b      	str	r3, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009940:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 8009942:	4b66      	ldr	r3, [pc, #408]	; (8009adc <tcp_input+0xa0c>)
        pcb->snd_wnd = tcphdr->wnd;
 8009944:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 8009946:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009948:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800994a:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800994c:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800994e:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009950:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 8009952:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009954:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009956:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009958:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800995a:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 800995e:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009960:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009964:	9205      	str	r2, [sp, #20]
 8009966:	f002 fa0d 	bl	800bd84 <ip4_route>
 800996a:	9a05      	ldr	r2, [sp, #20]
 800996c:	4601      	mov	r1, r0
 800996e:	4630      	mov	r0, r6
 8009970:	f7fe fd16 	bl	80083a0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009974:	f241 131c 	movw	r3, #4380	; 0x111c
 8009978:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800997a:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800997c:	0081      	lsls	r1, r0, #2
 800997e:	429a      	cmp	r2, r3
 8009980:	4616      	mov	r6, r2
 8009982:	bf38      	it	cc
 8009984:	461e      	movcc	r6, r3
 8009986:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800998a:	f240 8148 	bls.w	8009c1e <tcp_input+0xb4e>
 800998e:	b28b      	uxth	r3, r1
 8009990:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009994:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 8138 	beq.w	8009c0e <tcp_input+0xb3e>
        --pcb->snd_queuelen;
 800999e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 80099a2:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 80099a4:	3b01      	subs	r3, #1
 80099a6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	f000 812a 	beq.w	8009c04 <tcp_input+0xb34>
          pcb->unacked = rseg->next;
 80099b0:	6833      	ldr	r3, [r6, #0]
 80099b2:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7fd fdd3 	bl	8007560 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 80099ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 811d 	beq.w	8009bfc <tcp_input+0xb2c>
          pcb->rtime = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 80099c6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80099ca:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80099ce:	b133      	cbz	r3, 80099de <tcp_input+0x90e>
 80099d0:	2200      	movs	r2, #0
 80099d2:	4629      	mov	r1, r5
 80099d4:	6928      	ldr	r0, [r5, #16]
 80099d6:	4798      	blx	r3
        if (err == ERR_ABRT) {
 80099d8:	300d      	adds	r0, #13
 80099da:	f43f acf4 	beq.w	80093c6 <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 80099de:	8b6b      	ldrh	r3, [r5, #26]
 80099e0:	f043 0302 	orr.w	r3, r3, #2
 80099e4:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 80099e6:	e4db      	b.n	80093a0 <tcp_input+0x2d0>
      if (ackno == pcb->snd_nxt) {
 80099e8:	4b3d      	ldr	r3, [pc, #244]	; (8009ae0 <tcp_input+0xa10>)
 80099ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	f47f acd6 	bne.w	80093a0 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 80099f4:	f899 3000 	ldrb.w	r3, [r9]
 80099f8:	f043 0308 	orr.w	r3, r3, #8
 80099fc:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009a00:	8b6b      	ldrh	r3, [r5, #26]
 8009a02:	f023 0301 	bic.w	r3, r3, #1
 8009a06:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 8009a08:	e4ca      	b.n	80093a0 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	4c31      	ldr	r4, [pc, #196]	; (8009ad4 <tcp_input+0xa04>)
 8009a0e:	f000 fd17 	bl	800a440 <tcp_send_empty_ack>
 8009a12:	e4d8      	b.n	80093c6 <tcp_input+0x2f6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a14:	8802      	ldrh	r2, [r0, #0]
 8009a16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a1a:	9b05      	ldr	r3, [sp, #20]
 8009a1c:	881a      	ldrh	r2, [r3, #0]
 8009a1e:	4b2f      	ldr	r3, [pc, #188]	; (8009adc <tcp_input+0xa0c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	441a      	add	r2, r3
 8009a24:	4b2e      	ldr	r3, [pc, #184]	; (8009ae0 <tcp_input+0xa10>)
 8009a26:	4628      	mov	r0, r5
 8009a28:	6819      	ldr	r1, [r3, #0]
 8009a2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ae4 <tcp_input+0xa14>)
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	3304      	adds	r3, #4
 8009a30:	f000 fcbe 	bl	800a3b0 <tcp_rst>
 8009a34:	f7ff bb5b 	b.w	80090ee <tcp_input+0x1e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a38:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8009a3a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d001      	beq.n	8009a46 <tcp_input+0x976>
              pcb->rcv_wnd++;
 8009a42:	3301      	adds	r3, #1
 8009a44:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009a46:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	f43f af49 	beq.w	80098e2 <tcp_input+0x812>
 8009a50:	2300      	movs	r3, #0
 8009a52:	4629      	mov	r1, r5
 8009a54:	6928      	ldr	r0, [r5, #16]
 8009a56:	461a      	mov	r2, r3
 8009a58:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8009a5a:	300d      	adds	r0, #13
 8009a5c:	f47f af41 	bne.w	80098e2 <tcp_input+0x812>
 8009a60:	e4b1      	b.n	80093c6 <tcp_input+0x2f6>
            pbuf_free(recv_data);
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7fd f9fe 	bl	8006e64 <pbuf_free>
            tcp_abort(pcb);
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f7fe f9ed 	bl	8007e48 <tcp_abort>
            goto aborted;
 8009a6e:	e4aa      	b.n	80093c6 <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a70:	06d9      	lsls	r1, r3, #27
 8009a72:	f57f ac95 	bpl.w	80093a0 <tcp_input+0x2d0>
 8009a76:	4b1a      	ldr	r3, [pc, #104]	; (8009ae0 <tcp_input+0xa10>)
 8009a78:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	f47f ac8f 	bne.w	80093a0 <tcp_input+0x2d0>
 8009a82:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f47f ac8b 	bne.w	80093a0 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 8009a8a:	2306      	movs	r3, #6
 8009a8c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 8009a8e:	e487      	b.n	80093a0 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009a90:	079b      	lsls	r3, r3, #30
 8009a92:	f57f ac85 	bpl.w	80093a0 <tcp_input+0x2d0>
 8009a96:	4b11      	ldr	r3, [pc, #68]	; (8009adc <tcp_input+0xa0c>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	f47f ac7e 	bne.w	80093a0 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 fc05 	bl	800a2b4 <tcp_rexmit>
    if (err != ERR_ABRT) {
 8009aaa:	e479      	b.n	80093a0 <tcp_input+0x2d0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009aac:	4633      	mov	r3, r6
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7fe fb8d 	bl	80081d0 <tcp_recv_null>
 8009ab6:	e700      	b.n	80098ba <tcp_input+0x7ea>
 8009ab8:	24010544 	.word	0x24010544
 8009abc:	2401055c 	.word	0x2401055c
 8009ac0:	24010548 	.word	0x24010548
 8009ac4:	0800ebc4 	.word	0x0800ebc4
 8009ac8:	0800ede8 	.word	0x0800ede8
 8009acc:	0800dd68 	.word	0x0800dd68
 8009ad0:	0800edf8 	.word	0x0800edf8
 8009ad4:	24010588 	.word	0x24010588
 8009ad8:	0800ef94 	.word	0x0800ef94
 8009adc:	24010584 	.word	0x24010584
 8009ae0:	24010560 	.word	0x24010560
 8009ae4:	24009a94 	.word	0x24009a94
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009ae8:	69ab      	ldr	r3, [r5, #24]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f43f aaff 	beq.w	80090ee <tcp_input+0x1e>
 8009af0:	4601      	mov	r1, r0
 8009af2:	f04f 32ff 	mov.w	r2, #4294967295
 8009af6:	6928      	ldr	r0, [r5, #16]
 8009af8:	4798      	blx	r3
 8009afa:	f7ff baf8 	b.w	80090ee <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 8009afe:	4641      	mov	r1, r8
 8009b00:	4648      	mov	r0, r9
 8009b02:	f7fe f8cb 	bl	8007c9c <tcp_abandon>
      return;
 8009b06:	f7ff baf2 	b.w	80090ee <tcp_input+0x1e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009b0a:	4b4b      	ldr	r3, [pc, #300]	; (8009c38 <tcp_input+0xb68>)
 8009b0c:	f240 120d 	movw	r2, #269	; 0x10d
 8009b10:	494a      	ldr	r1, [pc, #296]	; (8009c3c <tcp_input+0xb6c>)
 8009b12:	484b      	ldr	r0, [pc, #300]	; (8009c40 <tcp_input+0xb70>)
 8009b14:	f003 f96e 	bl	800cdf4 <iprintf>
      if (prev != NULL) {
 8009b18:	f1b8 0f00 	cmp.w	r8, #0
 8009b1c:	f43f abf9 	beq.w	8009312 <tcp_input+0x242>
 8009b20:	68eb      	ldr	r3, [r5, #12]
 8009b22:	f7ff bbf0 	b.w	8009306 <tcp_input+0x236>
          pcb->state = ESTABLISHED;
 8009b26:	2304      	movs	r3, #4
 8009b28:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 8009b2a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d09b      	beq.n	8009a68 <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d056      	beq.n	8009be4 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009b36:	2200      	movs	r2, #0
 8009b38:	4629      	mov	r1, r5
 8009b3a:	6928      	ldr	r0, [r5, #16]
 8009b3c:	4798      	blx	r3
          if (err != ERR_OK) {
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d14c      	bne.n	8009bdc <tcp_input+0xb0c>
          tcp_receive(pcb);
 8009b42:	4628      	mov	r0, r5
 8009b44:	f7fe fd7c 	bl	8008640 <tcp_receive>
          if (recv_acked != 0) {
 8009b48:	f8bb 3000 	ldrh.w	r3, [fp]
 8009b4c:	b113      	cbz	r3, 8009b54 <tcp_input+0xa84>
            recv_acked--;
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b54:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 8009b56:	f241 131c 	movw	r3, #4380	; 0x111c
 8009b5a:	004a      	lsls	r2, r1, #1
 8009b5c:	0088      	lsls	r0, r1, #2
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	4616      	mov	r6, r2
 8009b62:	bf38      	it	cc
 8009b64:	461e      	movcc	r6, r3
 8009b66:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 8009b6a:	d923      	bls.n	8009bb4 <tcp_input+0xae4>
 8009b6c:	b283      	uxth	r3, r0
 8009b6e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8009b72:	f899 3000 	ldrb.w	r3, [r9]
 8009b76:	069a      	lsls	r2, r3, #26
 8009b78:	f57f ac12 	bpl.w	80093a0 <tcp_input+0x2d0>
 8009b7c:	e56f      	b.n	800965e <tcp_input+0x58e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009b7e:	4b2e      	ldr	r3, [pc, #184]	; (8009c38 <tcp_input+0xb68>)
 8009b80:	f240 1215 	movw	r2, #277	; 0x115
 8009b84:	492f      	ldr	r1, [pc, #188]	; (8009c44 <tcp_input+0xb74>)
 8009b86:	482e      	ldr	r0, [pc, #184]	; (8009c40 <tcp_input+0xb70>)
 8009b88:	f003 f934 	bl	800cdf4 <iprintf>
 8009b8c:	f7ff bbc5 	b.w	800931a <tcp_input+0x24a>
        TCP_RMV_ACTIVE(pcb);
 8009b90:	68ea      	ldr	r2, [r5, #12]
 8009b92:	60da      	str	r2, [r3, #12]
 8009b94:	e640      	b.n	8009818 <tcp_input+0x748>
          TCP_RMV_ACTIVE(pcb);
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f43f ae3e 	beq.w	8009818 <tcp_input+0x748>
 8009b9c:	68da      	ldr	r2, [r3, #12]
 8009b9e:	42aa      	cmp	r2, r5
 8009ba0:	d0f6      	beq.n	8009b90 <tcp_input+0xac0>
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	e7f7      	b.n	8009b96 <tcp_input+0xac6>
  } else if (flags & TCP_FIN) {
 8009ba6:	07d0      	lsls	r0, r2, #31
 8009ba8:	f57f ac5d 	bpl.w	8009466 <tcp_input+0x396>
    pcb->tmr = tcp_ticks;
 8009bac:	4b26      	ldr	r3, [pc, #152]	; (8009c48 <tcp_input+0xb78>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	622b      	str	r3, [r5, #32]
 8009bb2:	e458      	b.n	8009466 <tcp_input+0x396>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	bf88      	it	hi
 8009bb8:	b293      	uxthhi	r3, r2
 8009bba:	e7d8      	b.n	8009b6e <tcp_input+0xa9e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	f47f af19 	bne.w	80099f4 <tcp_input+0x924>
 8009bc2:	4b1d      	ldr	r3, [pc, #116]	; (8009c38 <tcp_input+0xb68>)
 8009bc4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009bc8:	4920      	ldr	r1, [pc, #128]	; (8009c4c <tcp_input+0xb7c>)
 8009bca:	481d      	ldr	r0, [pc, #116]	; (8009c40 <tcp_input+0xb70>)
 8009bcc:	f003 f912 	bl	800cdf4 <iprintf>
 8009bd0:	e710      	b.n	80099f4 <tcp_input+0x924>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bd2:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8009bd6:	9b05      	ldr	r3, [sp, #20]
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	e722      	b.n	8009a22 <tcp_input+0x952>
            if (err != ERR_ABRT) {
 8009bdc:	300d      	adds	r0, #13
 8009bde:	f43f abf2 	beq.w	80093c6 <tcp_input+0x2f6>
 8009be2:	e741      	b.n	8009a68 <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009be4:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <tcp_input+0xb68>)
 8009be6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009bea:	4919      	ldr	r1, [pc, #100]	; (8009c50 <tcp_input+0xb80>)
 8009bec:	4814      	ldr	r0, [pc, #80]	; (8009c40 <tcp_input+0xb70>)
 8009bee:	f003 f901 	bl	800cdf4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009bf2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d19d      	bne.n	8009b36 <tcp_input+0xa66>
 8009bfa:	e735      	b.n	8009a68 <tcp_input+0x998>
          pcb->rtime = -1;
 8009bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c00:	862b      	strh	r3, [r5, #48]	; 0x30
 8009c02:	e6e2      	b.n	80099ca <tcp_input+0x8fa>
          rseg = pcb->unsent;
 8009c04:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009c06:	b176      	cbz	r6, 8009c26 <tcp_input+0xb56>
          pcb->unsent = rseg->next;
 8009c08:	6833      	ldr	r3, [r6, #0]
 8009c0a:	66eb      	str	r3, [r5, #108]	; 0x6c
 8009c0c:	e6d2      	b.n	80099b4 <tcp_input+0x8e4>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <tcp_input+0xb68>)
 8009c10:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009c14:	490f      	ldr	r1, [pc, #60]	; (8009c54 <tcp_input+0xb84>)
 8009c16:	480a      	ldr	r0, [pc, #40]	; (8009c40 <tcp_input+0xb70>)
 8009c18:	f003 f8ec 	bl	800cdf4 <iprintf>
 8009c1c:	e6bf      	b.n	800999e <tcp_input+0x8ce>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	bf88      	it	hi
 8009c22:	b293      	uxthhi	r3, r2
 8009c24:	e6b4      	b.n	8009990 <tcp_input+0x8c0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009c26:	4b04      	ldr	r3, [pc, #16]	; (8009c38 <tcp_input+0xb68>)
 8009c28:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009c2c:	490a      	ldr	r1, [pc, #40]	; (8009c58 <tcp_input+0xb88>)
 8009c2e:	4804      	ldr	r0, [pc, #16]	; (8009c40 <tcp_input+0xb70>)
 8009c30:	f003 f8e0 	bl	800cdf4 <iprintf>
 8009c34:	e7e8      	b.n	8009c08 <tcp_input+0xb38>
 8009c36:	bf00      	nop
 8009c38:	0800ebc4 	.word	0x0800ebc4
 8009c3c:	0800eea0 	.word	0x0800eea0
 8009c40:	0800dd68 	.word	0x0800dd68
 8009c44:	0800eecc 	.word	0x0800eecc
 8009c48:	24010554 	.word	0x24010554
 8009c4c:	0800ef28 	.word	0x0800ef28
 8009c50:	0800ef74 	.word	0x0800ef74
 8009c54:	0800ef48 	.word	0x0800ef48
 8009c58:	0800ef60 	.word	0x0800ef60

08009c5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009c5c:	4a02      	ldr	r2, [pc, #8]	; (8009c68 <tcp_trigger_input_pcb_close+0xc>)
 8009c5e:	7813      	ldrb	r3, [r2, #0]
 8009c60:	f043 0310 	orr.w	r3, r3, #16
 8009c64:	7013      	strb	r3, [r2, #0]
}
 8009c66:	4770      	bx	lr
 8009c68:	24010580 	.word	0x24010580

08009c6c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	460e      	mov	r6, r1
 8009c72:	f89d a020 	ldrb.w	sl, [sp, #32]
 8009c76:	4690      	mov	r8, r2
 8009c78:	4699      	mov	r9, r3
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d04a      	beq.n	8009d16 <tcp_create_segment+0xaa>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	d050      	beq.n	8009d26 <tcp_create_segment+0xba>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009c84:	ea4f 058a 	mov.w	r5, sl, lsl #2

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009c88:	2003      	movs	r0, #3
 8009c8a:	f7fc fcdf 	bl	800664c <memp_malloc>
 8009c8e:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009c90:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d054      	beq.n	8009d42 <tcp_create_segment+0xd6>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
 8009c98:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8009c9c:	2300      	movs	r3, #0
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009c9e:	8932      	ldrh	r2, [r6, #8]
 8009ca0:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 8009ca4:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009ca6:	42aa      	cmp	r2, r5
  seg->next = NULL;
 8009ca8:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009caa:	d32c      	bcc.n	8009d06 <tcp_create_segment+0x9a>
  seg->len = p->tot_len - optlen;
 8009cac:	eba2 020a 	sub.w	r2, r2, sl
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8009cb4:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009cb6:	f7fd f835 	bl	8006d24 <pbuf_add_header>
 8009cba:	4606      	mov	r6, r0
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d139      	bne.n	8009d34 <tcp_create_segment+0xc8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009cc0:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  seg->tcphdr->seqno = lwip_htonl(seqno);
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009cc2:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009cc4:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009cc6:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009cca:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009cce:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009cd2:	f7fc f90d 	bl	8005ef0 <lwip_htons>
 8009cd6:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009cda:	8b38      	ldrh	r0, [r7, #24]
 8009cdc:	68e7      	ldr	r7, [r4, #12]
 8009cde:	f7fc f907 	bl	8005ef0 <lwip_htons>
 8009ce2:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009ce4:	4648      	mov	r0, r9
 8009ce6:	68e7      	ldr	r7, [r4, #12]
 8009ce8:	f7fc f906 	bl	8005ef8 <lwip_htonl>
 8009cec:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009cee:	ea45 0008 	orr.w	r0, r5, r8
 8009cf2:	68e7      	ldr	r7, [r4, #12]
 8009cf4:	f7fc f8fc 	bl	8005ef0 <lwip_htons>
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009cf8:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009cfa:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 8009cfc:	749e      	strb	r6, [r3, #18]
 8009cfe:	74de      	strb	r6, [r3, #19]
  return seg;
}
 8009d00:	4620      	mov	r0, r4
 8009d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009d06:	22b0      	movs	r2, #176	; 0xb0
 8009d08:	4b10      	ldr	r3, [pc, #64]	; (8009d4c <tcp_create_segment+0xe0>)
 8009d0a:	4911      	ldr	r1, [pc, #68]	; (8009d50 <tcp_create_segment+0xe4>)
 8009d0c:	4811      	ldr	r0, [pc, #68]	; (8009d54 <tcp_create_segment+0xe8>)
 8009d0e:	f003 f871 	bl	800cdf4 <iprintf>
  seg->len = p->tot_len - optlen;
 8009d12:	8932      	ldrh	r2, [r6, #8]
 8009d14:	e7ca      	b.n	8009cac <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009d16:	4b0d      	ldr	r3, [pc, #52]	; (8009d4c <tcp_create_segment+0xe0>)
 8009d18:	22a3      	movs	r2, #163	; 0xa3
 8009d1a:	490f      	ldr	r1, [pc, #60]	; (8009d58 <tcp_create_segment+0xec>)
 8009d1c:	480d      	ldr	r0, [pc, #52]	; (8009d54 <tcp_create_segment+0xe8>)
 8009d1e:	f003 f869 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	d1ae      	bne.n	8009c84 <tcp_create_segment+0x18>
 8009d26:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <tcp_create_segment+0xe0>)
 8009d28:	22a4      	movs	r2, #164	; 0xa4
 8009d2a:	490c      	ldr	r1, [pc, #48]	; (8009d5c <tcp_create_segment+0xf0>)
 8009d2c:	4809      	ldr	r0, [pc, #36]	; (8009d54 <tcp_create_segment+0xe8>)
 8009d2e:	f003 f861 	bl	800cdf4 <iprintf>
 8009d32:	e7a7      	b.n	8009c84 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 8009d34:	4620      	mov	r0, r4
    return NULL;
 8009d36:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 8009d38:	f7fd fc12 	bl	8007560 <tcp_seg_free>
}
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7fd f88e 	bl	8006e64 <pbuf_free>
    return NULL;
 8009d48:	e7da      	b.n	8009d00 <tcp_create_segment+0x94>
 8009d4a:	bf00      	nop
 8009d4c:	0800efb0 	.word	0x0800efb0
 8009d50:	0800f05c 	.word	0x0800f05c
 8009d54:	0800dd68 	.word	0x0800dd68
 8009d58:	0800f018 	.word	0x0800f018
 8009d5c:	0800f038 	.word	0x0800f038

08009d60 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009d60:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8009d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009d66:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8009d68:	4606      	mov	r6, r0
 8009d6a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009d6c:	2022      	movs	r0, #34	; 0x22
 8009d6e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8009d72:	461c      	mov	r4, r3
 8009d74:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8009d78:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8009d7c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009d80:	f7fd f8e0 	bl	8006f44 <pbuf_alloc>
  if (p != NULL) {
 8009d84:	4605      	mov	r5, r0
 8009d86:	b300      	cbz	r0, 8009dca <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009d88:	8943      	ldrh	r3, [r0, #10]
 8009d8a:	2b13      	cmp	r3, #19
 8009d8c:	d920      	bls.n	8009dd0 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 8009d8e:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 8009d90:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 8009d92:	f7fc f8ad 	bl	8005ef0 <lwip_htons>
 8009d96:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009d98:	4650      	mov	r0, sl
 8009d9a:	f7fc f8a9 	bl	8005ef0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8009d9e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 8009da0:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7fc f8a8 	bl	8005ef8 <lwip_htonl>
 8009da8:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009daa:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 8009dae:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009db0:	f7fc f89e 	bl	8005ef0 <lwip_htons>
 8009db4:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 8009db6:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009db8:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009dba:	f7fc f899 	bl	8005ef0 <lwip_htons>
    tcphdr->chksum = 0;
 8009dbe:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 8009dc0:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8009dc2:	7423      	strb	r3, [r4, #16]
 8009dc4:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8009dc6:	74a3      	strb	r3, [r4, #18]
 8009dc8:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 8009dca:	4628      	mov	r0, r5
 8009dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009dd0:	4b03      	ldr	r3, [pc, #12]	; (8009de0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 8009dd2:	f240 7223 	movw	r2, #1827	; 0x723
 8009dd6:	4903      	ldr	r1, [pc, #12]	; (8009de4 <tcp_output_alloc_header_common.constprop.0+0x84>)
 8009dd8:	4803      	ldr	r0, [pc, #12]	; (8009de8 <tcp_output_alloc_header_common.constprop.0+0x88>)
 8009dda:	f003 f80b 	bl	800cdf4 <iprintf>
 8009dde:	e7d6      	b.n	8009d8e <tcp_output_alloc_header_common.constprop.0+0x2e>
 8009de0:	0800efb0 	.word	0x0800efb0
 8009de4:	0800f074 	.word	0x0800f074
 8009de8:	0800dd68 	.word	0x0800dd68

08009dec <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	460d      	mov	r5, r1
 8009df0:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009df2:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009df4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009df6:	b190      	cbz	r0, 8009e1e <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8009df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009dfa:	2210      	movs	r2, #16
 8009dfc:	8b21      	ldrh	r1, [r4, #24]
 8009dfe:	9302      	str	r3, [sp, #8]
 8009e00:	e9cd 1200 	strd	r1, r2, [sp]
 8009e04:	4632      	mov	r2, r6
 8009e06:	4629      	mov	r1, r5
 8009e08:	8ae3      	ldrh	r3, [r4, #22]
 8009e0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009e0c:	f7ff ffa8 	bl	8009d60 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8009e10:	b118      	cbz	r0, 8009e1a <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009e12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e16:	4413      	add	r3, r2
 8009e18:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 8009e1a:	b004      	add	sp, #16
 8009e1c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009e1e:	4b04      	ldr	r3, [pc, #16]	; (8009e30 <tcp_output_alloc_header.constprop.0+0x44>)
 8009e20:	f240 7242 	movw	r2, #1858	; 0x742
 8009e24:	4903      	ldr	r1, [pc, #12]	; (8009e34 <tcp_output_alloc_header.constprop.0+0x48>)
 8009e26:	4804      	ldr	r0, [pc, #16]	; (8009e38 <tcp_output_alloc_header.constprop.0+0x4c>)
 8009e28:	f002 ffe4 	bl	800cdf4 <iprintf>
 8009e2c:	e7e4      	b.n	8009df8 <tcp_output_alloc_header.constprop.0+0xc>
 8009e2e:	bf00      	nop
 8009e30:	0800efb0 	.word	0x0800efb0
 8009e34:	0800f0a4 	.word	0x0800f0a4
 8009e38:	0800dd68 	.word	0x0800dd68

08009e3c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8009e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3e:	4604      	mov	r4, r0
 8009e40:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009e42:	460d      	mov	r5, r1
{
 8009e44:	4617      	mov	r7, r2
 8009e46:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009e48:	b321      	cbz	r1, 8009e94 <tcp_output_control_segment+0x58>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009e4a:	b35c      	cbz	r4, 8009ea4 <tcp_output_control_segment+0x68>
 8009e4c:	7a20      	ldrb	r0, [r4, #8]
 8009e4e:	b9a8      	cbnz	r0, 8009e7c <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 8009e50:	4630      	mov	r0, r6
 8009e52:	f001 ff97 	bl	800bd84 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 8009e56:	b1a8      	cbz	r0, 8009e84 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8009e58:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 8009e5a:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8009e5c:	9400      	str	r4, [sp, #0]
 8009e5e:	2406      	movs	r4, #6
 8009e60:	4632      	mov	r2, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	9002      	str	r0, [sp, #8]
 8009e66:	4628      	mov	r0, r5
 8009e68:	9401      	str	r4, [sp, #4]
 8009e6a:	f002 f921 	bl	800c0b0 <ip4_output_if>
 8009e6e:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8009e70:	4628      	mov	r0, r5
 8009e72:	f7fc fff7 	bl	8006e64 <pbuf_free>
  return err;
}
 8009e76:	4620      	mov	r0, r4
 8009e78:	b005      	add	sp, #20
 8009e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 8009e7c:	f7fc fe40 	bl	8006b00 <netif_get_by_index>
  if (netif == NULL) {
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d1e9      	bne.n	8009e58 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 8009e84:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f7fc ffeb 	bl	8006e64 <pbuf_free>
}
 8009e8e:	4620      	mov	r0, r4
 8009e90:	b005      	add	sp, #20
 8009e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009e94:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <tcp_output_control_segment+0x78>)
 8009e96:	f240 7287 	movw	r2, #1927	; 0x787
 8009e9a:	4907      	ldr	r1, [pc, #28]	; (8009eb8 <tcp_output_control_segment+0x7c>)
 8009e9c:	4807      	ldr	r0, [pc, #28]	; (8009ebc <tcp_output_control_segment+0x80>)
 8009e9e:	f002 ffa9 	bl	800cdf4 <iprintf>
 8009ea2:	e7d2      	b.n	8009e4a <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f001 ff6d 	bl	800bd84 <ip4_route>
  if (netif == NULL) {
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d0ea      	beq.n	8009e84 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 8009eae:	23ff      	movs	r3, #255	; 0xff
 8009eb0:	e7d4      	b.n	8009e5c <tcp_output_control_segment+0x20>
 8009eb2:	bf00      	nop
 8009eb4:	0800efb0 	.word	0x0800efb0
 8009eb8:	0800f0cc 	.word	0x0800f0cc
 8009ebc:	0800dd68 	.word	0x0800dd68

08009ec0 <tcp_split_unsent_seg>:
{
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009ec4:	4605      	mov	r5, r0
{
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f000 80a7 	beq.w	800a01e <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 8009ed0:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 8009ed2:	b376      	cbz	r6, 8009f32 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 8009ed4:	2c00      	cmp	r4, #0
 8009ed6:	f000 80b3 	beq.w	800a040 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 8009eda:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 8009ede:	45a1      	cmp	r9, r4
 8009ee0:	f240 8099 	bls.w	800a016 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009ee4:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	d328      	bcc.n	8009f3c <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 8009eea:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 8009eee:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009ef2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009ef6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009ef8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 8009efc:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009f00:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009f04:	eb08 010b 	add.w	r1, r8, fp
 8009f08:	b289      	uxth	r1, r1
 8009f0a:	f7fd f81b 	bl	8006f44 <pbuf_alloc>
  if (p == NULL) {
 8009f0e:	4607      	mov	r7, r0
 8009f10:	b178      	cbz	r0, 8009f32 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 8009f12:	6870      	ldr	r0, [r6, #4]
 8009f14:	8932      	ldrh	r2, [r6, #8]
 8009f16:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009f18:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 8009f1a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009f1c:	4642      	mov	r2, r8
 8009f1e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 8009f20:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	f7fd f9b4 	bl	8007290 <pbuf_copy_partial>
 8009f28:	4540      	cmp	r0, r8
 8009f2a:	d01d      	beq.n	8009f68 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f7fc ff99 	bl	8006e64 <pbuf_free>
  return ERR_MEM;
 8009f32:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009f36:	b003      	add	sp, #12
 8009f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009f3c:	4b45      	ldr	r3, [pc, #276]	; (800a054 <tcp_split_unsent_seg+0x194>)
 8009f3e:	f240 325b 	movw	r2, #859	; 0x35b
 8009f42:	4945      	ldr	r1, [pc, #276]	; (800a058 <tcp_split_unsent_seg+0x198>)
 8009f44:	4845      	ldr	r0, [pc, #276]	; (800a05c <tcp_split_unsent_seg+0x19c>)
 8009f46:	f002 ff55 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009f4a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 8009f4e:	f1b9 0f00 	cmp.w	r9, #0
 8009f52:	d1ca      	bne.n	8009eea <tcp_split_unsent_seg+0x2a>
 8009f54:	4b3f      	ldr	r3, [pc, #252]	; (800a054 <tcp_split_unsent_seg+0x194>)
 8009f56:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009f5a:	4941      	ldr	r1, [pc, #260]	; (800a060 <tcp_split_unsent_seg+0x1a0>)
 8009f5c:	483f      	ldr	r0, [pc, #252]	; (800a05c <tcp_split_unsent_seg+0x19c>)
 8009f5e:	f002 ff49 	bl	800cdf4 <iprintf>
  remainder = useg->len - split;
 8009f62:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 8009f66:	e7c0      	b.n	8009eea <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009f68:	68f3      	ldr	r3, [r6, #12]
 8009f6a:	8998      	ldrh	r0, [r3, #12]
 8009f6c:	f7fb ffc0 	bl	8005ef0 <lwip_htons>
  if (split_flags & TCP_PSH) {
 8009f70:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009f74:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 8009f78:	d159      	bne.n	800a02e <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009f7a:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 8009f7e:	f018 0f01 	tst.w	r8, #1
 8009f82:	d003      	beq.n	8009f8c <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 8009f84:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8009f88:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009f8c:	68f3      	ldr	r3, [r6, #12]
 8009f8e:	6858      	ldr	r0, [r3, #4]
 8009f90:	f7fb ffb2 	bl	8005ef8 <lwip_htonl>
 8009f94:	f8cd a000 	str.w	sl, [sp]
 8009f98:	1823      	adds	r3, r4, r0
 8009f9a:	465a      	mov	r2, fp
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f7ff fe64 	bl	8009c6c <tcp_create_segment>
  if (seg == NULL) {
 8009fa4:	4682      	mov	sl, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d0c0      	beq.n	8009f2c <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009faa:	6870      	ldr	r0, [r6, #4]
 8009fac:	eba4 0409 	sub.w	r4, r4, r9
 8009fb0:	f7fd f8ce 	bl	8007150 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009fb4:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009fb6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8009fba:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009fbc:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009fbe:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009fc4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009fc8:	b289      	uxth	r1, r1
 8009fca:	f7fd f869 	bl	80070a0 <pbuf_realloc>
  useg->len -= remainder;
 8009fce:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009fd0:	4640      	mov	r0, r8
  useg->len -= remainder;
 8009fd2:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009fd4:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 8009fd6:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009fd8:	899c      	ldrh	r4, [r3, #12]
 8009fda:	f7fb ff89 	bl	8005ef0 <lwip_htons>
 8009fde:	68f3      	ldr	r3, [r6, #12]
 8009fe0:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009fe2:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009fe4:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009fe6:	f7fd f8b3 	bl	8007150 <pbuf_clen>
 8009fea:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8009fee:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009ff0:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009ff4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009ff8:	f7fd f8aa 	bl	8007150 <pbuf_clen>
 8009ffc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800a000:	4418      	add	r0, r3
  seg->next = useg->next;
 800a002:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a004:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800a008:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800a00c:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 800a010:	f8da 3000 	ldr.w	r3, [sl]
 800a014:	b183      	cbz	r3, 800a038 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 800a016:	2000      	movs	r0, #0
}
 800a018:	b003      	add	sp, #12
 800a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a01e:	4b0d      	ldr	r3, [pc, #52]	; (800a054 <tcp_split_unsent_seg+0x194>)
 800a020:	f240 324b 	movw	r2, #843	; 0x34b
 800a024:	490f      	ldr	r1, [pc, #60]	; (800a064 <tcp_split_unsent_seg+0x1a4>)
 800a026:	480d      	ldr	r0, [pc, #52]	; (800a05c <tcp_split_unsent_seg+0x19c>)
 800a028:	f002 fee4 	bl	800cdf4 <iprintf>
 800a02c:	e750      	b.n	8009ed0 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 800a02e:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800a032:	f04f 0b08 	mov.w	fp, #8
 800a036:	e7a2      	b.n	8009f7e <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 800a038:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 800a03a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800a03e:	e77a      	b.n	8009f36 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a040:	4b04      	ldr	r3, [pc, #16]	; (800a054 <tcp_split_unsent_seg+0x194>)
 800a042:	f240 3253 	movw	r2, #851	; 0x353
 800a046:	4908      	ldr	r1, [pc, #32]	; (800a068 <tcp_split_unsent_seg+0x1a8>)
 800a048:	4804      	ldr	r0, [pc, #16]	; (800a05c <tcp_split_unsent_seg+0x19c>)
 800a04a:	f002 fed3 	bl	800cdf4 <iprintf>
    return ERR_VAL;
 800a04e:	f06f 0005 	mvn.w	r0, #5
 800a052:	e770      	b.n	8009f36 <tcp_split_unsent_seg+0x76>
 800a054:	0800efb0 	.word	0x0800efb0
 800a058:	0800f140 	.word	0x0800f140
 800a05c:	0800dd68 	.word	0x0800dd68
 800a060:	0800f150 	.word	0x0800f150
 800a064:	0800f0f8 	.word	0x0800f0f8
 800a068:	0800f11c 	.word	0x0800f11c

0800a06c <tcp_enqueue_flags>:
{
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a070:	f011 0703 	ands.w	r7, r1, #3
{
 800a074:	b082      	sub	sp, #8
 800a076:	460d      	mov	r5, r1
 800a078:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a07a:	d05e      	beq.n	800a13a <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a07c:	2c00      	cmp	r4, #0
 800a07e:	d065      	beq.n	800a14c <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 800a080:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a084:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 800a088:	d049      	beq.n	800a11e <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a08a:	2104      	movs	r1, #4
 800a08c:	2036      	movs	r0, #54	; 0x36
 800a08e:	f7fc ff59 	bl	8006f44 <pbuf_alloc>
 800a092:	4606      	mov	r6, r0
 800a094:	2800      	cmp	r0, #0
 800a096:	d049      	beq.n	800a12c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a098:	8943      	ldrh	r3, [r0, #10]
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d872      	bhi.n	800a184 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 800a09e:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a0a2:	4b40      	ldr	r3, [pc, #256]	; (800a1a4 <tcp_enqueue_flags+0x138>)
 800a0a4:	f240 4239 	movw	r2, #1081	; 0x439
 800a0a8:	493f      	ldr	r1, [pc, #252]	; (800a1a8 <tcp_enqueue_flags+0x13c>)
 800a0aa:	4840      	ldr	r0, [pc, #256]	; (800a1ac <tcp_enqueue_flags+0x140>)
 800a0ac:	f002 fea2 	bl	800cdf4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	f8cd 8000 	str.w	r8, [sp]
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f7ff fdd6 	bl	8009c6c <tcp_create_segment>
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d032      	beq.n	800a12c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a0c6:	68c3      	ldr	r3, [r0, #12]
 800a0c8:	079a      	lsls	r2, r3, #30
 800a0ca:	d153      	bne.n	800a174 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a0cc:	8933      	ldrh	r3, [r6, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d144      	bne.n	800a15c <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 800a0d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d04b      	beq.n	800a170 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a0d8:	461a      	mov	r2, r3
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1fb      	bne.n	800a0d8 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800a0e0:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a0e8:	b117      	cbz	r7, 800a0f0 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 800a0ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800a0f0:	07eb      	lsls	r3, r5, #31
 800a0f2:	d503      	bpl.n	800a0fc <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 800a0f4:	8b63      	ldrh	r3, [r4, #26]
 800a0f6:	f043 0320 	orr.w	r3, r3, #32
 800a0fa:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a0fc:	6870      	ldr	r0, [r6, #4]
 800a0fe:	f7fd f827 	bl	8007150 <pbuf_clen>
 800a102:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a106:	4418      	add	r0, r3
 800a108:	b280      	uxth	r0, r0
 800a10a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800a10e:	b118      	cbz	r0, 800a118 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a110:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a112:	2800      	cmp	r0, #0
 800a114:	d039      	beq.n	800a18a <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 800a116:	2000      	movs	r0, #0
}
 800a118:	b002      	add	sp, #8
 800a11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a11e:	4641      	mov	r1, r8
 800a120:	2036      	movs	r0, #54	; 0x36
 800a122:	f7fc ff0f 	bl	8006f44 <pbuf_alloc>
 800a126:	4606      	mov	r6, r0
 800a128:	2800      	cmp	r0, #0
 800a12a:	d1c1      	bne.n	800a0b0 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a12c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800a12e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a136:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800a138:	e7ee      	b.n	800a118 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a13a:	4b1a      	ldr	r3, [pc, #104]	; (800a1a4 <tcp_enqueue_flags+0x138>)
 800a13c:	f240 4211 	movw	r2, #1041	; 0x411
 800a140:	491b      	ldr	r1, [pc, #108]	; (800a1b0 <tcp_enqueue_flags+0x144>)
 800a142:	481a      	ldr	r0, [pc, #104]	; (800a1ac <tcp_enqueue_flags+0x140>)
 800a144:	f002 fe56 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a148:	2c00      	cmp	r4, #0
 800a14a:	d199      	bne.n	800a080 <tcp_enqueue_flags+0x14>
 800a14c:	4b15      	ldr	r3, [pc, #84]	; (800a1a4 <tcp_enqueue_flags+0x138>)
 800a14e:	f240 4213 	movw	r2, #1043	; 0x413
 800a152:	4918      	ldr	r1, [pc, #96]	; (800a1b4 <tcp_enqueue_flags+0x148>)
 800a154:	4815      	ldr	r0, [pc, #84]	; (800a1ac <tcp_enqueue_flags+0x140>)
 800a156:	f002 fe4d 	bl	800cdf4 <iprintf>
 800a15a:	e791      	b.n	800a080 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a15c:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <tcp_enqueue_flags+0x138>)
 800a15e:	f240 4243 	movw	r2, #1091	; 0x443
 800a162:	4915      	ldr	r1, [pc, #84]	; (800a1b8 <tcp_enqueue_flags+0x14c>)
 800a164:	4811      	ldr	r0, [pc, #68]	; (800a1ac <tcp_enqueue_flags+0x140>)
 800a166:	f002 fe45 	bl	800cdf4 <iprintf>
  if (pcb->unsent == NULL) {
 800a16a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1b3      	bne.n	800a0d8 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 800a170:	66e6      	str	r6, [r4, #108]	; 0x6c
 800a172:	e7b6      	b.n	800a0e2 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a174:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <tcp_enqueue_flags+0x138>)
 800a176:	f240 4242 	movw	r2, #1090	; 0x442
 800a17a:	4910      	ldr	r1, [pc, #64]	; (800a1bc <tcp_enqueue_flags+0x150>)
 800a17c:	480b      	ldr	r0, [pc, #44]	; (800a1ac <tcp_enqueue_flags+0x140>)
 800a17e:	f002 fe39 	bl	800cdf4 <iprintf>
 800a182:	e7a3      	b.n	800a0cc <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 800a184:	f04f 0801 	mov.w	r8, #1
 800a188:	e792      	b.n	800a0b0 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a18a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800a18c:	2c00      	cmp	r4, #0
 800a18e:	d1c3      	bne.n	800a118 <tcp_enqueue_flags+0xac>
 800a190:	4b04      	ldr	r3, [pc, #16]	; (800a1a4 <tcp_enqueue_flags+0x138>)
 800a192:	f240 4265 	movw	r2, #1125	; 0x465
 800a196:	490a      	ldr	r1, [pc, #40]	; (800a1c0 <tcp_enqueue_flags+0x154>)
 800a198:	4804      	ldr	r0, [pc, #16]	; (800a1ac <tcp_enqueue_flags+0x140>)
 800a19a:	f002 fe2b 	bl	800cdf4 <iprintf>
  return ERR_OK;
 800a19e:	4620      	mov	r0, r4
 800a1a0:	e7ba      	b.n	800a118 <tcp_enqueue_flags+0xac>
 800a1a2:	bf00      	nop
 800a1a4:	0800efb0 	.word	0x0800efb0
 800a1a8:	0800f1d8 	.word	0x0800f1d8
 800a1ac:	0800dd68 	.word	0x0800dd68
 800a1b0:	0800f160 	.word	0x0800f160
 800a1b4:	0800f1b8 	.word	0x0800f1b8
 800a1b8:	0800f22c 	.word	0x0800f22c
 800a1bc:	0800f214 	.word	0x0800f214
 800a1c0:	0800f258 	.word	0x0800f258

0800a1c4 <tcp_send_fin>:
{
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	b188      	cbz	r0, 800a1ee <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800a1ca:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 800a1cc:	b14c      	cbz	r4, 800a1e2 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a1ce:	4625      	mov	r5, r4
 800a1d0:	6824      	ldr	r4, [r4, #0]
 800a1d2:	2c00      	cmp	r4, #0
 800a1d4:	d1fb      	bne.n	800a1ce <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a1d6:	68eb      	ldr	r3, [r5, #12]
 800a1d8:	8998      	ldrh	r0, [r3, #12]
 800a1da:	f7fb fe89 	bl	8005ef0 <lwip_htons>
 800a1de:	0743      	lsls	r3, r0, #29
 800a1e0:	d00d      	beq.n	800a1fe <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	2101      	movs	r1, #1
}
 800a1e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a1ea:	f7ff bf3f 	b.w	800a06c <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <tcp_send_fin+0x58>)
 800a1f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a1f4:	490a      	ldr	r1, [pc, #40]	; (800a220 <tcp_send_fin+0x5c>)
 800a1f6:	480b      	ldr	r0, [pc, #44]	; (800a224 <tcp_send_fin+0x60>)
 800a1f8:	f002 fdfc 	bl	800cdf4 <iprintf>
 800a1fc:	e7e5      	b.n	800a1ca <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a1fe:	68eb      	ldr	r3, [r5, #12]
 800a200:	2001      	movs	r0, #1
 800a202:	899f      	ldrh	r7, [r3, #12]
 800a204:	f7fb fe74 	bl	8005ef0 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800a208:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a20a:	4338      	orrs	r0, r7
 800a20c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a20e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a212:	8190      	strh	r0, [r2, #12]
}
 800a214:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 800a216:	8373      	strh	r3, [r6, #26]
}
 800a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21a:	bf00      	nop
 800a21c:	0800efb0 	.word	0x0800efb0
 800a220:	0800f280 	.word	0x0800f280
 800a224:	0800dd68 	.word	0x0800dd68

0800a228 <tcp_rexmit_rto_prepare>:
{
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a22a:	4605      	mov	r5, r0
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d032      	beq.n	800a296 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800a230:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800a232:	b132      	cbz	r2, 800a242 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a234:	6813      	ldr	r3, [r2, #0]
 800a236:	4614      	mov	r4, r2
 800a238:	b15b      	cbz	r3, 800a252 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	7b9b      	ldrb	r3, [r3, #14]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d003      	beq.n	800a24a <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 800a242:	f06f 0305 	mvn.w	r3, #5
}
 800a246:	4618      	mov	r0, r3
 800a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a24a:	6824      	ldr	r4, [r4, #0]
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f3      	bne.n	800a23a <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800a252:	6863      	ldr	r3, [r4, #4]
 800a254:	7b9b      	ldrb	r3, [r3, #14]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d1f3      	bne.n	800a242 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800a25a:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800a25c:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800a25e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800a260:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 800a264:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800a266:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a268:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800a26a:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a26e:	6858      	ldr	r0, [r3, #4]
 800a270:	f7fb fe42 	bl	8005ef8 <lwip_htonl>
 800a274:	68e3      	ldr	r3, [r4, #12]
 800a276:	4606      	mov	r6, r0
 800a278:	8924      	ldrh	r4, [r4, #8]
 800a27a:	8998      	ldrh	r0, [r3, #12]
 800a27c:	f7fb fe38 	bl	8005ef0 <lwip_htons>
 800a280:	f010 0003 	ands.w	r0, r0, #3
 800a284:	4426      	add	r6, r4
  return ERR_OK;
 800a286:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a288:	bf18      	it	ne
 800a28a:	2001      	movne	r0, #1
  pcb->rttest = 0;
 800a28c:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a28e:	4430      	add	r0, r6
 800a290:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 800a292:	4618      	mov	r0, r3
 800a294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a296:	4b04      	ldr	r3, [pc, #16]	; (800a2a8 <tcp_rexmit_rto_prepare+0x80>)
 800a298:	f240 6263 	movw	r2, #1635	; 0x663
 800a29c:	4903      	ldr	r1, [pc, #12]	; (800a2ac <tcp_rexmit_rto_prepare+0x84>)
 800a29e:	4804      	ldr	r0, [pc, #16]	; (800a2b0 <tcp_rexmit_rto_prepare+0x88>)
 800a2a0:	f002 fda8 	bl	800cdf4 <iprintf>
 800a2a4:	e7c4      	b.n	800a230 <tcp_rexmit_rto_prepare+0x8>
 800a2a6:	bf00      	nop
 800a2a8:	0800efb0 	.word	0x0800efb0
 800a2ac:	0800f29c 	.word	0x0800f29c
 800a2b0:	0800dd68 	.word	0x0800dd68

0800a2b4 <tcp_rexmit>:
{
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a2b6:	4607      	mov	r7, r0
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d031      	beq.n	800a320 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800a2bc:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800a2be:	b34e      	cbz	r6, 800a314 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800a2c0:	6873      	ldr	r3, [r6, #4]
 800a2c2:	7b9b      	ldrb	r3, [r3, #14]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d125      	bne.n	800a314 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800a2c8:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800a2ca:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800a2ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 800a2d0:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 800a2d2:	b91b      	cbnz	r3, 800a2dc <tcp_rexmit+0x28>
 800a2d4:	e00f      	b.n	800a2f6 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800a2d6:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b163      	cbz	r3, 800a2f6 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	6858      	ldr	r0, [r3, #4]
 800a2e0:	f7fb fe0a 	bl	8005ef8 <lwip_htonl>
 800a2e4:	68f3      	ldr	r3, [r6, #12]
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	6858      	ldr	r0, [r3, #4]
 800a2ea:	f7fb fe05 	bl	8005ef8 <lwip_htonl>
 800a2ee:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800a2f0:	2c00      	cmp	r4, #0
 800a2f2:	dbf0      	blt.n	800a2d6 <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800a2f4:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800a2f6:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800a2f8:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800a2fa:	6833      	ldr	r3, [r6, #0]
 800a2fc:	b16b      	cbz	r3, 800a31a <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800a2fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a302:	2bff      	cmp	r3, #255	; 0xff
 800a304:	d002      	beq.n	800a30c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800a306:	3301      	adds	r3, #1
 800a308:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800a30c:	2300      	movs	r3, #0
  return ERR_OK;
 800a30e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800a310:	637b      	str	r3, [r7, #52]	; 0x34
}
 800a312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800a314:	f06f 0005 	mvn.w	r0, #5
}
 800a318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800a31a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800a31e:	e7ee      	b.n	800a2fe <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a320:	4b03      	ldr	r3, [pc, #12]	; (800a330 <tcp_rexmit+0x7c>)
 800a322:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a326:	4903      	ldr	r1, [pc, #12]	; (800a334 <tcp_rexmit+0x80>)
 800a328:	4803      	ldr	r0, [pc, #12]	; (800a338 <tcp_rexmit+0x84>)
 800a32a:	f002 fd63 	bl	800cdf4 <iprintf>
 800a32e:	e7c5      	b.n	800a2bc <tcp_rexmit+0x8>
 800a330:	0800efb0 	.word	0x0800efb0
 800a334:	0800f2c0 	.word	0x0800f2c0
 800a338:	0800dd68 	.word	0x0800dd68

0800a33c <tcp_rexmit_fast>:
{
 800a33c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a33e:	4604      	mov	r4, r0
 800a340:	b340      	cbz	r0, 800a394 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a342:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a344:	b113      	cbz	r3, 800a34c <tcp_rexmit_fast+0x10>
 800a346:	8b63      	ldrh	r3, [r4, #26]
 800a348:	075b      	lsls	r3, r3, #29
 800a34a:	d500      	bpl.n	800a34e <tcp_rexmit_fast+0x12>
}
 800a34c:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a34e:	4620      	mov	r0, r4
 800a350:	f7ff ffb0 	bl	800a2b4 <tcp_rexmit>
 800a354:	2800      	cmp	r0, #0
 800a356:	d1f9      	bne.n	800a34c <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a358:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800a35c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a360:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a362:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a364:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a368:	bf28      	it	cs
 800a36a:	4619      	movcs	r1, r3
 800a36c:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a36e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a372:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a376:	d902      	bls.n	800a37e <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800a378:	b283      	uxth	r3, r0
 800a37a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800a37e:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a380:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800a382:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a386:	4413      	add	r3, r2
      pcb->rtime = 0;
 800a388:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a38a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a38e:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800a390:	8622      	strh	r2, [r4, #48]	; 0x30
}
 800a392:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a394:	4b03      	ldr	r3, [pc, #12]	; (800a3a4 <tcp_rexmit_fast+0x68>)
 800a396:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a39a:	4903      	ldr	r1, [pc, #12]	; (800a3a8 <tcp_rexmit_fast+0x6c>)
 800a39c:	4803      	ldr	r0, [pc, #12]	; (800a3ac <tcp_rexmit_fast+0x70>)
 800a39e:	f002 fd29 	bl	800cdf4 <iprintf>
 800a3a2:	e7ce      	b.n	800a342 <tcp_rexmit_fast+0x6>
 800a3a4:	0800efb0 	.word	0x0800efb0
 800a3a8:	0800f2d8 	.word	0x0800f2d8
 800a3ac:	0800dd68 	.word	0x0800dd68

0800a3b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	460e      	mov	r6, r1
 800a3ba:	4615      	mov	r5, r2
 800a3bc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a3c0:	461c      	mov	r4, r3
{
 800a3c2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800a3c6:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a3ca:	b1fb      	cbz	r3, 800a40c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a3cc:	f1b8 0f00 	cmp.w	r8, #0
 800a3d0:	d026      	beq.n	800a420 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7fb fd90 	bl	8005ef8 <lwip_htonl>
 800a3d8:	2114      	movs	r1, #20
 800a3da:	4602      	mov	r2, r0
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f24d 0516 	movw	r5, #53270	; 0xd016
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	f8cd a000 	str.w	sl, [sp]
 800a3e8:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	f7ff fcb7 	bl	8009d60 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	b138      	cbz	r0, 800a406 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a3f6:	4643      	mov	r3, r8
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a3fc:	b004      	add	sp, #16
 800a3fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a402:	f7ff bd1b 	b.w	8009e3c <tcp_output_control_segment>
}
 800a406:	b004      	add	sp, #16
 800a408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a40c:	4b08      	ldr	r3, [pc, #32]	; (800a430 <tcp_rst+0x80>)
 800a40e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a412:	4908      	ldr	r1, [pc, #32]	; (800a434 <tcp_rst+0x84>)
 800a414:	4808      	ldr	r0, [pc, #32]	; (800a438 <tcp_rst+0x88>)
 800a416:	f002 fced 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a41a:	f1b8 0f00 	cmp.w	r8, #0
 800a41e:	d1d8      	bne.n	800a3d2 <tcp_rst+0x22>
 800a420:	4b03      	ldr	r3, [pc, #12]	; (800a430 <tcp_rst+0x80>)
 800a422:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a426:	4905      	ldr	r1, [pc, #20]	; (800a43c <tcp_rst+0x8c>)
 800a428:	4803      	ldr	r0, [pc, #12]	; (800a438 <tcp_rst+0x88>)
 800a42a:	f002 fce3 	bl	800cdf4 <iprintf>
 800a42e:	e7d0      	b.n	800a3d2 <tcp_rst+0x22>
 800a430:	0800efb0 	.word	0x0800efb0
 800a434:	0800f2f8 	.word	0x0800f2f8
 800a438:	0800dd68 	.word	0x0800dd68
 800a43c:	0800f314 	.word	0x0800f314

0800a440 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a440:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a442:	4604      	mov	r4, r0
 800a444:	b1c8      	cbz	r0, 800a47a <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a446:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a448:	f7fb fd56 	bl	8005ef8 <lwip_htonl>
 800a44c:	2100      	movs	r1, #0
 800a44e:	4602      	mov	r2, r0
 800a450:	4620      	mov	r0, r4
 800a452:	f7ff fccb 	bl	8009dec <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a456:	4601      	mov	r1, r0
 800a458:	b1b8      	cbz	r0, 800a48a <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a45a:	1d23      	adds	r3, r4, #4
 800a45c:	4622      	mov	r2, r4
 800a45e:	4620      	mov	r0, r4
 800a460:	f7ff fcec 	bl	8009e3c <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a464:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800a466:	b920      	cbnz	r0, 800a472 <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a46e:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800a470:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a472:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a476:	8363      	strh	r3, [r4, #26]
}
 800a478:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a47a:	4b07      	ldr	r3, [pc, #28]	; (800a498 <tcp_send_empty_ack+0x58>)
 800a47c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a480:	4906      	ldr	r1, [pc, #24]	; (800a49c <tcp_send_empty_ack+0x5c>)
 800a482:	4807      	ldr	r0, [pc, #28]	; (800a4a0 <tcp_send_empty_ack+0x60>)
 800a484:	f002 fcb6 	bl	800cdf4 <iprintf>
 800a488:	e7dd      	b.n	800a446 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a48a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800a48c:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a490:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800a494:	e7eb      	b.n	800a46e <tcp_send_empty_ack+0x2e>
 800a496:	bf00      	nop
 800a498:	0800efb0 	.word	0x0800efb0
 800a49c:	0800f330 	.word	0x0800f330
 800a4a0:	0800dd68 	.word	0x0800dd68

0800a4a4 <tcp_output>:
{
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800a4ac:	f7f8 ffec 	bl	8003488 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a4b0:	2c00      	cmp	r4, #0
 800a4b2:	f000 81b2 	beq.w	800a81a <tcp_output+0x376>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a4b6:	7d23      	ldrb	r3, [r4, #20]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	f000 8169 	beq.w	800a790 <tcp_output+0x2ec>
  if (tcp_input_pcb == pcb) {
 800a4be:	4bae      	ldr	r3, [pc, #696]	; (800a778 <tcp_output+0x2d4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	42a3      	cmp	r3, r4
 800a4c4:	f000 8170 	beq.w	800a7a8 <tcp_output+0x304>
  seg = pcb->unsent;
 800a4c8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a4ca:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
 800a4ce:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
  if (seg == NULL) {
 800a4d2:	b325      	cbz	r5, 800a51e <tcp_output+0x7a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a4d4:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a4d6:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	f040 81a5 	bne.w	800a82a <tcp_output+0x386>
    return ip_route(src, dst);
 800a4e0:	4648      	mov	r0, r9
 800a4e2:	f001 fc4f 	bl	800bd84 <ip4_route>
 800a4e6:	4680      	mov	r8, r0
  if (netif == NULL) {
 800a4e8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ec:	f000 81af 	beq.w	800a84e <tcp_output+0x3aa>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	b913      	cbnz	r3, 800a4fa <tcp_output+0x56>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a4f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4f8:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a4fa:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a4fc:	42be      	cmp	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a4fe:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a500:	bf28      	it	cs
 800a502:	463e      	movcs	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a504:	f7fb fcf8 	bl	8005ef8 <lwip_htonl>
 800a508:	892b      	ldrh	r3, [r5, #8]
 800a50a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a50c:	1a9b      	subs	r3, r3, r2
 800a50e:	4418      	add	r0, r3
 800a510:	42b0      	cmp	r0, r6
 800a512:	d90f      	bls.n	800a534 <tcp_output+0x90>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a514:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a518:	42b3      	cmp	r3, r6
 800a51a:	f000 814f 	beq.w	800a7bc <tcp_output+0x318>
    if (pcb->flags & TF_ACK_NOW) {
 800a51e:	8b62      	ldrh	r2, [r4, #26]
 800a520:	0791      	lsls	r1, r2, #30
 800a522:	f100 8145 	bmi.w	800a7b0 <tcp_output+0x30c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 800a52a:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a52c:	8362      	strh	r2, [r4, #26]
}
 800a52e:	b005      	add	sp, #20
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 800a53a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 814d 	beq.w	800a7dc <tcp_output+0x338>
    for (; useg->next != NULL; useg = useg->next);
 800a542:	461f      	mov	r7, r3
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 80af 	beq.w	800a6aa <tcp_output+0x206>
 800a54c:	461f      	mov	r7, r3
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f6      	bne.n	800a542 <tcp_output+0x9e>
 800a554:	e0a9      	b.n	800a6aa <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a556:	68eb      	ldr	r3, [r5, #12]
 800a558:	2010      	movs	r0, #16
 800a55a:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800a55e:	f7fb fcc7 	bl	8005ef0 <lwip_htons>
 800a562:	ea4a 0000 	orr.w	r0, sl, r0
 800a566:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a56a:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800a56e:	686b      	ldr	r3, [r5, #4]
 800a570:	7b9b      	ldrb	r3, [r3, #14]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d154      	bne.n	800a620 <tcp_output+0x17c>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a576:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a578:	f7fb fcbe 	bl	8005ef8 <lwip_htonl>
 800a57c:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a580:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800a582:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a586:	f7fb fcb3 	bl	8005ef0 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a58a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a58e:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a592:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a594:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a598:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a59a:	7aab      	ldrb	r3, [r5, #10]
 800a59c:	07db      	lsls	r3, r3, #31
 800a59e:	f100 80c2 	bmi.w	800a726 <tcp_output+0x282>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a5a2:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800a5a6:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	da01      	bge.n	800a5b2 <tcp_output+0x10e>
    pcb->rtime = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800a5b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 80ab 	beq.w	800a710 <tcp_output+0x26c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a5ba:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800a5bc:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a5be:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800a5c0:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a5c2:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800a5c6:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a5ca:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800a5cc:	1ac9      	subs	r1, r1, r3
 800a5ce:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800a5d0:	8901      	ldrh	r1, [r0, #8]
 800a5d2:	1acb      	subs	r3, r1, r3
 800a5d4:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800a5d6:	f88a 2010 	strb.w	r2, [sl, #16]
 800a5da:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a5de:	7aab      	ldrb	r3, [r5, #10]
 800a5e0:	f013 0f01 	tst.w	r3, #1
 800a5e4:	bf14      	ite	ne
 800a5e6:	2318      	movne	r3, #24
 800a5e8:	2314      	moveq	r3, #20
 800a5ea:	449a      	add	sl, r3
 800a5ec:	45d3      	cmp	fp, sl
 800a5ee:	d007      	beq.n	800a600 <tcp_output+0x15c>
 800a5f0:	4b62      	ldr	r3, [pc, #392]	; (800a77c <tcp_output+0x2d8>)
 800a5f2:	f240 621c 	movw	r2, #1564	; 0x61c
 800a5f6:	4962      	ldr	r1, [pc, #392]	; (800a780 <tcp_output+0x2dc>)
 800a5f8:	4862      	ldr	r0, [pc, #392]	; (800a784 <tcp_output+0x2e0>)
 800a5fa:	f002 fbfb 	bl	800cdf4 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a5fe:	6868      	ldr	r0, [r5, #4]
 800a600:	f8cd 8008 	str.w	r8, [sp, #8]
 800a604:	464a      	mov	r2, r9
 800a606:	7aa3      	ldrb	r3, [r4, #10]
 800a608:	4621      	mov	r1, r4
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	2306      	movs	r3, #6
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	7ae3      	ldrb	r3, [r4, #11]
 800a612:	f001 fd4d 	bl	800c0b0 <ip4_output_if>
    if (err != ERR_OK) {
 800a616:	2800      	cmp	r0, #0
 800a618:	f040 8114 	bne.w	800a844 <tcp_output+0x3a0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a61c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a624:	7d23      	ldrb	r3, [r4, #20]
 800a626:	2b02      	cmp	r3, #2
 800a628:	d003      	beq.n	800a632 <tcp_output+0x18e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a62a:	8b63      	ldrh	r3, [r4, #26]
 800a62c:	f023 0303 	bic.w	r3, r3, #3
 800a630:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a632:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a636:	f7fb fc5f 	bl	8005ef8 <lwip_htonl>
 800a63a:	68eb      	ldr	r3, [r5, #12]
 800a63c:	4682      	mov	sl, r0
 800a63e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800a642:	8998      	ldrh	r0, [r3, #12]
 800a644:	f7fb fc54 	bl	8005ef0 <lwip_htons>
 800a648:	f010 0303 	ands.w	r3, r0, #3
 800a64c:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a64e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a650:	bf18      	it	ne
 800a652:	2301      	movne	r3, #1
 800a654:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800a656:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a65a:	1ad2      	subs	r2, r2, r3
 800a65c:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800a65e:	bfb8      	it	lt
 800a660:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800a662:	68eb      	ldr	r3, [r5, #12]
 800a664:	8998      	ldrh	r0, [r3, #12]
 800a666:	f7fb fc43 	bl	8005ef0 <lwip_htons>
 800a66a:	f010 0003 	ands.w	r0, r0, #3
 800a66e:	bf18      	it	ne
 800a670:	2001      	movne	r0, #1
 800a672:	eb10 0f0a 	cmn.w	r0, sl
 800a676:	d044      	beq.n	800a702 <tcp_output+0x25e>
      seg->next = NULL;
 800a678:	2300      	movs	r3, #0
 800a67a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800a67c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d043      	beq.n	800a70a <tcp_output+0x266>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a682:	68eb      	ldr	r3, [r5, #12]
 800a684:	6858      	ldr	r0, [r3, #4]
 800a686:	f7fb fc37 	bl	8005ef8 <lwip_htonl>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4682      	mov	sl, r0
 800a68e:	6858      	ldr	r0, [r3, #4]
 800a690:	f7fb fc32 	bl	8005ef8 <lwip_htonl>
 800a694:	ebaa 0000 	sub.w	r0, sl, r0
 800a698:	2800      	cmp	r0, #0
 800a69a:	f2c0 80a1 	blt.w	800a7e0 <tcp_output+0x33c>
          useg->next = seg;
 800a69e:	603d      	str	r5, [r7, #0]
 800a6a0:	462f      	mov	r7, r5
    seg = pcb->unsent;
 800a6a2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800a6a4:	2d00      	cmp	r5, #0
 800a6a6:	f000 80c4 	beq.w	800a832 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a6aa:	68eb      	ldr	r3, [r5, #12]
 800a6ac:	6858      	ldr	r0, [r3, #4]
 800a6ae:	f7fb fc23 	bl	8005ef8 <lwip_htonl>
 800a6b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a6b4:	1ac0      	subs	r0, r0, r3
 800a6b6:	892b      	ldrh	r3, [r5, #8]
 800a6b8:	4418      	add	r0, r3
  while (seg != NULL &&
 800a6ba:	42b0      	cmp	r0, r6
 800a6bc:	f200 80bb 	bhi.w	800a836 <tcp_output+0x392>
    LWIP_ASSERT("RST not expected here!",
 800a6c0:	68eb      	ldr	r3, [r5, #12]
 800a6c2:	8998      	ldrh	r0, [r3, #12]
 800a6c4:	f7fb fc14 	bl	8005ef0 <lwip_htons>
 800a6c8:	0742      	lsls	r2, r0, #29
 800a6ca:	d412      	bmi.n	800a6f2 <tcp_output+0x24e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a6cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a6ce:	b14b      	cbz	r3, 800a6e4 <tcp_output+0x240>
 800a6d0:	8b63      	ldrh	r3, [r4, #26]
 800a6d2:	f013 0f44 	tst.w	r3, #68	; 0x44
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	d104      	bne.n	800a6e4 <tcp_output+0x240>
 800a6da:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a6dc:	2900      	cmp	r1, #0
 800a6de:	d038      	beq.n	800a752 <tcp_output+0x2ae>
 800a6e0:	6808      	ldr	r0, [r1, #0]
 800a6e2:	b388      	cbz	r0, 800a748 <tcp_output+0x2a4>
    if (pcb->state != SYN_SENT) {
 800a6e4:	7d23      	ldrb	r3, [r4, #20]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	f47f af35 	bne.w	800a556 <tcp_output+0xb2>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a6ec:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a6f0:	e73d      	b.n	800a56e <tcp_output+0xca>
    LWIP_ASSERT("RST not expected here!",
 800a6f2:	4b22      	ldr	r3, [pc, #136]	; (800a77c <tcp_output+0x2d8>)
 800a6f4:	f240 5236 	movw	r2, #1334	; 0x536
 800a6f8:	4923      	ldr	r1, [pc, #140]	; (800a788 <tcp_output+0x2e4>)
 800a6fa:	4822      	ldr	r0, [pc, #136]	; (800a784 <tcp_output+0x2e0>)
 800a6fc:	f002 fb7a 	bl	800cdf4 <iprintf>
 800a700:	e7e4      	b.n	800a6cc <tcp_output+0x228>
      tcp_seg_free(seg);
 800a702:	4628      	mov	r0, r5
 800a704:	f7fc ff2c 	bl	8007560 <tcp_seg_free>
 800a708:	e7cb      	b.n	800a6a2 <tcp_output+0x1fe>
        pcb->unacked = seg;
 800a70a:	462f      	mov	r7, r5
 800a70c:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 800a70e:	e7c8      	b.n	800a6a2 <tcp_output+0x1fe>
    pcb->rttest = tcp_ticks;
 800a710:	4b1e      	ldr	r3, [pc, #120]	; (800a78c <tcp_output+0x2e8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a716:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a71a:	f7fb fbed 	bl	8005ef8 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a71e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a722:	63a0      	str	r0, [r4, #56]	; 0x38
 800a724:	e749      	b.n	800a5ba <tcp_output+0x116>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a726:	464a      	mov	r2, r9
 800a728:	4641      	mov	r1, r8
 800a72a:	f240 50b4 	movw	r0, #1460	; 0x5b4
    opts += 1;
 800a72e:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a732:	f7fd fe35 	bl	80083a0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a736:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800a73a:	f7fb fbdd 	bl	8005ef8 <lwip_htonl>
 800a73e:	f8ca 0014 	str.w	r0, [sl, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a742:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a746:	e72e      	b.n	800a5a6 <tcp_output+0x102>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a748:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800a74c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800a74e:	4584      	cmp	ip, r0
 800a750:	d2c8      	bcs.n	800a6e4 <tcp_output+0x240>
 800a752:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 800a756:	2800      	cmp	r0, #0
 800a758:	d0c4      	beq.n	800a6e4 <tcp_output+0x240>
 800a75a:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 800a75e:	280f      	cmp	r0, #15
 800a760:	d8c0      	bhi.n	800a6e4 <tcp_output+0x240>
 800a762:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800a766:	d1bd      	bne.n	800a6e4 <tcp_output+0x240>
  if (pcb->unsent == NULL) {
 800a768:	2900      	cmp	r1, #0
 800a76a:	f47f aedc 	bne.w	800a526 <tcp_output+0x82>
    pcb->unsent_oversize = 0;
 800a76e:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a770:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 800a772:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 800a776:	e6d6      	b.n	800a526 <tcp_output+0x82>
 800a778:	24010588 	.word	0x24010588
 800a77c:	0800efb0 	.word	0x0800efb0
 800a780:	0800f3a8 	.word	0x0800f3a8
 800a784:	0800dd68 	.word	0x0800dd68
 800a788:	0800f390 	.word	0x0800f390
 800a78c:	24010554 	.word	0x24010554
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a790:	4b30      	ldr	r3, [pc, #192]	; (800a854 <tcp_output+0x3b0>)
 800a792:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a796:	4930      	ldr	r1, [pc, #192]	; (800a858 <tcp_output+0x3b4>)
 800a798:	4830      	ldr	r0, [pc, #192]	; (800a85c <tcp_output+0x3b8>)
 800a79a:	f002 fb2b 	bl	800cdf4 <iprintf>
  if (tcp_input_pcb == pcb) {
 800a79e:	4b30      	ldr	r3, [pc, #192]	; (800a860 <tcp_output+0x3bc>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	42a3      	cmp	r3, r4
 800a7a4:	f47f ae90 	bne.w	800a4c8 <tcp_output+0x24>
    return ERR_OK;
 800a7a8:	2000      	movs	r0, #0
}
 800a7aa:	b005      	add	sp, #20
 800a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800a7b0:	4620      	mov	r0, r4
}
 800a7b2:	b005      	add	sp, #20
 800a7b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800a7b8:	f7ff be42 	b.w	800a440 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a7bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f47f aead 	bne.w	800a51e <tcp_output+0x7a>
 800a7c4:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f47f aea8 	bne.w	800a51e <tcp_output+0x7a>
      pcb->persist_cnt = 0;
 800a7ce:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800a7d2:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 800a7d6:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 800a7da:	e6a0      	b.n	800a51e <tcp_output+0x7a>
  useg = pcb->unacked;
 800a7dc:	461f      	mov	r7, r3
 800a7de:	e764      	b.n	800a6aa <tcp_output+0x206>
          while (*cur_seg &&
 800a7e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a7e2:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 800a7e6:	b92b      	cbnz	r3, 800a7f4 <tcp_output+0x350>
 800a7e8:	e013      	b.n	800a812 <tcp_output+0x36e>
            cur_seg = &((*cur_seg)->next );
 800a7ea:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800a7ee:	f8db 3000 	ldr.w	r3, [fp]
 800a7f2:	b173      	cbz	r3, 800a812 <tcp_output+0x36e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	6858      	ldr	r0, [r3, #4]
 800a7f8:	f7fb fb7e 	bl	8005ef8 <lwip_htonl>
 800a7fc:	68eb      	ldr	r3, [r5, #12]
 800a7fe:	4682      	mov	sl, r0
 800a800:	6858      	ldr	r0, [r3, #4]
 800a802:	f7fb fb79 	bl	8005ef8 <lwip_htonl>
 800a806:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800a80a:	2800      	cmp	r0, #0
 800a80c:	dbed      	blt.n	800a7ea <tcp_output+0x346>
            cur_seg = &((*cur_seg)->next );
 800a80e:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800a812:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800a814:	f8cb 5000 	str.w	r5, [fp]
 800a818:	e743      	b.n	800a6a2 <tcp_output+0x1fe>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a81a:	4b0e      	ldr	r3, [pc, #56]	; (800a854 <tcp_output+0x3b0>)
 800a81c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a820:	4910      	ldr	r1, [pc, #64]	; (800a864 <tcp_output+0x3c0>)
 800a822:	480e      	ldr	r0, [pc, #56]	; (800a85c <tcp_output+0x3b8>)
 800a824:	f002 fae6 	bl	800cdf4 <iprintf>
 800a828:	e645      	b.n	800a4b6 <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800a82a:	f7fc f969 	bl	8006b00 <netif_get_by_index>
 800a82e:	4680      	mov	r8, r0
 800a830:	e65a      	b.n	800a4e8 <tcp_output+0x44>
 800a832:	8b63      	ldrh	r3, [r4, #26]
 800a834:	e79b      	b.n	800a76e <tcp_output+0x2ca>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a836:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 800a838:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a83a:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 800a83c:	2900      	cmp	r1, #0
 800a83e:	f47f ae72 	bne.w	800a526 <tcp_output+0x82>
 800a842:	e794      	b.n	800a76e <tcp_output+0x2ca>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a844:	8b63      	ldrh	r3, [r4, #26]
 800a846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a84a:	8363      	strh	r3, [r4, #26]
      return err;
 800a84c:	e66f      	b.n	800a52e <tcp_output+0x8a>
    return ERR_RTE;
 800a84e:	f06f 0003 	mvn.w	r0, #3
 800a852:	e66c      	b.n	800a52e <tcp_output+0x8a>
 800a854:	0800efb0 	.word	0x0800efb0
 800a858:	0800f368 	.word	0x0800f368
 800a85c:	0800dd68 	.word	0x0800dd68
 800a860:	24010588 	.word	0x24010588
 800a864:	0800f350 	.word	0x0800f350

0800a868 <tcp_rexmit_rto_commit>:
{
 800a868:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a86a:	4604      	mov	r4, r0
 800a86c:	b158      	cbz	r0, 800a886 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800a86e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a872:	2bff      	cmp	r3, #255	; 0xff
 800a874:	d002      	beq.n	800a87c <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800a876:	3301      	adds	r3, #1
 800a878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800a87c:	4620      	mov	r0, r4
}
 800a87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800a882:	f7ff be0f 	b.w	800a4a4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a886:	4b04      	ldr	r3, [pc, #16]	; (800a898 <tcp_rexmit_rto_commit+0x30>)
 800a888:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a88c:	4903      	ldr	r1, [pc, #12]	; (800a89c <tcp_rexmit_rto_commit+0x34>)
 800a88e:	4804      	ldr	r0, [pc, #16]	; (800a8a0 <tcp_rexmit_rto_commit+0x38>)
 800a890:	f002 fab0 	bl	800cdf4 <iprintf>
 800a894:	e7eb      	b.n	800a86e <tcp_rexmit_rto_commit+0x6>
 800a896:	bf00      	nop
 800a898:	0800efb0 	.word	0x0800efb0
 800a89c:	0800f3bc 	.word	0x0800f3bc
 800a8a0:	0800dd68 	.word	0x0800dd68

0800a8a4 <tcp_rexmit_rto>:
{
 800a8a4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	b118      	cbz	r0, 800a8b2 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a8aa:	f7ff fcbd 	bl	800a228 <tcp_rexmit_rto_prepare>
 800a8ae:	b198      	cbz	r0, 800a8d8 <tcp_rexmit_rto+0x34>
}
 800a8b0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <tcp_rexmit_rto+0x4c>)
 800a8b4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a8b8:	490e      	ldr	r1, [pc, #56]	; (800a8f4 <tcp_rexmit_rto+0x50>)
 800a8ba:	480f      	ldr	r0, [pc, #60]	; (800a8f8 <tcp_rexmit_rto+0x54>)
 800a8bc:	f002 fa9a 	bl	800cdf4 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f7ff fcb1 	bl	800a228 <tcp_rexmit_rto_prepare>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d1f2      	bne.n	800a8b0 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <tcp_rexmit_rto+0x4c>)
 800a8cc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a8d0:	490a      	ldr	r1, [pc, #40]	; (800a8fc <tcp_rexmit_rto+0x58>)
 800a8d2:	4809      	ldr	r0, [pc, #36]	; (800a8f8 <tcp_rexmit_rto+0x54>)
 800a8d4:	f002 fa8e 	bl	800cdf4 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800a8d8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a8dc:	2bff      	cmp	r3, #255	; 0xff
 800a8de:	d002      	beq.n	800a8e6 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800a8e6:	4620      	mov	r0, r4
}
 800a8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800a8ec:	f7ff bdda 	b.w	800a4a4 <tcp_output>
 800a8f0:	0800efb0 	.word	0x0800efb0
 800a8f4:	0800f3e0 	.word	0x0800f3e0
 800a8f8:	0800dd68 	.word	0x0800dd68
 800a8fc:	0800f3bc 	.word	0x0800f3bc

0800a900 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a900:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a902:	4604      	mov	r4, r0
 800a904:	b188      	cbz	r0, 800a92a <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a906:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a908:	3801      	subs	r0, #1
 800a90a:	f7fb faf5 	bl	8005ef8 <lwip_htonl>
 800a90e:	2100      	movs	r1, #0
 800a910:	4602      	mov	r2, r0
 800a912:	4620      	mov	r0, r4
 800a914:	f7ff fa6a 	bl	8009dec <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a918:	4601      	mov	r1, r0
 800a91a:	b170      	cbz	r0, 800a93a <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a91c:	1d23      	adds	r3, r4, #4
 800a91e:	4622      	mov	r2, r4
 800a920:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a926:	f7ff ba89 	b.w	8009e3c <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a92a:	4b05      	ldr	r3, [pc, #20]	; (800a940 <tcp_keepalive+0x40>)
 800a92c:	f640 0224 	movw	r2, #2084	; 0x824
 800a930:	4904      	ldr	r1, [pc, #16]	; (800a944 <tcp_keepalive+0x44>)
 800a932:	4805      	ldr	r0, [pc, #20]	; (800a948 <tcp_keepalive+0x48>)
 800a934:	f002 fa5e 	bl	800cdf4 <iprintf>
 800a938:	e7e5      	b.n	800a906 <tcp_keepalive+0x6>
}
 800a93a:	f04f 30ff 	mov.w	r0, #4294967295
 800a93e:	bd10      	pop	{r4, pc}
 800a940:	0800efb0 	.word	0x0800efb0
 800a944:	0800f3fc 	.word	0x0800f3fc
 800a948:	0800dd68 	.word	0x0800dd68

0800a94c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a950:	4604      	mov	r4, r0
 800a952:	2800      	cmp	r0, #0
 800a954:	d051      	beq.n	800a9fa <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a956:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800a958:	2d00      	cmp	r5, #0
 800a95a:	d04b      	beq.n	800a9f4 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a95c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a960:	2bff      	cmp	r3, #255	; 0xff
 800a962:	d002      	beq.n	800a96a <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800a964:	3301      	adds	r3, #1
 800a966:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a96a:	68eb      	ldr	r3, [r5, #12]
 800a96c:	8998      	ldrh	r0, [r3, #12]
 800a96e:	f7fb fabf 	bl	8005ef0 <lwip_htons>
 800a972:	07c3      	lsls	r3, r0, #31
 800a974:	d527      	bpl.n	800a9c6 <tcp_zero_window_probe+0x7a>
 800a976:	8929      	ldrh	r1, [r5, #8]
 800a978:	bb29      	cbnz	r1, 800a9c6 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a97a:	68eb      	ldr	r3, [r5, #12]
 800a97c:	4620      	mov	r0, r4
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	f7ff fa34 	bl	8009dec <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a984:	4606      	mov	r6, r0
 800a986:	b388      	cbz	r0, 800a9ec <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a988:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a98c:	2011      	movs	r0, #17
 800a98e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800a992:	f7fb faad 	bl	8005ef0 <lwip_htons>
 800a996:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800a99a:	4338      	orrs	r0, r7
 800a99c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a9a0:	68eb      	ldr	r3, [r5, #12]
 800a9a2:	6858      	ldr	r0, [r3, #4]
 800a9a4:	f7fb faa8 	bl	8005ef8 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a9a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a9aa:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a9b0:	1a1b      	subs	r3, r3, r0
 800a9b2:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a9b4:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800a9b8:	bfb8      	it	lt
 800a9ba:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a9bc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a9c2:	f7ff ba3b 	b.w	8009e3c <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a9c6:	68eb      	ldr	r3, [r5, #12]
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	f7ff fa0d 	bl	8009dec <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	b150      	cbz	r0, 800a9ec <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a9d6:	6868      	ldr	r0, [r5, #4]
 800a9d8:	892a      	ldrh	r2, [r5, #8]
 800a9da:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 800a9dc:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a9de:	1a9b      	subs	r3, r3, r2
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	3114      	adds	r1, #20
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	f7fc fc53 	bl	8007290 <pbuf_copy_partial>
 800a9ea:	e7d9      	b.n	800a9a0 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800a9f4:	4628      	mov	r0, r5
}
 800a9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a9fa:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <tcp_zero_window_probe+0xc0>)
 800a9fc:	f640 024f 	movw	r2, #2127	; 0x84f
 800aa00:	4903      	ldr	r1, [pc, #12]	; (800aa10 <tcp_zero_window_probe+0xc4>)
 800aa02:	4804      	ldr	r0, [pc, #16]	; (800aa14 <tcp_zero_window_probe+0xc8>)
 800aa04:	f002 f9f6 	bl	800cdf4 <iprintf>
 800aa08:	e7a5      	b.n	800a956 <tcp_zero_window_probe+0xa>
 800aa0a:	bf00      	nop
 800aa0c:	0800efb0 	.word	0x0800efb0
 800aa10:	0800f418 	.word	0x0800f418
 800aa14:	0800dd68 	.word	0x0800dd68

0800aa18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aa1c:	200a      	movs	r0, #10
{
 800aa1e:	460e      	mov	r6, r1
 800aa20:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aa22:	f7fb fe13 	bl	800664c <memp_malloc>
  if (timeout == NULL) {
 800aa26:	b190      	cbz	r0, 800aa4e <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800aa28:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800aa2a:	490d      	ldr	r1, [pc, #52]	; (800aa60 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800aa2c:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800aa2e:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800aa30:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800aa34:	680b      	ldr	r3, [r1, #0]
 800aa36:	b91b      	cbnz	r3, 800aa40 <sys_timeout_abs+0x28>
 800aa38:	e007      	b.n	800aa4a <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	b11b      	cbz	r3, 800aa48 <sys_timeout_abs+0x30>
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	1aa2      	subs	r2, r4, r2
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	daf8      	bge.n	800aa3a <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800aa48:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800aa4a:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800aa4c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800aa4e:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <sys_timeout_abs+0x4c>)
 800aa50:	22be      	movs	r2, #190	; 0xbe
 800aa52:	4905      	ldr	r1, [pc, #20]	; (800aa68 <sys_timeout_abs+0x50>)
 800aa54:	4805      	ldr	r0, [pc, #20]	; (800aa6c <sys_timeout_abs+0x54>)
}
 800aa56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800aa5a:	f002 b9cb 	b.w	800cdf4 <iprintf>
 800aa5e:	bf00      	nop
 800aa60:	240105a4 	.word	0x240105a4
 800aa64:	0800f43c 	.word	0x0800f43c
 800aa68:	0800f470 	.word	0x0800f470
 800aa6c:	0800dd68 	.word	0x0800dd68

0800aa70 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800aa70:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800aa72:	6843      	ldr	r3, [r0, #4]
{
 800aa74:	4604      	mov	r4, r0
  cyclic->handler();
 800aa76:	4798      	blx	r3

  now = sys_now();
 800aa78:	f7f8 fb82 	bl	8003180 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800aa7c:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <lwip_cyclic_timer+0x34>)
 800aa7e:	6825      	ldr	r5, [r4, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800aa82:	4909      	ldr	r1, [pc, #36]	; (800aaa8 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800aa84:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800aa86:	1a1a      	subs	r2, r3, r0
 800aa88:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800aa8a:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800aa8c:	da04      	bge.n	800aa98 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800aa8e:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800aa90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800aa94:	f7ff bfc0 	b.w	800aa18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800aa98:	4618      	mov	r0, r3
}
 800aa9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800aa9e:	f7ff bfbb 	b.w	800aa18 <sys_timeout_abs>
 800aaa2:	bf00      	nop
 800aaa4:	240105a0 	.word	0x240105a0
 800aaa8:	0800aa71 	.word	0x0800aa71

0800aaac <tcpip_tcp_timer>:
{
 800aaac:	b508      	push	{r3, lr}
  tcp_tmr();
 800aaae:	f7fd fc49 	bl	8008344 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800aab2:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <tcpip_tcp_timer+0x30>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	b153      	cbz	r3, 800aace <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800aab8:	f7f8 fce6 	bl	8003488 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800aabc:	f7f8 fb60 	bl	8003180 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800aac0:	2200      	movs	r2, #0
 800aac2:	4907      	ldr	r1, [pc, #28]	; (800aae0 <tcpip_tcp_timer+0x34>)
 800aac4:	30fa      	adds	r0, #250	; 0xfa
}
 800aac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800aaca:	f7ff bfa5 	b.w	800aa18 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800aace:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <tcpip_tcp_timer+0x38>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1f0      	bne.n	800aab8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800aad6:	4a04      	ldr	r2, [pc, #16]	; (800aae8 <tcpip_tcp_timer+0x3c>)
 800aad8:	6013      	str	r3, [r2, #0]
}
 800aada:	bd08      	pop	{r3, pc}
 800aadc:	24010544 	.word	0x24010544
 800aae0:	0800aaad 	.word	0x0800aaad
 800aae4:	2401055c 	.word	0x2401055c
 800aae8:	240105a8 	.word	0x240105a8

0800aaec <tcp_timer_needed>:
{
 800aaec:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800aaee:	f7f8 fccb 	bl	8003488 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <tcp_timer_needed+0x38>)
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	b99a      	cbnz	r2, 800ab20 <tcp_timer_needed+0x34>
 800aaf8:	4a0b      	ldr	r2, [pc, #44]	; (800ab28 <tcp_timer_needed+0x3c>)
 800aafa:	6812      	ldr	r2, [r2, #0]
 800aafc:	b162      	cbz	r2, 800ab18 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800aafe:	2201      	movs	r2, #1
 800ab00:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800ab02:	f7f8 fcc1 	bl	8003488 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ab06:	f7f8 fb3b 	bl	8003180 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4907      	ldr	r1, [pc, #28]	; (800ab2c <tcp_timer_needed+0x40>)
 800ab0e:	30fa      	adds	r0, #250	; 0xfa
}
 800ab10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ab14:	f7ff bf80 	b.w	800aa18 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ab18:	4a05      	ldr	r2, [pc, #20]	; (800ab30 <tcp_timer_needed+0x44>)
 800ab1a:	6812      	ldr	r2, [r2, #0]
 800ab1c:	2a00      	cmp	r2, #0
 800ab1e:	d1ee      	bne.n	800aafe <tcp_timer_needed+0x12>
}
 800ab20:	bd08      	pop	{r3, pc}
 800ab22:	bf00      	nop
 800ab24:	240105a8 	.word	0x240105a8
 800ab28:	24010544 	.word	0x24010544
 800ab2c:	0800aaad 	.word	0x0800aaad
 800ab30:	2401055c 	.word	0x2401055c

0800ab34 <sys_timeouts_init>:
{
 800ab34:	b510      	push	{r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ab36:	4c0c      	ldr	r4, [pc, #48]	; (800ab68 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800ab38:	f7f8 fca6 	bl	8003488 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ab3c:	f7f8 fb20 	bl	8003180 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ab40:	490a      	ldr	r1, [pc, #40]	; (800ab6c <sys_timeouts_init+0x38>)
 800ab42:	f104 0208 	add.w	r2, r4, #8
 800ab46:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800ab4a:	f7ff ff65 	bl	800aa18 <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800ab4e:	f7f8 fc9b 	bl	8003488 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ab52:	f7f8 fb15 	bl	8003180 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ab56:	f104 0210 	add.w	r2, r4, #16
 800ab5a:	4904      	ldr	r1, [pc, #16]	; (800ab6c <sys_timeouts_init+0x38>)
 800ab5c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
}
 800ab60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ab64:	f7ff bf58 	b.w	800aa18 <sys_timeout_abs>
 800ab68:	0800f4b0 	.word	0x0800f4b0
 800ab6c:	0800aa71 	.word	0x0800aa71

0800ab70 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ab70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800ab74:	f7f8 fc88 	bl	8003488 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ab78:	4c10      	ldr	r4, [pc, #64]	; (800abbc <sys_check_timeouts+0x4c>)
 800ab7a:	f7f8 fb01 	bl	8003180 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800ab7e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800abc0 <sys_check_timeouts+0x50>
  now = sys_now();
 800ab82:	4607      	mov	r7, r0
 800ab84:	e00f      	b.n	800aba6 <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	eba7 0c02 	sub.w	ip, r7, r2
 800ab8c:	f1bc 0f00 	cmp.w	ip, #0
 800ab90:	db0e      	blt.n	800abb0 <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 800ab92:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800ab94:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800ab96:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800ab9a:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800ab9e:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aba0:	f7fb fd9a 	bl	80066d8 <memp_free>
    if (handler != NULL) {
 800aba4:	b935      	cbnz	r5, 800abb4 <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 800aba6:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aba8:	200a      	movs	r0, #10
 800abaa:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1ea      	bne.n	800ab86 <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800abb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800abb4:	4648      	mov	r0, r9
 800abb6:	47a8      	blx	r5
 800abb8:	e7f5      	b.n	800aba6 <sys_check_timeouts+0x36>
 800abba:	bf00      	nop
 800abbc:	240105a4 	.word	0x240105a4
 800abc0:	240105a0 	.word	0x240105a0

0800abc4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800abc4:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800abc6:	4c08      	ldr	r4, [pc, #32]	; (800abe8 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800abc8:	f7f8 fc5e 	bl	8003488 <sys_check_core_locking>
  if (next_timeout == NULL) {
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	b13b      	cbz	r3, 800abe0 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800abd0:	f7f8 fad6 	bl	8003180 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
    return 0;
 800abd8:	1a18      	subs	r0, r3, r0
 800abda:	bf48      	it	mi
 800abdc:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800abde:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800abe0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	bf00      	nop
 800abe8:	240105a4 	.word	0x240105a4

0800abec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800abec:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800abee:	f002 f801 	bl	800cbf4 <rand>
 800abf2:	4b02      	ldr	r3, [pc, #8]	; (800abfc <udp_init+0x10>)
 800abf4:	4a02      	ldr	r2, [pc, #8]	; (800ac00 <udp_init+0x14>)
 800abf6:	4303      	orrs	r3, r0
 800abf8:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800abfa:	bd08      	pop	{r3, pc}
 800abfc:	ffffc000 	.word	0xffffc000
 800ac00:	2400002e 	.word	0x2400002e

0800ac04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	4680      	mov	r8, r0
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800ac0e:	f7f8 fc3b 	bl	8003488 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ac12:	f1b8 0f00 	cmp.w	r8, #0
 800ac16:	f000 80af 	beq.w	800ad78 <udp_input+0x174>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ac1a:	2f00      	cmp	r7, #0
 800ac1c:	f000 80b5 	beq.w	800ad8a <udp_input+0x186>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ac20:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800ac24:	2b07      	cmp	r3, #7
 800ac26:	f240 8091 	bls.w	800ad4c <udp_input+0x148>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ac2a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800ae00 <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 800ac2e:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ac32:	f8d9 1000 	ldr.w	r1, [r9]
 800ac36:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ac3a:	f001 fa4b 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
 800ac3e:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ac40:	8820      	ldrh	r0, [r4, #0]
 800ac42:	f7fb f955 	bl	8005ef0 <lwip_htons>
 800ac46:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800ac48:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800ac4a:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800ac4c:	f7fb f950 	bl	8005ef0 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac50:	4b63      	ldr	r3, [pc, #396]	; (800ade0 <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 800ac52:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac54:	681c      	ldr	r4, [r3, #0]
 800ac56:	2c00      	cmp	r4, #0
 800ac58:	d064      	beq.n	800ad24 <udp_input+0x120>
  uncon_pcb = NULL;
 800ac5a:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ac5e:	f8df c190 	ldr.w	ip, [pc, #400]	; 800adf0 <udp_input+0x1ec>
 800ac62:	4960      	ldr	r1, [pc, #384]	; (800ade4 <udp_input+0x1e0>)
  prev = NULL;
 800ac64:	465e      	mov	r6, fp
 800ac66:	e004      	b.n	800ac72 <udp_input+0x6e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac68:	68e2      	ldr	r2, [r4, #12]
 800ac6a:	4626      	mov	r6, r4
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	d056      	beq.n	800ad1e <udp_input+0x11a>
 800ac70:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ac72:	8a62      	ldrh	r2, [r4, #18]
 800ac74:	42aa      	cmp	r2, r5
 800ac76:	d1f7      	bne.n	800ac68 <udp_input+0x64>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ac78:	2f00      	cmp	r7, #0
 800ac7a:	d06d      	beq.n	800ad58 <udp_input+0x154>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac7c:	7a20      	ldrb	r0, [r4, #8]
 800ac7e:	b138      	cbz	r0, 800ac90 <udp_input+0x8c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac80:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ac84:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800ac88:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	4290      	cmp	r0, r2
 800ac8e:	d1eb      	bne.n	800ac68 <udp_input+0x64>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ac90:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800ac92:	f1ba 0f00 	cmp.w	sl, #0
 800ac96:	d038      	beq.n	800ad0a <udp_input+0x106>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ac98:	b13a      	cbz	r2, 800acaa <udp_input+0xa6>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ac9a:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	d003      	beq.n	800acaa <udp_input+0xa6>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800aca2:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	4218      	tst	r0, r3
 800aca8:	d1de      	bne.n	800ac68 <udp_input+0x64>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800acaa:	7c20      	ldrb	r0, [r4, #16]
 800acac:	0743      	lsls	r3, r0, #29
 800acae:	d409      	bmi.n	800acc4 <udp_input+0xc0>
        if (uncon_pcb == NULL) {
 800acb0:	f1bb 0f00 	cmp.w	fp, #0
 800acb4:	d059      	beq.n	800ad6a <udp_input+0x166>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800acb6:	f1ba 0f00 	cmp.w	sl, #0
 800acba:	d003      	beq.n	800acc4 <udp_input+0xc0>
 800acbc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800acc0:	3001      	adds	r0, #1
 800acc2:	d069      	beq.n	800ad98 <udp_input+0x194>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800acc4:	8aa2      	ldrh	r2, [r4, #20]
 800acc6:	9803      	ldr	r0, [sp, #12]
 800acc8:	4282      	cmp	r2, r0
 800acca:	d1cd      	bne.n	800ac68 <udp_input+0x64>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800accc:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800acce:	b11a      	cbz	r2, 800acd8 <udp_input+0xd4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800acd0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800acd4:	4282      	cmp	r2, r0
 800acd6:	d1c7      	bne.n	800ac68 <udp_input+0x64>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800acd8:	b12e      	cbz	r6, 800ace6 <udp_input+0xe2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800acda:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 800acdc:	4a40      	ldr	r2, [pc, #256]	; (800ade0 <udp_input+0x1dc>)
          prev->next = pcb->next;
 800acde:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800ace0:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800ace2:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800ace4:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ace6:	2108      	movs	r1, #8
 800ace8:	4640      	mov	r0, r8
 800acea:	f7fc f84f 	bl	8006d8c <pbuf_remove_header>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d15b      	bne.n	800adaa <udp_input+0x1a6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800acf2:	69a5      	ldr	r5, [r4, #24]
 800acf4:	b355      	cbz	r5, 800ad4c <udp_input+0x148>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800acf6:	9b03      	ldr	r3, [sp, #12]
 800acf8:	4642      	mov	r2, r8
 800acfa:	69e0      	ldr	r0, [r4, #28]
 800acfc:	4621      	mov	r1, r4
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	4b39      	ldr	r3, [pc, #228]	; (800ade8 <udp_input+0x1e4>)
 800ad02:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ad04:	b005      	add	sp, #20
 800ad06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ad0a:	2a00      	cmp	r2, #0
 800ad0c:	d0cd      	beq.n	800acaa <udp_input+0xa6>
 800ad0e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ad12:	4282      	cmp	r2, r0
 800ad14:	d0c9      	beq.n	800acaa <udp_input+0xa6>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad16:	68e2      	ldr	r2, [r4, #12]
 800ad18:	4626      	mov	r6, r4
 800ad1a:	2a00      	cmp	r2, #0
 800ad1c:	d1a8      	bne.n	800ac70 <udp_input+0x6c>
  if (pcb != NULL) {
 800ad1e:	f1bb 0f00 	cmp.w	fp, #0
 800ad22:	d15b      	bne.n	800addc <udp_input+0x1d8>
  if (for_us) {
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d10e      	bne.n	800ad4c <udp_input+0x148>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ad2e:	2108      	movs	r1, #8
 800ad30:	4640      	mov	r0, r8
 800ad32:	f7fc f82b 	bl	8006d8c <pbuf_remove_header>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d137      	bne.n	800adaa <udp_input+0x1a6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ad3a:	f1ba 0f00 	cmp.w	sl, #0
 800ad3e:	d105      	bne.n	800ad4c <udp_input+0x148>
 800ad40:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ad44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad48:	2be0      	cmp	r3, #224	; 0xe0
 800ad4a:	d13b      	bne.n	800adc4 <udp_input+0x1c0>
      pbuf_free(p);
 800ad4c:	4640      	mov	r0, r8
}
 800ad4e:	b005      	add	sp, #20
 800ad50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800ad54:	f7fc b886 	b.w	8006e64 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ad58:	4663      	mov	r3, ip
 800ad5a:	2288      	movs	r2, #136	; 0x88
 800ad5c:	4823      	ldr	r0, [pc, #140]	; (800adec <udp_input+0x1e8>)
 800ad5e:	f002 f849 	bl	800cdf4 <iprintf>
 800ad62:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800adf0 <udp_input+0x1ec>
 800ad66:	491f      	ldr	r1, [pc, #124]	; (800ade4 <udp_input+0x1e0>)
 800ad68:	e788      	b.n	800ac7c <udp_input+0x78>
      if ((pcb->remote_port == src) &&
 800ad6a:	8aa2      	ldrh	r2, [r4, #20]
 800ad6c:	46a3      	mov	fp, r4
 800ad6e:	9803      	ldr	r0, [sp, #12]
 800ad70:	4282      	cmp	r2, r0
 800ad72:	f47f af79 	bne.w	800ac68 <udp_input+0x64>
 800ad76:	e7a9      	b.n	800accc <udp_input+0xc8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ad78:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <udp_input+0x1ec>)
 800ad7a:	22cf      	movs	r2, #207	; 0xcf
 800ad7c:	491d      	ldr	r1, [pc, #116]	; (800adf4 <udp_input+0x1f0>)
 800ad7e:	481b      	ldr	r0, [pc, #108]	; (800adec <udp_input+0x1e8>)
 800ad80:	f002 f838 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	f47f af4b 	bne.w	800ac20 <udp_input+0x1c>
 800ad8a:	4b19      	ldr	r3, [pc, #100]	; (800adf0 <udp_input+0x1ec>)
 800ad8c:	22d0      	movs	r2, #208	; 0xd0
 800ad8e:	491a      	ldr	r1, [pc, #104]	; (800adf8 <udp_input+0x1f4>)
 800ad90:	4816      	ldr	r0, [pc, #88]	; (800adec <udp_input+0x1e8>)
 800ad92:	f002 f82f 	bl	800cdf4 <iprintf>
 800ad96:	e743      	b.n	800ac20 <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f8db 3000 	ldr.w	r3, [fp]
 800ad9e:	4283      	cmp	r3, r0
 800ada0:	d090      	beq.n	800acc4 <udp_input+0xc0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ada2:	4290      	cmp	r0, r2
 800ada4:	bf08      	it	eq
 800ada6:	46a3      	moveq	fp, r4
 800ada8:	e78c      	b.n	800acc4 <udp_input+0xc0>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800adaa:	4b11      	ldr	r3, [pc, #68]	; (800adf0 <udp_input+0x1ec>)
 800adac:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800adb0:	4912      	ldr	r1, [pc, #72]	; (800adfc <udp_input+0x1f8>)
 800adb2:	480e      	ldr	r0, [pc, #56]	; (800adec <udp_input+0x1e8>)
 800adb4:	f002 f81e 	bl	800cdf4 <iprintf>
      pbuf_free(p);
 800adb8:	4640      	mov	r0, r8
}
 800adba:	b005      	add	sp, #20
 800adbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800adc0:	f7fc b850 	b.w	8006e64 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800adc4:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800adc8:	4640      	mov	r0, r8
 800adca:	3108      	adds	r1, #8
 800adcc:	b209      	sxth	r1, r1
 800adce:	f7fc f811 	bl	8006df4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800add2:	2103      	movs	r1, #3
 800add4:	4640      	mov	r0, r8
 800add6:	f000 ffcd 	bl	800bd74 <icmp_dest_unreach>
 800adda:	e7b7      	b.n	800ad4c <udp_input+0x148>
 800addc:	465c      	mov	r4, fp
 800adde:	e782      	b.n	800ace6 <udp_input+0xe2>
 800ade0:	240105ac 	.word	0x240105ac
 800ade4:	0800f52c 	.word	0x0800f52c
 800ade8:	24009a94 	.word	0x24009a94
 800adec:	0800dd68 	.word	0x0800dd68
 800adf0:	0800f4c8 	.word	0x0800f4c8
 800adf4:	0800f4f8 	.word	0x0800f4f8
 800adf8:	0800f510 	.word	0x0800f510
 800adfc:	0800f554 	.word	0x0800f554
 800ae00:	24009a84 	.word	0x24009a84

0800ae04 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ae04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae08:	4688      	mov	r8, r1
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	4616      	mov	r6, r2
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 800ae0e:	f7f8 fb3b 	bl	8003488 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ae12:	f1b8 0f00 	cmp.w	r8, #0
 800ae16:	d03c      	beq.n	800ae92 <udp_bind+0x8e>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ae18:	2d00      	cmp	r5, #0
 800ae1a:	d064      	beq.n	800aee6 <udp_bind+0xe2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ae1c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 800af08 <udp_bind+0x104>
 800ae20:	f8dc 7000 	ldr.w	r7, [ip]
 800ae24:	b34f      	cbz	r7, 800ae7a <udp_bind+0x76>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ae26:	42bd      	cmp	r5, r7
 800ae28:	d036      	beq.n	800ae98 <udp_bind+0x94>
 800ae2a:	463c      	mov	r4, r7
 800ae2c:	e001      	b.n	800ae32 <udp_bind+0x2e>
 800ae2e:	42a5      	cmp	r5, r4
 800ae30:	d032      	beq.n	800ae98 <udp_bind+0x94>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ae32:	68e4      	ldr	r4, [r4, #12]
 800ae34:	2c00      	cmp	r4, #0
 800ae36:	d1fa      	bne.n	800ae2e <udp_bind+0x2a>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ae38:	b38e      	cbz	r6, 800ae9e <udp_bind+0x9a>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ae3a:	f8d8 1000 	ldr.w	r1, [r8]
 800ae3e:	463b      	mov	r3, r7
 800ae40:	e001      	b.n	800ae46 <udp_bind+0x42>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	b19b      	cbz	r3, 800ae6e <udp_bind+0x6a>
      if (pcb != ipcb) {
 800ae46:	429d      	cmp	r5, r3
 800ae48:	d0fb      	beq.n	800ae42 <udp_bind+0x3e>
          if ((ipcb->local_port == port) &&
 800ae4a:	8a5a      	ldrh	r2, [r3, #18]
 800ae4c:	42b2      	cmp	r2, r6
 800ae4e:	d1f8      	bne.n	800ae42 <udp_bind+0x3e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ae50:	681a      	ldr	r2, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 800ae52:	428a      	cmp	r2, r1
 800ae54:	bf18      	it	ne
 800ae56:	2a00      	cmpne	r2, #0
 800ae58:	d001      	beq.n	800ae5e <udp_bind+0x5a>
 800ae5a:	2900      	cmp	r1, #0
 800ae5c:	d1f1      	bne.n	800ae42 <udp_bind+0x3e>
      return ERR_USE;
 800ae5e:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800ae62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ae66:	f8d8 1000 	ldr.w	r1, [r8]
 800ae6a:	f8ae 6000 	strh.w	r6, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ae6e:	6029      	str	r1, [r5, #0]
  pcb->local_port = port;
 800ae70:	826e      	strh	r6, [r5, #18]
  if (rebind == 0) {
 800ae72:	b144      	cbz	r4, 800ae86 <udp_bind+0x82>
  return ERR_OK;
 800ae74:	2000      	movs	r0, #0
}
 800ae76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 800ae7a:	2e00      	cmp	r6, #0
 800ae7c:	d031      	beq.n	800aee2 <udp_bind+0xde>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ae7e:	f8d8 3000 	ldr.w	r3, [r8]
  pcb->local_port = port;
 800ae82:	826e      	strh	r6, [r5, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ae84:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800ae86:	2000      	movs	r0, #0
    pcb->next = udp_pcbs;
 800ae88:	60ef      	str	r7, [r5, #12]
    udp_pcbs = pcb;
 800ae8a:	f8cc 5000 	str.w	r5, [ip]
}
 800ae8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 800ae92:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800af0c <udp_bind+0x108>
 800ae96:	e7bf      	b.n	800ae18 <udp_bind+0x14>
      rebind = 1;
 800ae98:	2401      	movs	r4, #1
  if (port == 0) {
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	d1cd      	bne.n	800ae3a <udp_bind+0x36>
 800ae9e:	f8df e070 	ldr.w	lr, [pc, #112]	; 800af10 <udp_bind+0x10c>
  rebind = 0;
 800aea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800aea6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aeaa:	f8be 6000 	ldrh.w	r6, [lr]
 800aeae:	4286      	cmp	r6, r0
 800aeb0:	d014      	beq.n	800aedc <udp_bind+0xd8>
 800aeb2:	3601      	adds	r6, #1
 800aeb4:	b2b6      	uxth	r6, r6
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aeb6:	2f00      	cmp	r7, #0
 800aeb8:	d0d5      	beq.n	800ae66 <udp_bind+0x62>
 800aeba:	463b      	mov	r3, r7
 800aebc:	e002      	b.n	800aec4 <udp_bind+0xc0>
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d0d0      	beq.n	800ae66 <udp_bind+0x62>
    if (pcb->local_port == udp_port) {
 800aec4:	8a5a      	ldrh	r2, [r3, #18]
 800aec6:	42b2      	cmp	r2, r6
 800aec8:	d1f9      	bne.n	800aebe <udp_bind+0xba>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800aeca:	3901      	subs	r1, #1
 800aecc:	b289      	uxth	r1, r1
 800aece:	2900      	cmp	r1, #0
 800aed0:	d1ed      	bne.n	800aeae <udp_bind+0xaa>
      return ERR_USE;
 800aed2:	f06f 0007 	mvn.w	r0, #7
 800aed6:	f8ae 6000 	strh.w	r6, [lr]
 800aeda:	e7cc      	b.n	800ae76 <udp_bind+0x72>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800aedc:	f44f 4640 	mov.w	r6, #49152	; 0xc000
 800aee0:	e7e9      	b.n	800aeb6 <udp_bind+0xb2>
  rebind = 0;
 800aee2:	463c      	mov	r4, r7
 800aee4:	e7db      	b.n	800ae9e <udp_bind+0x9a>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800aee6:	4b05      	ldr	r3, [pc, #20]	; (800aefc <udp_bind+0xf8>)
 800aee8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800aeec:	4904      	ldr	r1, [pc, #16]	; (800af00 <udp_bind+0xfc>)
 800aeee:	4805      	ldr	r0, [pc, #20]	; (800af04 <udp_bind+0x100>)
 800aef0:	f001 ff80 	bl	800cdf4 <iprintf>
 800aef4:	f06f 000f 	mvn.w	r0, #15
 800aef8:	e7bd      	b.n	800ae76 <udp_bind+0x72>
 800aefa:	bf00      	nop
 800aefc:	0800f4c8 	.word	0x0800f4c8
 800af00:	0800f570 	.word	0x0800f570
 800af04:	0800dd68 	.word	0x0800dd68
 800af08:	240105ac 	.word	0x240105ac
 800af0c:	0800fa74 	.word	0x0800fa74
 800af10:	2400002e 	.word	0x2400002e

0800af14 <udp_sendto_if_src>:
{
 800af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af18:	4604      	mov	r4, r0
 800af1a:	b085      	sub	sp, #20
 800af1c:	460d      	mov	r5, r1
 800af1e:	4690      	mov	r8, r2
 800af20:	4699      	mov	r9, r3
 800af22:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ASSERT_CORE_LOCKED();
 800af26:	f7f8 faaf 	bl	8003488 <sys_check_core_locking>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800af2a:	2c00      	cmp	r4, #0
 800af2c:	f000 8087 	beq.w	800b03e <udp_sendto_if_src+0x12a>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800af30:	2d00      	cmp	r5, #0
 800af32:	d07a      	beq.n	800b02a <udp_sendto_if_src+0x116>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800af34:	f1b8 0f00 	cmp.w	r8, #0
 800af38:	d06d      	beq.n	800b016 <udp_sendto_if_src+0x102>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800af3a:	f1ba 0f00 	cmp.w	sl, #0
 800af3e:	d060      	beq.n	800b002 <udp_sendto_if_src+0xee>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800af40:	f1bb 0f00 	cmp.w	fp, #0
 800af44:	f000 8085 	beq.w	800b052 <udp_sendto_if_src+0x13e>
  if (pcb->local_port == 0) {
 800af48:	8a62      	ldrh	r2, [r4, #18]
 800af4a:	2a00      	cmp	r2, #0
 800af4c:	d034      	beq.n	800afb8 <udp_sendto_if_src+0xa4>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800af4e:	892a      	ldrh	r2, [r5, #8]
 800af50:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800af54:	429a      	cmp	r2, r3
 800af56:	d851      	bhi.n	800affc <udp_sendto_if_src+0xe8>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800af58:	2108      	movs	r1, #8
 800af5a:	4628      	mov	r0, r5
 800af5c:	f7fb fee2 	bl	8006d24 <pbuf_add_header>
 800af60:	2800      	cmp	r0, #0
 800af62:	d134      	bne.n	800afce <udp_sendto_if_src+0xba>
 800af64:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800af66:	8973      	ldrh	r3, [r6, #10]
 800af68:	2b07      	cmp	r3, #7
 800af6a:	d93f      	bls.n	800afec <udp_sendto_if_src+0xd8>
  udphdr = (struct udp_hdr *)q->payload;
 800af6c:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800af6e:	8a60      	ldrh	r0, [r4, #18]
 800af70:	f7fa ffbe 	bl	8005ef0 <lwip_htons>
 800af74:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800af76:	4648      	mov	r0, r9
 800af78:	f7fa ffba 	bl	8005ef0 <lwip_htons>
  udphdr->chksum = 0x0000;
 800af7c:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800af7e:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800af80:	71bb      	strb	r3, [r7, #6]
 800af82:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800af84:	8930      	ldrh	r0, [r6, #8]
 800af86:	f7fa ffb3 	bl	8005ef0 <lwip_htons>
 800af8a:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800af8c:	f8cd b008 	str.w	fp, [sp, #8]
 800af90:	2011      	movs	r0, #17
 800af92:	7aa3      	ldrb	r3, [r4, #10]
 800af94:	4642      	mov	r2, r8
 800af96:	4651      	mov	r1, sl
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	7ae3      	ldrb	r3, [r4, #11]
 800af9c:	9001      	str	r0, [sp, #4]
 800af9e:	4630      	mov	r0, r6
 800afa0:	f001 f802 	bl	800bfa8 <ip4_output_if_src>
  if (q != p) {
 800afa4:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800afa6:	4607      	mov	r7, r0
  if (q != p) {
 800afa8:	d002      	beq.n	800afb0 <udp_sendto_if_src+0x9c>
    pbuf_free(q);
 800afaa:	4630      	mov	r0, r6
 800afac:	f7fb ff5a 	bl	8006e64 <pbuf_free>
}
 800afb0:	4638      	mov	r0, r7
 800afb2:	b005      	add	sp, #20
 800afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800afb8:	4621      	mov	r1, r4
 800afba:	4620      	mov	r0, r4
 800afbc:	f7ff ff22 	bl	800ae04 <udp_bind>
    if (err != ERR_OK) {
 800afc0:	4607      	mov	r7, r0
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0c3      	beq.n	800af4e <udp_sendto_if_src+0x3a>
}
 800afc6:	4638      	mov	r0, r7
 800afc8:	b005      	add	sp, #20
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800afce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800afd2:	2108      	movs	r1, #8
 800afd4:	2022      	movs	r0, #34	; 0x22
 800afd6:	f7fb ffb5 	bl	8006f44 <pbuf_alloc>
    if (q == NULL) {
 800afda:	4606      	mov	r6, r0
 800afdc:	b170      	cbz	r0, 800affc <udp_sendto_if_src+0xe8>
    if (p->tot_len != 0) {
 800afde:	892b      	ldrh	r3, [r5, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0c0      	beq.n	800af66 <udp_sendto_if_src+0x52>
      pbuf_chain(q, p);
 800afe4:	4629      	mov	r1, r5
 800afe6:	f7fc f919 	bl	800721c <pbuf_chain>
 800afea:	e7bc      	b.n	800af66 <udp_sendto_if_src+0x52>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800afec:	4b1e      	ldr	r3, [pc, #120]	; (800b068 <udp_sendto_if_src+0x154>)
 800afee:	f240 320d 	movw	r2, #781	; 0x30d
 800aff2:	491e      	ldr	r1, [pc, #120]	; (800b06c <udp_sendto_if_src+0x158>)
 800aff4:	481e      	ldr	r0, [pc, #120]	; (800b070 <udp_sendto_if_src+0x15c>)
 800aff6:	f001 fefd 	bl	800cdf4 <iprintf>
 800affa:	e7b7      	b.n	800af6c <udp_sendto_if_src+0x58>
    return ERR_MEM;
 800affc:	f04f 37ff 	mov.w	r7, #4294967295
 800b000:	e7d6      	b.n	800afb0 <udp_sendto_if_src+0x9c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b002:	4b19      	ldr	r3, [pc, #100]	; (800b068 <udp_sendto_if_src+0x154>)
 800b004:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b008:	491a      	ldr	r1, [pc, #104]	; (800b074 <udp_sendto_if_src+0x160>)
 800b00a:	f06f 070f 	mvn.w	r7, #15
 800b00e:	4818      	ldr	r0, [pc, #96]	; (800b070 <udp_sendto_if_src+0x15c>)
 800b010:	f001 fef0 	bl	800cdf4 <iprintf>
 800b014:	e7cc      	b.n	800afb0 <udp_sendto_if_src+0x9c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b016:	4b14      	ldr	r3, [pc, #80]	; (800b068 <udp_sendto_if_src+0x154>)
 800b018:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b01c:	4916      	ldr	r1, [pc, #88]	; (800b078 <udp_sendto_if_src+0x164>)
 800b01e:	f06f 070f 	mvn.w	r7, #15
 800b022:	4813      	ldr	r0, [pc, #76]	; (800b070 <udp_sendto_if_src+0x15c>)
 800b024:	f001 fee6 	bl	800cdf4 <iprintf>
 800b028:	e7c2      	b.n	800afb0 <udp_sendto_if_src+0x9c>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b02a:	4b0f      	ldr	r3, [pc, #60]	; (800b068 <udp_sendto_if_src+0x154>)
 800b02c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b030:	4912      	ldr	r1, [pc, #72]	; (800b07c <udp_sendto_if_src+0x168>)
 800b032:	f06f 070f 	mvn.w	r7, #15
 800b036:	480e      	ldr	r0, [pc, #56]	; (800b070 <udp_sendto_if_src+0x15c>)
 800b038:	f001 fedc 	bl	800cdf4 <iprintf>
 800b03c:	e7b8      	b.n	800afb0 <udp_sendto_if_src+0x9c>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b03e:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <udp_sendto_if_src+0x154>)
 800b040:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b044:	490e      	ldr	r1, [pc, #56]	; (800b080 <udp_sendto_if_src+0x16c>)
 800b046:	f06f 070f 	mvn.w	r7, #15
 800b04a:	4809      	ldr	r0, [pc, #36]	; (800b070 <udp_sendto_if_src+0x15c>)
 800b04c:	f001 fed2 	bl	800cdf4 <iprintf>
 800b050:	e7ae      	b.n	800afb0 <udp_sendto_if_src+0x9c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b052:	4b05      	ldr	r3, [pc, #20]	; (800b068 <udp_sendto_if_src+0x154>)
 800b054:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b058:	490a      	ldr	r1, [pc, #40]	; (800b084 <udp_sendto_if_src+0x170>)
 800b05a:	f06f 070f 	mvn.w	r7, #15
 800b05e:	4804      	ldr	r0, [pc, #16]	; (800b070 <udp_sendto_if_src+0x15c>)
 800b060:	f001 fec8 	bl	800cdf4 <iprintf>
 800b064:	e7a4      	b.n	800afb0 <udp_sendto_if_src+0x9c>
 800b066:	bf00      	nop
 800b068:	0800f4c8 	.word	0x0800f4c8
 800b06c:	0800f634 	.word	0x0800f634
 800b070:	0800dd68 	.word	0x0800dd68
 800b074:	0800f5ec 	.word	0x0800f5ec
 800b078:	0800f5c8 	.word	0x0800f5c8
 800b07c:	0800f5a8 	.word	0x0800f5a8
 800b080:	0800f588 	.word	0x0800f588
 800b084:	0800f610 	.word	0x0800f610

0800b088 <udp_sendto_if>:
{
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b08e:	2800      	cmp	r0, #0
 800b090:	d036      	beq.n	800b100 <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b092:	b359      	cbz	r1, 800b0ec <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b094:	b302      	cbz	r2, 800b0d8 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b096:	b1ac      	cbz	r4, 800b0c4 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b098:	6805      	ldr	r5, [r0, #0]
 800b09a:	b935      	cbnz	r5, 800b0aa <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 800b09c:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b09e:	e9cd 4500 	strd	r4, r5, [sp]
 800b0a2:	f7ff ff37 	bl	800af14 <udp_sendto_if_src>
}
 800b0a6:	b002      	add	sp, #8
 800b0a8:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b0aa:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b0ae:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 800b0b2:	d0f3      	beq.n	800b09c <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b0b4:	6866      	ldr	r6, [r4, #4]
 800b0b6:	42b5      	cmp	r5, r6
 800b0b8:	d101      	bne.n	800b0be <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	e7ef      	b.n	800b09e <udp_sendto_if+0x16>
        return ERR_RTE;
 800b0be:	f06f 0003 	mvn.w	r0, #3
 800b0c2:	e7f0      	b.n	800b0a6 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b0c4:	4b13      	ldr	r3, [pc, #76]	; (800b114 <udp_sendto_if+0x8c>)
 800b0c6:	f240 2283 	movw	r2, #643	; 0x283
 800b0ca:	4913      	ldr	r1, [pc, #76]	; (800b118 <udp_sendto_if+0x90>)
 800b0cc:	4813      	ldr	r0, [pc, #76]	; (800b11c <udp_sendto_if+0x94>)
 800b0ce:	f001 fe91 	bl	800cdf4 <iprintf>
 800b0d2:	f06f 000f 	mvn.w	r0, #15
 800b0d6:	e7e6      	b.n	800b0a6 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b0d8:	4b0e      	ldr	r3, [pc, #56]	; (800b114 <udp_sendto_if+0x8c>)
 800b0da:	f240 2282 	movw	r2, #642	; 0x282
 800b0de:	4910      	ldr	r1, [pc, #64]	; (800b120 <udp_sendto_if+0x98>)
 800b0e0:	480e      	ldr	r0, [pc, #56]	; (800b11c <udp_sendto_if+0x94>)
 800b0e2:	f001 fe87 	bl	800cdf4 <iprintf>
 800b0e6:	f06f 000f 	mvn.w	r0, #15
 800b0ea:	e7dc      	b.n	800b0a6 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <udp_sendto_if+0x8c>)
 800b0ee:	f240 2281 	movw	r2, #641	; 0x281
 800b0f2:	490c      	ldr	r1, [pc, #48]	; (800b124 <udp_sendto_if+0x9c>)
 800b0f4:	4809      	ldr	r0, [pc, #36]	; (800b11c <udp_sendto_if+0x94>)
 800b0f6:	f001 fe7d 	bl	800cdf4 <iprintf>
 800b0fa:	f06f 000f 	mvn.w	r0, #15
 800b0fe:	e7d2      	b.n	800b0a6 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b100:	4b04      	ldr	r3, [pc, #16]	; (800b114 <udp_sendto_if+0x8c>)
 800b102:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b106:	4908      	ldr	r1, [pc, #32]	; (800b128 <udp_sendto_if+0xa0>)
 800b108:	4804      	ldr	r0, [pc, #16]	; (800b11c <udp_sendto_if+0x94>)
 800b10a:	f001 fe73 	bl	800cdf4 <iprintf>
 800b10e:	f06f 000f 	mvn.w	r0, #15
 800b112:	e7c8      	b.n	800b0a6 <udp_sendto_if+0x1e>
 800b114:	0800f4c8 	.word	0x0800f4c8
 800b118:	0800f6bc 	.word	0x0800f6bc
 800b11c:	0800dd68 	.word	0x0800dd68
 800b120:	0800f69c 	.word	0x0800f69c
 800b124:	0800f680 	.word	0x0800f680
 800b128:	0800f664 	.word	0x0800f664

0800b12c <udp_sendto>:
{
 800b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b130:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b132:	b388      	cbz	r0, 800b198 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b134:	460e      	mov	r6, r1
 800b136:	b329      	cbz	r1, 800b184 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b138:	4615      	mov	r5, r2
 800b13a:	b1ca      	cbz	r2, 800b170 <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b13c:	4604      	mov	r4, r0
 800b13e:	7a00      	ldrb	r0, [r0, #8]
 800b140:	4698      	mov	r8, r3
 800b142:	b168      	cbz	r0, 800b160 <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 800b144:	f7fb fcdc 	bl	8006b00 <netif_get_by_index>
 800b148:	4607      	mov	r7, r0
  if (netif == NULL) {
 800b14a:	b177      	cbz	r7, 800b16a <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b14c:	4643      	mov	r3, r8
 800b14e:	462a      	mov	r2, r5
 800b150:	4631      	mov	r1, r6
 800b152:	4620      	mov	r0, r4
 800b154:	9700      	str	r7, [sp, #0]
 800b156:	f7ff ff97 	bl	800b088 <udp_sendto_if>
}
 800b15a:	b002      	add	sp, #8
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b160:	4610      	mov	r0, r2
 800b162:	f000 fe0f 	bl	800bd84 <ip4_route>
 800b166:	4607      	mov	r7, r0
 800b168:	e7ef      	b.n	800b14a <udp_sendto+0x1e>
    return ERR_RTE;
 800b16a:	f06f 0003 	mvn.w	r0, #3
 800b16e:	e7f4      	b.n	800b15a <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b170:	4b0e      	ldr	r3, [pc, #56]	; (800b1ac <udp_sendto+0x80>)
 800b172:	f240 221a 	movw	r2, #538	; 0x21a
 800b176:	490e      	ldr	r1, [pc, #56]	; (800b1b0 <udp_sendto+0x84>)
 800b178:	480e      	ldr	r0, [pc, #56]	; (800b1b4 <udp_sendto+0x88>)
 800b17a:	f001 fe3b 	bl	800cdf4 <iprintf>
 800b17e:	f06f 000f 	mvn.w	r0, #15
 800b182:	e7ea      	b.n	800b15a <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b184:	4b09      	ldr	r3, [pc, #36]	; (800b1ac <udp_sendto+0x80>)
 800b186:	f240 2219 	movw	r2, #537	; 0x219
 800b18a:	490b      	ldr	r1, [pc, #44]	; (800b1b8 <udp_sendto+0x8c>)
 800b18c:	4809      	ldr	r0, [pc, #36]	; (800b1b4 <udp_sendto+0x88>)
 800b18e:	f001 fe31 	bl	800cdf4 <iprintf>
 800b192:	f06f 000f 	mvn.w	r0, #15
 800b196:	e7e0      	b.n	800b15a <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b198:	4b04      	ldr	r3, [pc, #16]	; (800b1ac <udp_sendto+0x80>)
 800b19a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b19e:	4907      	ldr	r1, [pc, #28]	; (800b1bc <udp_sendto+0x90>)
 800b1a0:	4804      	ldr	r0, [pc, #16]	; (800b1b4 <udp_sendto+0x88>)
 800b1a2:	f001 fe27 	bl	800cdf4 <iprintf>
 800b1a6:	f06f 000f 	mvn.w	r0, #15
 800b1aa:	e7d6      	b.n	800b15a <udp_sendto+0x2e>
 800b1ac:	0800f4c8 	.word	0x0800f4c8
 800b1b0:	0800f710 	.word	0x0800f710
 800b1b4:	0800dd68 	.word	0x0800dd68
 800b1b8:	0800f6f4 	.word	0x0800f6f4
 800b1bc:	0800f6dc 	.word	0x0800f6dc

0800b1c0 <udp_send>:
{
 800b1c0:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1c2:	b188      	cbz	r0, 800b1e8 <udp_send+0x28>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b1c4:	b131      	cbz	r1, 800b1d4 <udp_send+0x14>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	8a83      	ldrh	r3, [r0, #20]
 800b1ca:	3204      	adds	r2, #4
}
 800b1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b1d0:	f7ff bfac 	b.w	800b12c <udp_sendto>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b1d4:	4b08      	ldr	r3, [pc, #32]	; (800b1f8 <udp_send+0x38>)
 800b1d6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b1da:	4908      	ldr	r1, [pc, #32]	; (800b1fc <udp_send+0x3c>)
 800b1dc:	4808      	ldr	r0, [pc, #32]	; (800b200 <udp_send+0x40>)
 800b1de:	f001 fe09 	bl	800cdf4 <iprintf>
}
 800b1e2:	f06f 000f 	mvn.w	r0, #15
 800b1e6:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1e8:	4b03      	ldr	r3, [pc, #12]	; (800b1f8 <udp_send+0x38>)
 800b1ea:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b1ee:	4905      	ldr	r1, [pc, #20]	; (800b204 <udp_send+0x44>)
 800b1f0:	4803      	ldr	r0, [pc, #12]	; (800b200 <udp_send+0x40>)
 800b1f2:	f001 fdff 	bl	800cdf4 <iprintf>
 800b1f6:	e7f4      	b.n	800b1e2 <udp_send+0x22>
 800b1f8:	0800f4c8 	.word	0x0800f4c8
 800b1fc:	0800f744 	.word	0x0800f744
 800b200:	0800dd68 	.word	0x0800dd68
 800b204:	0800f72c 	.word	0x0800f72c

0800b208 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	4604      	mov	r4, r0
 800b20c:	460d      	mov	r5, r1
 800b20e:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();
 800b210:	f7f8 f93a 	bl	8003488 <sys_check_core_locking>

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b214:	b314      	cbz	r4, 800b25c <udp_connect+0x54>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b216:	b35d      	cbz	r5, 800b270 <udp_connect+0x68>

  if (pcb->local_port == 0) {
 800b218:	8a62      	ldrh	r2, [r4, #18]
 800b21a:	b1c2      	cbz	r2, 800b24e <udp_connect+0x46>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b21c:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b21e:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b220:	4918      	ldr	r1, [pc, #96]	; (800b284 <udp_connect+0x7c>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b222:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b226:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b228:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 800b22a:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b22c:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b22e:	b142      	cbz	r2, 800b242 <udp_connect+0x3a>
    if (pcb == ipcb) {
 800b230:	4294      	cmp	r4, r2
 800b232:	d00a      	beq.n	800b24a <udp_connect+0x42>
 800b234:	4613      	mov	r3, r2
 800b236:	e001      	b.n	800b23c <udp_connect+0x34>
 800b238:	429c      	cmp	r4, r3
 800b23a:	d006      	beq.n	800b24a <udp_connect+0x42>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1fa      	bne.n	800b238 <udp_connect+0x30>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 800b242:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 800b244:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800b246:	600c      	str	r4, [r1, #0]
}
 800b248:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800b24a:	2000      	movs	r0, #0
}
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b24e:	4621      	mov	r1, r4
 800b250:	4620      	mov	r0, r4
 800b252:	f7ff fdd7 	bl	800ae04 <udp_bind>
    if (err != ERR_OK) {
 800b256:	2800      	cmp	r0, #0
 800b258:	d0e0      	beq.n	800b21c <udp_connect+0x14>
}
 800b25a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b25c:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <udp_connect+0x80>)
 800b25e:	f240 4235 	movw	r2, #1077	; 0x435
 800b262:	490a      	ldr	r1, [pc, #40]	; (800b28c <udp_connect+0x84>)
 800b264:	480a      	ldr	r0, [pc, #40]	; (800b290 <udp_connect+0x88>)
 800b266:	f001 fdc5 	bl	800cdf4 <iprintf>
 800b26a:	f06f 000f 	mvn.w	r0, #15
}
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b270:	4b05      	ldr	r3, [pc, #20]	; (800b288 <udp_connect+0x80>)
 800b272:	f240 4236 	movw	r2, #1078	; 0x436
 800b276:	4907      	ldr	r1, [pc, #28]	; (800b294 <udp_connect+0x8c>)
 800b278:	4805      	ldr	r0, [pc, #20]	; (800b290 <udp_connect+0x88>)
 800b27a:	f001 fdbb 	bl	800cdf4 <iprintf>
 800b27e:	f06f 000f 	mvn.w	r0, #15
}
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	240105ac 	.word	0x240105ac
 800b288:	0800f4c8 	.word	0x0800f4c8
 800b28c:	0800f75c 	.word	0x0800f75c
 800b290:	0800dd68 	.word	0x0800dd68
 800b294:	0800f778 	.word	0x0800f778

0800b298 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b298:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 800b29a:	f7f8 f8f5 	bl	8003488 <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b29e:	2000      	movs	r0, #0
 800b2a0:	f7fb f9d4 	bl	800664c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	b128      	cbz	r0, 800b2b4 <udp_new+0x1c>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	f001 fe07 	bl	800cebe <memset>
    pcb->ttl = UDP_TTL;
 800b2b0:	23ff      	movs	r3, #255	; 0xff
 800b2b2:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	bd10      	pop	{r4, pc}

0800b2b8 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b2b8:	b110      	cbz	r0, 800b2c0 <udp_netif_ip_addr_changed+0x8>
 800b2ba:	6802      	ldr	r2, [r0, #0]
 800b2bc:	b101      	cbz	r1, 800b2c0 <udp_netif_ip_addr_changed+0x8>
 800b2be:	b902      	cbnz	r2, 800b2c2 <udp_netif_ip_addr_changed+0xa>
 800b2c0:	4770      	bx	lr
 800b2c2:	680b      	ldr	r3, [r1, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0fb      	beq.n	800b2c0 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b2c8:	4b08      	ldr	r3, [pc, #32]	; (800b2ec <udp_netif_ip_addr_changed+0x34>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0f7      	beq.n	800b2c0 <udp_netif_ip_addr_changed+0x8>
{
 800b2d0:	b410      	push	{r4}
 800b2d2:	e000      	b.n	800b2d6 <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b2d4:	6802      	ldr	r2, [r0, #0]
 800b2d6:	681c      	ldr	r4, [r3, #0]
 800b2d8:	4294      	cmp	r4, r2
 800b2da:	d101      	bne.n	800b2e0 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b2dc:	680a      	ldr	r2, [r1, #0]
 800b2de:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1f6      	bne.n	800b2d4 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800b2e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	240105ac 	.word	0x240105ac

0800b2f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	468b      	mov	fp, r1
 800b2f6:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b2f8:	f04f 080a 	mov.w	r8, #10
{
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	4617      	mov	r7, r2
 800b300:	4e52      	ldr	r6, [pc, #328]	; (800b44c <etharp_find_entry+0x15c>)
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b302:	465a      	mov	r2, fp
{
 800b304:	4605      	mov	r5, r0
 800b306:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b308:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800b30a:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b30c:	46c6      	mov	lr, r8
 800b30e:	46c3      	mov	fp, r8
 800b310:	469a      	mov	sl, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b312:	9303      	str	r3, [sp, #12]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b314:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800b318:	e004      	b.n	800b324 <etharp_find_entry+0x34>
 800b31a:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b31c:	3301      	adds	r3, #1
 800b31e:	3118      	adds	r1, #24
 800b320:	2b0a      	cmp	r3, #10
 800b322:	d016      	beq.n	800b352 <etharp_find_entry+0x62>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b324:	2c0a      	cmp	r4, #10
 800b326:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800b32a:	7d0a      	ldrb	r2, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b32c:	d13a      	bne.n	800b3a4 <etharp_find_entry+0xb4>
 800b32e:	2a00      	cmp	r2, #0
 800b330:	d0f3      	beq.n	800b31a <etharp_find_entry+0x2a>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b332:	b11d      	cbz	r5, 800b33c <etharp_find_entry+0x4c>
 800b334:	6828      	ldr	r0, [r5, #0]
 800b336:	684f      	ldr	r7, [r1, #4]
 800b338:	42b8      	cmp	r0, r7
 800b33a:	d03e      	beq.n	800b3ba <etharp_find_entry+0xca>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b33c:	2a01      	cmp	r2, #1
 800b33e:	d034      	beq.n	800b3aa <etharp_find_entry+0xba>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b340:	8a4a      	ldrh	r2, [r1, #18]
 800b342:	454a      	cmp	r2, r9
 800b344:	d3ea      	bcc.n	800b31c <etharp_find_entry+0x2c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b346:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800b348:	4691      	mov	r9, r2
 800b34a:	46e6      	mov	lr, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b34c:	3118      	adds	r1, #24
 800b34e:	2b0a      	cmp	r3, #10
 800b350:	d1e8      	bne.n	800b324 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b352:	46da      	mov	sl, fp
 800b354:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 800b358:	f1bb 0f01 	cmp.w	fp, #1
 800b35c:	d172      	bne.n	800b444 <etharp_find_entry+0x154>
 800b35e:	2c0a      	cmp	r4, #10
 800b360:	d032      	beq.n	800b3c8 <etharp_find_entry+0xd8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b362:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b366:	46a1      	mov	r9, r4
 800b368:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800b36c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b370:	7d1b      	ldrb	r3, [r3, #20]
 800b372:	b133      	cbz	r3, 800b382 <etharp_find_entry+0x92>
 800b374:	4b36      	ldr	r3, [pc, #216]	; (800b450 <etharp_find_entry+0x160>)
 800b376:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b37a:	4936      	ldr	r1, [pc, #216]	; (800b454 <etharp_find_entry+0x164>)
 800b37c:	4836      	ldr	r0, [pc, #216]	; (800b458 <etharp_find_entry+0x168>)
 800b37e:	f001 fd39 	bl	800cdf4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b382:	b12d      	cbz	r5, 800b390 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b384:	eb08 0309 	add.w	r3, r8, r9
 800b388:	682a      	ldr	r2, [r5, #0]
 800b38a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b38e:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800b390:	44c8      	add	r8, r9
 800b392:	2300      	movs	r3, #0
 800b394:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800b398:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b39a:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800b39c:	4620      	mov	r0, r4
 800b39e:	b005      	add	sp, #20
 800b3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	d0b9      	beq.n	800b31c <etharp_find_entry+0x2c>
 800b3a8:	e7c3      	b.n	800b332 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800b3aa:	680a      	ldr	r2, [r1, #0]
 800b3ac:	b3a2      	cbz	r2, 800b418 <etharp_find_entry+0x128>
          if (arp_table[i].ctime >= age_queue) {
 800b3ae:	8a4a      	ldrh	r2, [r1, #18]
 800b3b0:	4552      	cmp	r2, sl
 800b3b2:	d3b3      	bcc.n	800b31c <etharp_find_entry+0x2c>
 800b3b4:	4692      	mov	sl, r2
 800b3b6:	46e0      	mov	r8, ip
 800b3b8:	e7b0      	b.n	800b31c <etharp_find_entry+0x2c>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b3ba:	9f01      	ldr	r7, [sp, #4]
 800b3bc:	b117      	cbz	r7, 800b3c4 <etharp_find_entry+0xd4>
 800b3be:	6888      	ldr	r0, [r1, #8]
 800b3c0:	42b8      	cmp	r0, r7
 800b3c2:	d1bb      	bne.n	800b33c <etharp_find_entry+0x4c>
 800b3c4:	4664      	mov	r4, ip
 800b3c6:	e7e9      	b.n	800b39c <etharp_find_entry+0xac>
    if (old_stable < ARP_TABLE_SIZE) {
 800b3c8:	f1be 0f0a 	cmp.w	lr, #10
 800b3cc:	d02c      	beq.n	800b428 <etharp_find_entry+0x138>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b3ce:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 800b3d2:	46f1      	mov	r9, lr
 800b3d4:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800b3d8:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800b3dc:	b383      	cbz	r3, 800b440 <etharp_find_entry+0x150>
 800b3de:	464c      	mov	r4, r9
 800b3e0:	4b1b      	ldr	r3, [pc, #108]	; (800b450 <etharp_find_entry+0x160>)
 800b3e2:	f240 126d 	movw	r2, #365	; 0x16d
 800b3e6:	491d      	ldr	r1, [pc, #116]	; (800b45c <etharp_find_entry+0x16c>)
 800b3e8:	481b      	ldr	r0, [pc, #108]	; (800b458 <etharp_find_entry+0x168>)
 800b3ea:	f001 fd03 	bl	800cdf4 <iprintf>
  if (arp_table[i].q != NULL) {
 800b3ee:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800b3f2:	ea4f 0849 	mov.w	r8, r9, lsl #1
 800b3f6:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b3fa:	f856 000a 	ldr.w	r0, [r6, sl]
 800b3fe:	b120      	cbz	r0, 800b40a <etharp_find_entry+0x11a>
    free_etharp_q(arp_table[i].q);
 800b400:	f7fb fd30 	bl	8006e64 <pbuf_free>
    arp_table[i].q = NULL;
 800b404:	2300      	movs	r3, #0
 800b406:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b40a:	eb08 0309 	add.w	r3, r8, r9
 800b40e:	2200      	movs	r2, #0
 800b410:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b414:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b416:	e7b4      	b.n	800b382 <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_pending) {
 800b418:	8a4a      	ldrh	r2, [r1, #18]
 800b41a:	9803      	ldr	r0, [sp, #12]
 800b41c:	4282      	cmp	r2, r0
 800b41e:	f4ff af7d 	bcc.w	800b31c <etharp_find_entry+0x2c>
 800b422:	46e3      	mov	fp, ip
 800b424:	9203      	str	r2, [sp, #12]
 800b426:	e779      	b.n	800b31c <etharp_find_entry+0x2c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b428:	f1ba 0f0a 	cmp.w	sl, #10
 800b42c:	d105      	bne.n	800b43a <etharp_find_entry+0x14a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b42e:	f1b8 0f0a 	cmp.w	r8, #10
 800b432:	d007      	beq.n	800b444 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800b434:	4644      	mov	r4, r8
 800b436:	46c1      	mov	r9, r8
 800b438:	e7d9      	b.n	800b3ee <etharp_find_entry+0xfe>
 800b43a:	4654      	mov	r4, sl
 800b43c:	46d1      	mov	r9, sl
 800b43e:	e7d6      	b.n	800b3ee <etharp_find_entry+0xfe>
 800b440:	4674      	mov	r4, lr
 800b442:	e7e2      	b.n	800b40a <etharp_find_entry+0x11a>
    return (s16_t)ERR_MEM;
 800b444:	f04f 34ff 	mov.w	r4, #4294967295
 800b448:	e7a8      	b.n	800b39c <etharp_find_entry+0xac>
 800b44a:	bf00      	nop
 800b44c:	240105b0 	.word	0x240105b0
 800b450:	0800f794 	.word	0x0800f794
 800b454:	0800f7e4 	.word	0x0800f7e4
 800b458:	0800dd68 	.word	0x0800dd68
 800b45c:	0800f7cc 	.word	0x0800f7cc

0800b460 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b464:	b082      	sub	sp, #8
 800b466:	4688      	mov	r8, r1
 800b468:	4691      	mov	r9, r2
 800b46a:	461f      	mov	r7, r3
 800b46c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b470:	4606      	mov	r6, r0
{
 800b472:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b476:	2800      	cmp	r0, #0
 800b478:	d050      	beq.n	800b51c <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b47a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b47e:	211c      	movs	r1, #28
 800b480:	200e      	movs	r0, #14
 800b482:	f7fb fd5f 	bl	8006f44 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b486:	4605      	mov	r5, r0
 800b488:	2800      	cmp	r0, #0
 800b48a:	d04f      	beq.n	800b52c <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b48c:	8943      	ldrh	r3, [r0, #10]
 800b48e:	2b1b      	cmp	r3, #27
 800b490:	d93c      	bls.n	800b50c <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b492:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800b494:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800b496:	f7fa fd2b 	bl	8005ef0 <lwip_htons>
 800b49a:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b49c:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800b4a0:	2b06      	cmp	r3, #6
 800b4a2:	d006      	beq.n	800b4b2 <etharp_raw+0x52>
 800b4a4:	4b23      	ldr	r3, [pc, #140]	; (800b534 <etharp_raw+0xd4>)
 800b4a6:	f240 4269 	movw	r2, #1129	; 0x469
 800b4aa:	4923      	ldr	r1, [pc, #140]	; (800b538 <etharp_raw+0xd8>)
 800b4ac:	4823      	ldr	r0, [pc, #140]	; (800b53c <etharp_raw+0xdc>)
 800b4ae:	f001 fca1 	bl	800cdf4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b4b2:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b4b4:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b4b6:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b4b8:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b4ba:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b4bc:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b4be:	88b9      	ldrh	r1, [r7, #4]
 800b4c0:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b4c2:	f8da 1000 	ldr.w	r1, [sl]
 800b4c6:	f8c4 1012 	str.w	r1, [r4, #18]
 800b4ca:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800b4ce:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b4d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4d2:	6809      	ldr	r1, [r1, #0]
 800b4d4:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b4d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4da:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b4dc:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b4de:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b4e0:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b4e2:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b4e4:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b4e6:	2108      	movs	r1, #8
 800b4e8:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800b4ea:	2106      	movs	r1, #6
 800b4ec:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b4ee:	2104      	movs	r1, #4
 800b4f0:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b4f2:	f640 0106 	movw	r1, #2054	; 0x806
 800b4f6:	9100      	str	r1, [sp, #0]
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	f001 fab5 	bl	800ca68 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b4fe:	4628      	mov	r0, r5
 800b500:	f7fb fcb0 	bl	8006e64 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800b504:	4630      	mov	r0, r6
}
 800b506:	b002      	add	sp, #8
 800b508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b50c:	4b09      	ldr	r3, [pc, #36]	; (800b534 <etharp_raw+0xd4>)
 800b50e:	f240 4262 	movw	r2, #1122	; 0x462
 800b512:	490b      	ldr	r1, [pc, #44]	; (800b540 <etharp_raw+0xe0>)
 800b514:	4809      	ldr	r0, [pc, #36]	; (800b53c <etharp_raw+0xdc>)
 800b516:	f001 fc6d 	bl	800cdf4 <iprintf>
 800b51a:	e7ba      	b.n	800b492 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <etharp_raw+0xd4>)
 800b51e:	f240 4257 	movw	r2, #1111	; 0x457
 800b522:	4908      	ldr	r1, [pc, #32]	; (800b544 <etharp_raw+0xe4>)
 800b524:	4805      	ldr	r0, [pc, #20]	; (800b53c <etharp_raw+0xdc>)
 800b526:	f001 fc65 	bl	800cdf4 <iprintf>
 800b52a:	e7a6      	b.n	800b47a <etharp_raw+0x1a>
    return ERR_MEM;
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	e7e9      	b.n	800b506 <etharp_raw+0xa6>
 800b532:	bf00      	nop
 800b534:	0800f794 	.word	0x0800f794
 800b538:	0800f844 	.word	0x0800f844
 800b53c:	0800dd68 	.word	0x0800dd68
 800b540:	0800f810 	.word	0x0800f810
 800b544:	0800dd58 	.word	0x0800dd58

0800b548 <etharp_output_to_arp_index>:
{
 800b548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b54c:	4f39      	ldr	r7, [pc, #228]	; (800b634 <etharp_output_to_arp_index+0xec>)
 800b54e:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 800b552:	b084      	sub	sp, #16
 800b554:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b556:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 800b55a:	4605      	mov	r5, r0
 800b55c:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b55e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800b562:	f899 3014 	ldrb.w	r3, [r9, #20]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d93d      	bls.n	800b5e6 <etharp_output_to_arp_index+0x9e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d013      	beq.n	800b596 <etharp_output_to_arp_index+0x4e>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b56e:	f04f 0918 	mov.w	r9, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b572:	f105 0a26 	add.w	sl, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b576:	fb09 7904 	mla	r9, r9, r4, r7
 800b57a:	f109 090c 	add.w	r9, r9, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b57e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800b582:	464b      	mov	r3, r9
 800b584:	4652      	mov	r2, sl
 800b586:	4631      	mov	r1, r6
 800b588:	4628      	mov	r0, r5
 800b58a:	9400      	str	r4, [sp, #0]
 800b58c:	f001 fa6c 	bl	800ca68 <ethernet_output>
}
 800b590:	b004      	add	sp, #16
 800b592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b596:	44a0      	add	r8, r4
 800b598:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 800b59c:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800b5a0:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b5a4:	d829      	bhi.n	800b5fa <etharp_output_to_arp_index+0xb2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b5a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b5aa:	d3e0      	bcc.n	800b56e <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b5ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	00e4      	lsls	r4, r4, #3
 800b5ba:	9303      	str	r3, [sp, #12]
 800b5bc:	4b1e      	ldr	r3, [pc, #120]	; (800b638 <etharp_output_to_arp_index+0xf0>)
 800b5be:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b5c0:	f104 090c 	add.w	r9, r4, #12
 800b5c4:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b5c6:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b5c8:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b5ca:	44b9      	add	r9, r7
 800b5cc:	4427      	add	r7, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	4653      	mov	r3, sl
 800b5d2:	464a      	mov	r2, r9
 800b5d4:	9702      	str	r7, [sp, #8]
 800b5d6:	f7ff ff43 	bl	800b460 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d1cf      	bne.n	800b57e <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	f888 3014 	strb.w	r3, [r8, #20]
 800b5e4:	e7cb      	b.n	800b57e <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b5e6:	4b15      	ldr	r3, [pc, #84]	; (800b63c <etharp_output_to_arp_index+0xf4>)
 800b5e8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b5ec:	4914      	ldr	r1, [pc, #80]	; (800b640 <etharp_output_to_arp_index+0xf8>)
 800b5ee:	4815      	ldr	r0, [pc, #84]	; (800b644 <etharp_output_to_arp_index+0xfc>)
 800b5f0:	f001 fc00 	bl	800cdf4 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b5f4:	f899 3014 	ldrb.w	r3, [r9, #20]
 800b5f8:	e7b7      	b.n	800b56a <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b5fa:	eb04 0944 	add.w	r9, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b5fe:	2301      	movs	r3, #1
 800b600:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800b604:	4a10      	ldr	r2, [pc, #64]	; (800b648 <etharp_output_to_arp_index+0x100>)
 800b606:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800b60a:	9303      	str	r3, [sp, #12]
 800b60c:	4651      	mov	r1, sl
 800b60e:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b610:	f109 0304 	add.w	r3, r9, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b614:	f109 090c 	add.w	r9, r9, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b618:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b61a:	44b9      	add	r9, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b61c:	9302      	str	r3, [sp, #8]
 800b61e:	4b06      	ldr	r3, [pc, #24]	; (800b638 <etharp_output_to_arp_index+0xf0>)
 800b620:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b622:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	4653      	mov	r3, sl
 800b628:	f7ff ff1a 	bl	800b460 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d0d6      	beq.n	800b5de <etharp_output_to_arp_index+0x96>
 800b630:	e7a5      	b.n	800b57e <etharp_output_to_arp_index+0x36>
 800b632:	bf00      	nop
 800b634:	240105b0 	.word	0x240105b0
 800b638:	0800fc70 	.word	0x0800fc70
 800b63c:	0800f794 	.word	0x0800f794
 800b640:	0800f888 	.word	0x0800f888
 800b644:	0800dd68 	.word	0x0800dd68
 800b648:	0800fc68 	.word	0x0800fc68

0800b64c <etharp_tmr>:
{
 800b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b650:	4c20      	ldr	r4, [pc, #128]	; (800b6d4 <etharp_tmr+0x88>)
 800b652:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b654:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b656:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800b6dc <etharp_tmr+0x90>
 800b65a:	4f1f      	ldr	r7, [pc, #124]	; (800b6d8 <etharp_tmr+0x8c>)
 800b65c:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800b660:	e00c      	b.n	800b67c <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b662:	2a01      	cmp	r2, #1
 800b664:	d101      	bne.n	800b66a <etharp_tmr+0x1e>
 800b666:	2b04      	cmp	r3, #4
 800b668:	d812      	bhi.n	800b690 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b66a:	2a03      	cmp	r2, #3
 800b66c:	d01e      	beq.n	800b6ac <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b66e:	2a04      	cmp	r2, #4
 800b670:	d01f      	beq.n	800b6b2 <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b672:	2a01      	cmp	r2, #1
 800b674:	d020      	beq.n	800b6b8 <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b676:	3418      	adds	r4, #24
 800b678:	42ac      	cmp	r4, r5
 800b67a:	d014      	beq.n	800b6a6 <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 800b67c:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800b67e:	2a00      	cmp	r2, #0
 800b680:	d0f9      	beq.n	800b676 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800b682:	89e3      	ldrh	r3, [r4, #14]
 800b684:	3301      	adds	r3, #1
 800b686:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b688:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800b68c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b68e:	d3e8      	bcc.n	800b662 <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 800b690:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800b694:	b118      	cbz	r0, 800b69e <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 800b696:	f7fb fbe5 	bl	8006e64 <pbuf_free>
    arp_table[i].q = NULL;
 800b69a:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b69e:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b6a0:	3418      	adds	r4, #24
 800b6a2:	42ac      	cmp	r4, r5
 800b6a4:	d1ea      	bne.n	800b67c <etharp_tmr+0x30>
}
 800b6a6:	b004      	add	sp, #16
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b6ac:	2304      	movs	r3, #4
 800b6ae:	7423      	strb	r3, [r4, #16]
 800b6b0:	e7e1      	b.n	800b676 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	7423      	strb	r3, [r4, #16]
 800b6b6:	e7de      	b.n	800b676 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b6b8:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b6ba:	f8cd 8004 	str.w	r8, [sp, #4]
 800b6be:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b6c2:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b6c4:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800b6c8:	9100      	str	r1, [sp, #0]
 800b6ca:	463a      	mov	r2, r7
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7ff fec7 	bl	800b460 <etharp_raw>
 800b6d2:	e7d0      	b.n	800b676 <etharp_tmr+0x2a>
 800b6d4:	240105b4 	.word	0x240105b4
 800b6d8:	0800fc68 	.word	0x0800fc68
 800b6dc:	0800fc70 	.word	0x0800fc70

0800b6e0 <etharp_cleanup_netif>:
{
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	4c0a      	ldr	r4, [pc, #40]	; (800b70c <etharp_cleanup_netif+0x2c>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b6e4:	2700      	movs	r7, #0
{
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b6ec:	7d23      	ldrb	r3, [r4, #20]
 800b6ee:	b113      	cbz	r3, 800b6f6 <etharp_cleanup_netif+0x16>
 800b6f0:	68a3      	ldr	r3, [r4, #8]
 800b6f2:	42b3      	cmp	r3, r6
 800b6f4:	d003      	beq.n	800b6fe <etharp_cleanup_netif+0x1e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b6f6:	3418      	adds	r4, #24
 800b6f8:	42ac      	cmp	r4, r5
 800b6fa:	d1f7      	bne.n	800b6ec <etharp_cleanup_netif+0xc>
}
 800b6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (arp_table[i].q != NULL) {
 800b6fe:	6820      	ldr	r0, [r4, #0]
 800b700:	b110      	cbz	r0, 800b708 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800b702:	f7fb fbaf 	bl	8006e64 <pbuf_free>
    arp_table[i].q = NULL;
 800b706:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b708:	7527      	strb	r7, [r4, #20]
}
 800b70a:	e7f4      	b.n	800b6f6 <etharp_cleanup_netif+0x16>
 800b70c:	240105b0 	.word	0x240105b0

0800b710 <etharp_input>:
{
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	460d      	mov	r5, r1
 800b716:	b087      	sub	sp, #28
 800b718:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800b71a:	f7f7 feb5 	bl	8003488 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b71e:	2d00      	cmp	r5, #0
 800b720:	d07b      	beq.n	800b81a <etharp_input+0x10a>
  hdr = (struct etharp_hdr *)p->payload;
 800b722:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b724:	8833      	ldrh	r3, [r6, #0]
 800b726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b72a:	d102      	bne.n	800b732 <etharp_input+0x22>
 800b72c:	7933      	ldrb	r3, [r6, #4]
 800b72e:	2b06      	cmp	r3, #6
 800b730:	d005      	beq.n	800b73e <etharp_input+0x2e>
  pbuf_free(p);
 800b732:	4620      	mov	r0, r4
}
 800b734:	b007      	add	sp, #28
 800b736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800b73a:	f7fb bb93 	b.w	8006e64 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b73e:	7973      	ldrb	r3, [r6, #5]
 800b740:	2b04      	cmp	r3, #4
 800b742:	d1f6      	bne.n	800b732 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b744:	8873      	ldrh	r3, [r6, #2]
 800b746:	2b08      	cmp	r3, #8
 800b748:	d1f3      	bne.n	800b732 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b74a:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b74e:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b752:	686f      	ldr	r7, [r5, #4]
 800b754:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b756:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b75a:	2f00      	cmp	r7, #0
 800b75c:	d167      	bne.n	800b82e <etharp_input+0x11e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b75e:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b762:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800b766:	2b06      	cmp	r3, #6
 800b768:	d165      	bne.n	800b836 <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 800b76a:	f1ba 0f00 	cmp.w	sl, #0
 800b76e:	d03e      	beq.n	800b7ee <etharp_input+0xde>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b770:	4629      	mov	r1, r5
 800b772:	4650      	mov	r0, sl
 800b774:	f000 fcae 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800b778:	4681      	mov	r9, r0
 800b77a:	bbc0      	cbnz	r0, 800b7ee <etharp_input+0xde>
      ip4_addr_ismulticast(ipaddr)) {
 800b77c:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b780:	f1ba 0fe0 	cmp.w	sl, #224	; 0xe0
 800b784:	d033      	beq.n	800b7ee <etharp_input+0xde>
  i = etharp_find_entry(ipaddr, flags, netif);
 800b786:	4659      	mov	r1, fp
 800b788:	462a      	mov	r2, r5
 800b78a:	a805      	add	r0, sp, #20
 800b78c:	f7ff fdb0 	bl	800b2f0 <etharp_find_entry>
  if (i < 0) {
 800b790:	1e03      	subs	r3, r0, #0
 800b792:	db2c      	blt.n	800b7ee <etharp_input+0xde>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b794:	492d      	ldr	r1, [pc, #180]	; (800b84c <etharp_input+0x13c>)
 800b796:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b79a:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b79c:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b7a0:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800b7a4:	00d2      	lsls	r2, r2, #3
 800b7a6:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b7aa:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800b7ac:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b7b0:	fb13 030e 	smlabb	r3, r3, lr, r0
 800b7b4:	f8d8 0000 	ldr.w	r0, [r8]
 800b7b8:	50c8      	str	r0, [r1, r3]
 800b7ba:	440b      	add	r3, r1
 800b7bc:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800b7c0:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800b7c2:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800b7c6:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800b7ca:	f1ba 0f00 	cmp.w	sl, #0
 800b7ce:	d00e      	beq.n	800b7ee <etharp_input+0xde>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b7d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800b7d4:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	4651      	mov	r1, sl
 800b7e2:	4643      	mov	r3, r8
 800b7e4:	f001 f940 	bl	800ca68 <ethernet_output>
    pbuf_free(p);
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	f7fb fb3b 	bl	8006e64 <pbuf_free>
  switch (hdr->opcode) {
 800b7ee:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800b7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7f4:	d19d      	bne.n	800b732 <etharp_input+0x22>
 800b7f6:	2f00      	cmp	r7, #0
 800b7f8:	d09b      	beq.n	800b732 <etharp_input+0x22>
        etharp_raw(netif,
 800b7fa:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b7fc:	f105 0326 	add.w	r3, r5, #38	; 0x26
        etharp_raw(netif,
 800b800:	4642      	mov	r2, r8
 800b802:	4628      	mov	r0, r5
 800b804:	9103      	str	r1, [sp, #12]
 800b806:	a905      	add	r1, sp, #20
 800b808:	f8cd 8004 	str.w	r8, [sp, #4]
 800b80c:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b80e:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800b810:	9100      	str	r1, [sp, #0]
 800b812:	4619      	mov	r1, r3
 800b814:	f7ff fe24 	bl	800b460 <etharp_raw>
 800b818:	e78b      	b.n	800b732 <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b81a:	4b0d      	ldr	r3, [pc, #52]	; (800b850 <etharp_input+0x140>)
 800b81c:	f240 228a 	movw	r2, #650	; 0x28a
 800b820:	490c      	ldr	r1, [pc, #48]	; (800b854 <etharp_input+0x144>)
 800b822:	480d      	ldr	r0, [pc, #52]	; (800b858 <etharp_input+0x148>)
}
 800b824:	b007      	add	sp, #28
 800b826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b82a:	f001 bae3 	b.w	800cdf4 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b82e:	429f      	cmp	r7, r3
 800b830:	d009      	beq.n	800b846 <etharp_input+0x136>
 800b832:	2700      	movs	r7, #0
 800b834:	e793      	b.n	800b75e <etharp_input+0x4e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b836:	4b06      	ldr	r3, [pc, #24]	; (800b850 <etharp_input+0x140>)
 800b838:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b83c:	4907      	ldr	r1, [pc, #28]	; (800b85c <etharp_input+0x14c>)
 800b83e:	4806      	ldr	r0, [pc, #24]	; (800b858 <etharp_input+0x148>)
 800b840:	f001 fad8 	bl	800cdf4 <iprintf>
 800b844:	e791      	b.n	800b76a <etharp_input+0x5a>
 800b846:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b848:	46bb      	mov	fp, r7
 800b84a:	e78a      	b.n	800b762 <etharp_input+0x52>
 800b84c:	240105b0 	.word	0x240105b0
 800b850:	0800f794 	.word	0x0800f794
 800b854:	0800dd58 	.word	0x0800dd58
 800b858:	0800dd68 	.word	0x0800dd68
 800b85c:	0800f8d8 	.word	0x0800f8d8

0800b860 <etharp_query>:
{
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	460e      	mov	r6, r1
 800b866:	b085      	sub	sp, #20
 800b868:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b86a:	4601      	mov	r1, r0
 800b86c:	6830      	ldr	r0, [r6, #0]
{
 800b86e:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b870:	f000 fc30 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
 800b874:	2800      	cmp	r0, #0
 800b876:	f040 8099 	bne.w	800b9ac <etharp_query+0x14c>
      ip4_addr_ismulticast(ipaddr) ||
 800b87a:	6833      	ldr	r3, [r6, #0]
 800b87c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 800b880:	2ae0      	cmp	r2, #224	; 0xe0
 800b882:	f000 8093 	beq.w	800b9ac <etharp_query+0x14c>
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 8090 	beq.w	800b9ac <etharp_query+0x14c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b88c:	462a      	mov	r2, r5
 800b88e:	2101      	movs	r1, #1
 800b890:	4630      	mov	r0, r6
 800b892:	f7ff fd2d 	bl	800b2f0 <etharp_find_entry>
  if (i_err < 0) {
 800b896:	f1b0 0800 	subs.w	r8, r0, #0
 800b89a:	db4c      	blt.n	800b936 <etharp_query+0xd6>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b89c:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 800b8a0:	dc41      	bgt.n	800b926 <etharp_query+0xc6>
  i = (netif_addr_idx_t)i_err;
 800b8a2:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b8a6:	f8df a144 	ldr.w	sl, [pc, #324]	; 800b9ec <etharp_query+0x18c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b8aa:	f105 0426 	add.w	r4, r5, #38	; 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b8ae:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800b8b2:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 800b8b6:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 800b8ba:	f899 3014 	ldrb.w	r3, [r9, #20]
 800b8be:	b14b      	cbz	r3, 800b8d4 <etharp_query+0x74>
  if (is_new_entry || (q == NULL)) {
 800b8c0:	2f00      	cmp	r7, #0
 800b8c2:	d079      	beq.n	800b9b8 <etharp_query+0x158>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b8c4:	2b01      	cmp	r3, #1
  err_t result = ERR_MEM;
 800b8c6:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b8ca:	d81a      	bhi.n	800b902 <etharp_query+0xa2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b8cc:	d038      	beq.n	800b940 <etharp_query+0xe0>
}
 800b8ce:	b005      	add	sp, #20
 800b8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b8d4:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b8d6:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800b8d8:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b8dc:	4621      	mov	r1, r4
 800b8de:	9303      	str	r3, [sp, #12]
 800b8e0:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b8e2:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b8e6:	4b3b      	ldr	r3, [pc, #236]	; (800b9d4 <etharp_query+0x174>)
 800b8e8:	4a3b      	ldr	r2, [pc, #236]	; (800b9d8 <etharp_query+0x178>)
 800b8ea:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b8ec:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	4623      	mov	r3, r4
 800b8f2:	f7ff fdb5 	bl	800b460 <etharp_raw>
    if (q == NULL) {
 800b8f6:	2f00      	cmp	r7, #0
 800b8f8:	d0e9      	beq.n	800b8ce <etharp_query+0x6e>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b8fa:	f899 3014 	ldrb.w	r3, [r9, #20]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d9e4      	bls.n	800b8cc <etharp_query+0x6c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b902:	2318      	movs	r3, #24
 800b904:	4622      	mov	r2, r4
 800b906:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800b90a:	4639      	mov	r1, r7
 800b90c:	fb03 a308 	mla	r3, r3, r8, sl
 800b910:	4628      	mov	r0, r5
 800b912:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 800b914:	4c31      	ldr	r4, [pc, #196]	; (800b9dc <etharp_query+0x17c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b916:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800b918:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b91c:	f001 f8a4 	bl	800ca68 <ethernet_output>
}
 800b920:	b005      	add	sp, #20
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b926:	4b2e      	ldr	r3, [pc, #184]	; (800b9e0 <etharp_query+0x180>)
 800b928:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b92c:	492d      	ldr	r1, [pc, #180]	; (800b9e4 <etharp_query+0x184>)
 800b92e:	482e      	ldr	r0, [pc, #184]	; (800b9e8 <etharp_query+0x188>)
 800b930:	f001 fa60 	bl	800cdf4 <iprintf>
 800b934:	e7b5      	b.n	800b8a2 <etharp_query+0x42>
    return (err_t)i_err;
 800b936:	fa4f f088 	sxtb.w	r0, r8
}
 800b93a:	b005      	add	sp, #20
 800b93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b940:	463c      	mov	r4, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b942:	4d27      	ldr	r5, [pc, #156]	; (800b9e0 <etharp_query+0x180>)
 800b944:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800b9f0 <etharp_query+0x190>
 800b948:	4e27      	ldr	r6, [pc, #156]	; (800b9e8 <etharp_query+0x188>)
 800b94a:	e004      	b.n	800b956 <etharp_query+0xf6>
      if (PBUF_NEEDS_COPY(p)) {
 800b94c:	7b23      	ldrb	r3, [r4, #12]
 800b94e:	065a      	lsls	r2, r3, #25
 800b950:	d412      	bmi.n	800b978 <etharp_query+0x118>
      p = p->next;
 800b952:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800b954:	b334      	cbz	r4, 800b9a4 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b956:	8962      	ldrh	r2, [r4, #10]
 800b958:	8923      	ldrh	r3, [r4, #8]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d1f6      	bne.n	800b94c <etharp_query+0xec>
 800b95e:	6822      	ldr	r2, [r4, #0]
 800b960:	462b      	mov	r3, r5
 800b962:	b132      	cbz	r2, 800b972 <etharp_query+0x112>
 800b964:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b968:	4649      	mov	r1, r9
 800b96a:	4630      	mov	r0, r6
 800b96c:	f001 fa42 	bl	800cdf4 <iprintf>
 800b970:	e7ec      	b.n	800b94c <etharp_query+0xec>
      if (PBUF_NEEDS_COPY(p)) {
 800b972:	7b23      	ldrb	r3, [r4, #12]
 800b974:	065b      	lsls	r3, r3, #25
 800b976:	d515      	bpl.n	800b9a4 <etharp_query+0x144>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b978:	463a      	mov	r2, r7
 800b97a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b97e:	200e      	movs	r0, #14
 800b980:	f7fb fcd6 	bl	8007330 <pbuf_clone>
    if (p != NULL) {
 800b984:	4607      	mov	r7, r0
 800b986:	b1a0      	cbz	r0, 800b9b2 <etharp_query+0x152>
      if (arp_table[i].q != NULL) {
 800b988:	eb0b 0308 	add.w	r3, fp, r8
 800b98c:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
 800b990:	b108      	cbz	r0, 800b996 <etharp_query+0x136>
        pbuf_free(arp_table[i].q);
 800b992:	f7fb fa67 	bl	8006e64 <pbuf_free>
      arp_table[i].q = p;
 800b996:	44d8      	add	r8, fp
      result = ERR_OK;
 800b998:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800b99a:	f84a 7038 	str.w	r7, [sl, r8, lsl #3]
}
 800b99e:	b005      	add	sp, #20
 800b9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f7fb fbdf 	bl	8007168 <pbuf_ref>
    if (p != NULL) {
 800b9aa:	e7ed      	b.n	800b988 <etharp_query+0x128>
    return ERR_ARG;
 800b9ac:	f06f 000f 	mvn.w	r0, #15
 800b9b0:	e78d      	b.n	800b8ce <etharp_query+0x6e>
      result = ERR_MEM;
 800b9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b6:	e78a      	b.n	800b8ce <etharp_query+0x6e>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b9b8:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	4f05      	ldr	r7, [pc, #20]	; (800b9d4 <etharp_query+0x174>)
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800b9c6:	e9cd 2700 	strd	r2, r7, [sp]
 800b9ca:	4623      	mov	r3, r4
 800b9cc:	4a02      	ldr	r2, [pc, #8]	; (800b9d8 <etharp_query+0x178>)
 800b9ce:	f7ff fd47 	bl	800b460 <etharp_raw>
    if (q == NULL) {
 800b9d2:	e77c      	b.n	800b8ce <etharp_query+0x6e>
 800b9d4:	0800fc70 	.word	0x0800fc70
 800b9d8:	0800fc68 	.word	0x0800fc68
 800b9dc:	240106a0 	.word	0x240106a0
 800b9e0:	0800f794 	.word	0x0800f794
 800b9e4:	0800f8fc 	.word	0x0800f8fc
 800b9e8:	0800dd68 	.word	0x0800dd68
 800b9ec:	240105b0 	.word	0x240105b0
 800b9f0:	0800f90c 	.word	0x0800f90c

0800b9f4 <etharp_output>:
{
 800b9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	b085      	sub	sp, #20
 800b9fa:	460f      	mov	r7, r1
 800b9fc:	4616      	mov	r6, r2
  LWIP_ASSERT_CORE_LOCKED();
 800b9fe:	f7f7 fd43 	bl	8003488 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ba02:	2d00      	cmp	r5, #0
 800ba04:	f000 8081 	beq.w	800bb0a <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ba08:	2f00      	cmp	r7, #0
 800ba0a:	d06d      	beq.n	800bae8 <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ba0c:	2e00      	cmp	r6, #0
 800ba0e:	d074      	beq.n	800bafa <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ba10:	4629      	mov	r1, r5
 800ba12:	6830      	ldr	r0, [r6, #0]
 800ba14:	f000 fb5e 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d163      	bne.n	800bae4 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ba1c:	6833      	ldr	r3, [r6, #0]
 800ba1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ba22:	2ae0      	cmp	r2, #224	; 0xe0
 800ba24:	d039      	beq.n	800ba9a <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ba26:	686a      	ldr	r2, [r5, #4]
 800ba28:	68a9      	ldr	r1, [r5, #8]
 800ba2a:	405a      	eors	r2, r3
 800ba2c:	420a      	tst	r2, r1
 800ba2e:	d009      	beq.n	800ba44 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800ba30:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ba32:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d004      	beq.n	800ba44 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ba3a:	68eb      	ldr	r3, [r5, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d076      	beq.n	800bb2e <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800ba40:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ba44:	f8df c108 	ldr.w	ip, [pc, #264]	; 800bb50 <etharp_output+0x15c>
 800ba48:	4b3a      	ldr	r3, [pc, #232]	; (800bb34 <etharp_output+0x140>)
 800ba4a:	f89c 2000 	ldrb.w	r2, [ip]
 800ba4e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ba52:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ba56:	7d19      	ldrb	r1, [r3, #20]
 800ba58:	2901      	cmp	r1, #1
 800ba5a:	d902      	bls.n	800ba62 <etharp_output+0x6e>
 800ba5c:	6899      	ldr	r1, [r3, #8]
 800ba5e:	42a9      	cmp	r1, r5
 800ba60:	d05e      	beq.n	800bb20 <etharp_output+0x12c>
 800ba62:	4c34      	ldr	r4, [pc, #208]	; (800bb34 <etharp_output+0x140>)
{
 800ba64:	2300      	movs	r3, #0
 800ba66:	e003      	b.n	800ba70 <etharp_output+0x7c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ba68:	2b0a      	cmp	r3, #10
 800ba6a:	f104 0418 	add.w	r4, r4, #24
 800ba6e:	d031      	beq.n	800bad4 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ba70:	7d20      	ldrb	r0, [r4, #20]
 800ba72:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ba74:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ba76:	2801      	cmp	r0, #1
 800ba78:	d9f6      	bls.n	800ba68 <etharp_output+0x74>
 800ba7a:	68a1      	ldr	r1, [r4, #8]
 800ba7c:	42a9      	cmp	r1, r5
 800ba7e:	d1f3      	bne.n	800ba68 <etharp_output+0x74>
          (arp_table[i].netif == netif) &&
 800ba80:	6830      	ldr	r0, [r6, #0]
 800ba82:	6861      	ldr	r1, [r4, #4]
 800ba84:	4288      	cmp	r0, r1
 800ba86:	d1ef      	bne.n	800ba68 <etharp_output+0x74>
        return etharp_output_to_arp_index(netif, q, i);
 800ba88:	4639      	mov	r1, r7
 800ba8a:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 800ba8c:	f88c 2000 	strb.w	r2, [ip]
}
 800ba90:	b005      	add	sp, #20
 800ba92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800ba96:	f7ff bd57 	b.w	800b548 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ba9a:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ba9c:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ba9e:	215e      	movs	r1, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800baa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800baa4:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800baa8:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800baaa:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800baae:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bab0:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bab4:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800bab8:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800baba:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800babe:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800bac2:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800bac6:	4639      	mov	r1, r7
 800bac8:	4628      	mov	r0, r5
 800baca:	9400      	str	r4, [sp, #0]
 800bacc:	f000 ffcc 	bl	800ca68 <ethernet_output>
}
 800bad0:	b005      	add	sp, #20
 800bad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800bad4:	463a      	mov	r2, r7
 800bad6:	4631      	mov	r1, r6
 800bad8:	4628      	mov	r0, r5
}
 800bada:	b005      	add	sp, #20
 800badc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800bae0:	f7ff bebe 	b.w	800b860 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800bae4:	4b14      	ldr	r3, [pc, #80]	; (800bb38 <etharp_output+0x144>)
 800bae6:	e7ea      	b.n	800babe <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bae8:	4b14      	ldr	r3, [pc, #80]	; (800bb3c <etharp_output+0x148>)
 800baea:	f240 321f 	movw	r2, #799	; 0x31f
 800baee:	4914      	ldr	r1, [pc, #80]	; (800bb40 <etharp_output+0x14c>)
 800baf0:	4814      	ldr	r0, [pc, #80]	; (800bb44 <etharp_output+0x150>)
 800baf2:	f001 f97f 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800baf6:	2e00      	cmp	r6, #0
 800baf8:	d18a      	bne.n	800ba10 <etharp_output+0x1c>
 800bafa:	4b10      	ldr	r3, [pc, #64]	; (800bb3c <etharp_output+0x148>)
 800bafc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800bb00:	4911      	ldr	r1, [pc, #68]	; (800bb48 <etharp_output+0x154>)
 800bb02:	4810      	ldr	r0, [pc, #64]	; (800bb44 <etharp_output+0x150>)
 800bb04:	f001 f976 	bl	800cdf4 <iprintf>
 800bb08:	e782      	b.n	800ba10 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bb0a:	4b0c      	ldr	r3, [pc, #48]	; (800bb3c <etharp_output+0x148>)
 800bb0c:	f240 321e 	movw	r2, #798	; 0x31e
 800bb10:	490e      	ldr	r1, [pc, #56]	; (800bb4c <etharp_output+0x158>)
 800bb12:	480c      	ldr	r0, [pc, #48]	; (800bb44 <etharp_output+0x150>)
 800bb14:	f001 f96e 	bl	800cdf4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bb18:	2f00      	cmp	r7, #0
 800bb1a:	f47f af77 	bne.w	800ba0c <etharp_output+0x18>
 800bb1e:	e7e3      	b.n	800bae8 <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	6831      	ldr	r1, [r6, #0]
 800bb24:	4299      	cmp	r1, r3
 800bb26:	d19c      	bne.n	800ba62 <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bb28:	4639      	mov	r1, r7
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	e7b0      	b.n	800ba90 <etharp_output+0x9c>
            return ERR_RTE;
 800bb2e:	f06f 0003 	mvn.w	r0, #3
 800bb32:	e7cd      	b.n	800bad0 <etharp_output+0xdc>
 800bb34:	240105b0 	.word	0x240105b0
 800bb38:	0800fc68 	.word	0x0800fc68
 800bb3c:	0800f794 	.word	0x0800f794
 800bb40:	0800f928 	.word	0x0800f928
 800bb44:	0800dd68 	.word	0x0800dd68
 800bb48:	0800f8b8 	.word	0x0800f8b8
 800bb4c:	0800dd58 	.word	0x0800dd58
 800bb50:	240106a0 	.word	0x240106a0

0800bb54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bb54:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bb56:	2301      	movs	r3, #1
{
 800bb58:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bb5a:	4c07      	ldr	r4, [pc, #28]	; (800bb78 <etharp_request+0x24>)
 800bb5c:	4a07      	ldr	r2, [pc, #28]	; (800bb7c <etharp_request+0x28>)
 800bb5e:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bb60:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bb62:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800bb66:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800bb6a:	9400      	str	r4, [sp, #0]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f7ff fc77 	bl	800b460 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800bb72:	b004      	add	sp, #16
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	bf00      	nop
 800bb78:	0800fc70 	.word	0x0800fc70
 800bb7c:	0800fc68 	.word	0x0800fc68

0800bb80 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb82:	460e      	mov	r6, r1
 800bb84:	b087      	sub	sp, #28
 800bb86:	4617      	mov	r7, r2
 800bb88:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bb8a:	2124      	movs	r1, #36	; 0x24
 800bb8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb90:	2022      	movs	r0, #34	; 0x22
 800bb92:	f7fb f9d7 	bl	8006f44 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800bb96:	b3a8      	cbz	r0, 800bc04 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bb98:	8943      	ldrh	r3, [r0, #10]
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	2b23      	cmp	r3, #35	; 0x23
 800bb9e:	d933      	bls.n	800bc08 <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bba0:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bba2:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800bba4:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800bba6:	2600      	movs	r6, #0
  icmphdr->code = code;
 800bba8:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800bbaa:	7126      	strb	r6, [r4, #4]
 800bbac:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 800bbae:	71a6      	strb	r6, [r4, #6]
 800bbb0:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	6859      	ldr	r1, [r3, #4]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	68df      	ldr	r7, [r3, #12]
 800bbba:	60a0      	str	r0, [r4, #8]
 800bbbc:	6167      	str	r7, [r4, #20]
 800bbbe:	60e1      	str	r1, [r4, #12]
 800bbc0:	6122      	str	r2, [r4, #16]
 800bbc2:	6918      	ldr	r0, [r3, #16]
 800bbc4:	6959      	ldr	r1, [r3, #20]
 800bbc6:	699a      	ldr	r2, [r3, #24]
 800bbc8:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bbca:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bbcc:	61e1      	str	r1, [r4, #28]
 800bbce:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800bbd4:	f000 f8d6 	bl	800bd84 <ip4_route>
#endif
  if (netif != NULL) {
 800bbd8:	4607      	mov	r7, r0
 800bbda:	b180      	cbz	r0, 800bbfe <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800bbdc:	8969      	ldrh	r1, [r5, #10]
 800bbde:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800bbe0:	70a6      	strb	r6, [r4, #2]
 800bbe2:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800bbe4:	f7fa f9c4 	bl	8005f70 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800bbe8:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800bbea:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800bbec:	aa05      	add	r2, sp, #20
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	9600      	str	r6, [sp, #0]
 800bbf4:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800bbf8:	23ff      	movs	r3, #255	; 0xff
 800bbfa:	f000 fa59 	bl	800c0b0 <ip4_output_if>
  }
  pbuf_free(q);
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f7fb f930 	bl	8006e64 <pbuf_free>
}
 800bc04:	b007      	add	sp, #28
 800bc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bc08:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <icmp_send_response+0x98>)
 800bc0a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc0e:	4903      	ldr	r1, [pc, #12]	; (800bc1c <icmp_send_response+0x9c>)
 800bc10:	4803      	ldr	r0, [pc, #12]	; (800bc20 <icmp_send_response+0xa0>)
 800bc12:	f001 f8ef 	bl	800cdf4 <iprintf>
 800bc16:	e7c3      	b.n	800bba0 <icmp_send_response+0x20>
 800bc18:	0800f934 	.word	0x0800f934
 800bc1c:	0800f96c 	.word	0x0800f96c
 800bc20:	0800dd68 	.word	0x0800dd68

0800bc24 <icmp_input>:
{
 800bc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800bc28:	4f4c      	ldr	r7, [pc, #304]	; (800bd5c <icmp_input+0x138>)
{
 800bc2a:	b087      	sub	sp, #28
 800bc2c:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800bc2e:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800bc32:	f898 4000 	ldrb.w	r4, [r8]
 800bc36:	f004 040f 	and.w	r4, r4, #15
 800bc3a:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800bc3c:	2c13      	cmp	r4, #19
 800bc3e:	d913      	bls.n	800bc68 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800bc40:	8943      	ldrh	r3, [r0, #10]
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d910      	bls.n	800bc68 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800bc46:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	2b08      	cmp	r3, #8
 800bc4c:	d10c      	bne.n	800bc68 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bc4e:	6978      	ldr	r0, [r7, #20]
 800bc50:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800bc54:	2be0      	cmp	r3, #224	; 0xe0
 800bc56:	d007      	beq.n	800bc68 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bc58:	460e      	mov	r6, r1
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	f000 fa3a 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
 800bc60:	b910      	cbnz	r0, 800bc68 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bc62:	892b      	ldrh	r3, [r5, #8]
 800bc64:	2b07      	cmp	r3, #7
 800bc66:	d805      	bhi.n	800bc74 <icmp_input+0x50>
  pbuf_free(p);
 800bc68:	4628      	mov	r0, r5
}
 800bc6a:	b007      	add	sp, #28
 800bc6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800bc70:	f7fb b8f8 	b.w	8006e64 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800bc74:	4628      	mov	r0, r5
 800bc76:	f7fa f981 	bl	8005f7c <inet_chksum_pbuf>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d1f4      	bne.n	800bc68 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bc7e:	f104 010e 	add.w	r1, r4, #14
 800bc82:	4628      	mov	r0, r5
 800bc84:	9105      	str	r1, [sp, #20]
 800bc86:	f7fb f84d 	bl	8006d24 <pbuf_add_header>
 800bc8a:	9905      	ldr	r1, [sp, #20]
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d04b      	beq.n	800bd28 <icmp_input+0x104>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800bc90:	892b      	ldrh	r3, [r5, #8]
 800bc92:	1919      	adds	r1, r3, r4
 800bc94:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800bc96:	428b      	cmp	r3, r1
 800bc98:	d8e6      	bhi.n	800bc68 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800bc9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc9e:	200e      	movs	r0, #14
 800bca0:	f7fb f950 	bl	8006f44 <pbuf_alloc>
        if (r == NULL) {
 800bca4:	4681      	mov	r9, r0
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d0de      	beq.n	800bc68 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bcaa:	8942      	ldrh	r2, [r0, #10]
 800bcac:	f104 0308 	add.w	r3, r4, #8
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d345      	bcc.n	800bd40 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800bcb4:	4641      	mov	r1, r8
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	6840      	ldr	r0, [r0, #4]
 800bcba:	f001 f9cc 	bl	800d056 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	4648      	mov	r0, r9
 800bcc2:	f7fb f863 	bl	8006d8c <pbuf_remove_header>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d13e      	bne.n	800bd48 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800bcca:	4629      	mov	r1, r5
 800bccc:	4648      	mov	r0, r9
 800bcce:	f7fb fac3 	bl	8007258 <pbuf_copy>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d134      	bne.n	800bd40 <icmp_input+0x11c>
        pbuf_free(p);
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	464d      	mov	r5, r9
 800bcda:	f7fb f8c3 	bl	8006e64 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800bcde:	4621      	mov	r1, r4
 800bce0:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800bce2:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800bce4:	f7fb f81e 	bl	8006d24 <pbuf_add_header>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d1bd      	bne.n	800bc68 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800bcec:	6869      	ldr	r1, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800bcee:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800bcfa:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bcfc:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bcfe:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800bd00:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800bd02:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800bd06:	bf8c      	ite	hi
 800bd08:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800bd0a:	3308      	addls	r3, #8
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bd10:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800bd12:	728a      	strb	r2, [r1, #10]
 800bd14:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bd16:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bd18:	2101      	movs	r1, #1
 800bd1a:	9200      	str	r2, [sp, #0]
 800bd1c:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800bd20:	490f      	ldr	r1, [pc, #60]	; (800bd60 <icmp_input+0x13c>)
 800bd22:	f000 f9c5 	bl	800c0b0 <ip4_output_if>
  pbuf_free(p);
 800bd26:	e79f      	b.n	800bc68 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f7fb f82f 	bl	8006d8c <pbuf_remove_header>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d0d5      	beq.n	800bcde <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bd32:	4b0c      	ldr	r3, [pc, #48]	; (800bd64 <icmp_input+0x140>)
 800bd34:	22c7      	movs	r2, #199	; 0xc7
 800bd36:	490c      	ldr	r1, [pc, #48]	; (800bd68 <icmp_input+0x144>)
 800bd38:	480c      	ldr	r0, [pc, #48]	; (800bd6c <icmp_input+0x148>)
 800bd3a:	f001 f85b 	bl	800cdf4 <iprintf>
          goto icmperr;
 800bd3e:	e793      	b.n	800bc68 <icmp_input+0x44>
          pbuf_free(r);
 800bd40:	4648      	mov	r0, r9
 800bd42:	f7fb f88f 	bl	8006e64 <pbuf_free>
          goto icmperr;
 800bd46:	e78f      	b.n	800bc68 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bd48:	4b06      	ldr	r3, [pc, #24]	; (800bd64 <icmp_input+0x140>)
 800bd4a:	22b6      	movs	r2, #182	; 0xb6
 800bd4c:	4908      	ldr	r1, [pc, #32]	; (800bd70 <icmp_input+0x14c>)
 800bd4e:	4807      	ldr	r0, [pc, #28]	; (800bd6c <icmp_input+0x148>)
 800bd50:	f001 f850 	bl	800cdf4 <iprintf>
          pbuf_free(r);
 800bd54:	4648      	mov	r0, r9
 800bd56:	f7fb f885 	bl	8006e64 <pbuf_free>
          goto icmperr;
 800bd5a:	e785      	b.n	800bc68 <icmp_input+0x44>
 800bd5c:	24009a84 	.word	0x24009a84
 800bd60:	24009a98 	.word	0x24009a98
 800bd64:	0800f934 	.word	0x0800f934
 800bd68:	0800f9d0 	.word	0x0800f9d0
 800bd6c:	0800dd68 	.word	0x0800dd68
 800bd70:	0800f998 	.word	0x0800f998

0800bd74 <icmp_dest_unreach>:
{
 800bd74:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800bd76:	2103      	movs	r1, #3
 800bd78:	f7ff bf02 	b.w	800bb80 <icmp_send_response>

0800bd7c <icmp_time_exceeded>:
{
 800bd7c:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800bd7e:	210b      	movs	r1, #11
 800bd80:	f7ff befe 	b.w	800bb80 <icmp_send_response>

0800bd84 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800bd88:	f7f7 fb7e 	bl	8003488 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800bd8c:	4b15      	ldr	r3, [pc, #84]	; (800bde4 <ip4_route+0x60>)
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	b1a0      	cbz	r0, 800bdbc <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bd92:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800bd96:	07d9      	lsls	r1, r3, #31
 800bd98:	d50d      	bpl.n	800bdb6 <ip4_route+0x32>
 800bd9a:	075a      	lsls	r2, r3, #29
 800bd9c:	d50b      	bpl.n	800bdb6 <ip4_route+0x32>
 800bd9e:	6842      	ldr	r2, [r0, #4]
 800bda0:	b14a      	cbz	r2, 800bdb6 <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800bda2:	6821      	ldr	r1, [r4, #0]
 800bda4:	6885      	ldr	r5, [r0, #8]
 800bda6:	404a      	eors	r2, r1
 800bda8:	422a      	tst	r2, r5
 800bdaa:	d016      	beq.n	800bdda <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800bdac:	079b      	lsls	r3, r3, #30
 800bdae:	d402      	bmi.n	800bdb6 <ip4_route+0x32>
 800bdb0:	68c3      	ldr	r3, [r0, #12]
 800bdb2:	4299      	cmp	r1, r3
 800bdb4:	d011      	beq.n	800bdda <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800bdb6:	6800      	ldr	r0, [r0, #0]
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d1ea      	bne.n	800bd92 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bdbc:	4b0a      	ldr	r3, [pc, #40]	; (800bde8 <ip4_route+0x64>)
 800bdbe:	6818      	ldr	r0, [r3, #0]
 800bdc0:	b158      	cbz	r0, 800bdda <ip4_route+0x56>
 800bdc2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800bdc6:	f003 0305 	and.w	r3, r3, #5
 800bdca:	2b05      	cmp	r3, #5
 800bdcc:	d106      	bne.n	800bddc <ip4_route+0x58>
 800bdce:	6843      	ldr	r3, [r0, #4]
 800bdd0:	b133      	cbz	r3, 800bde0 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bdd2:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bdd4:	2b7f      	cmp	r3, #127	; 0x7f
 800bdd6:	bf08      	it	eq
 800bdd8:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800bdda:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800bddc:	2000      	movs	r0, #0
}
 800bdde:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800bde0:	4618      	mov	r0, r3
}
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	2401053c 	.word	0x2401053c
 800bde8:	24010538 	.word	0x24010538

0800bdec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800bdf4:	f7f7 fb48 	bl	8003488 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bdf8:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800bdfa:	783b      	ldrb	r3, [r7, #0]
 800bdfc:	091a      	lsrs	r2, r3, #4
 800bdfe:	2a04      	cmp	r2, #4
 800be00:	f040 808d 	bne.w	800bf1e <ip4_input+0x132>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800be04:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800be08:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800be0a:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800be0e:	f7fa f86f 	bl	8005ef0 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800be12:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800be14:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800be16:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800be18:	4283      	cmp	r3, r0
 800be1a:	f200 8086 	bhi.w	800bf2a <ip4_input+0x13e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800be1e:	8963      	ldrh	r3, [r4, #10]
 800be20:	42ab      	cmp	r3, r5
 800be22:	d37c      	bcc.n	800bf1e <ip4_input+0x132>
 800be24:	8923      	ldrh	r3, [r4, #8]
 800be26:	4543      	cmp	r3, r8
 800be28:	d379      	bcc.n	800bf1e <ip4_input+0x132>
 800be2a:	2d13      	cmp	r5, #19
 800be2c:	d977      	bls.n	800bf1e <ip4_input+0x132>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800bfa4 <ip4_input+0x1b8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800be34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800be38:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800be3c:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800be44:	d076      	beq.n	800bf34 <ip4_input+0x148>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800be46:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800be4a:	07d2      	lsls	r2, r2, #31
 800be4c:	d503      	bpl.n	800be56 <ip4_input+0x6a>
 800be4e:	6872      	ldr	r2, [r6, #4]
 800be50:	2a00      	cmp	r2, #0
 800be52:	f040 8082 	bne.w	800bf5a <ip4_input+0x16e>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800be56:	b2db      	uxtb	r3, r3
 800be58:	2b7f      	cmp	r3, #127	; 0x7f
 800be5a:	f000 8088 	beq.w	800bf6e <ip4_input+0x182>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800be5e:	4b50      	ldr	r3, [pc, #320]	; (800bfa0 <ip4_input+0x1b4>)
 800be60:	681d      	ldr	r5, [r3, #0]
 800be62:	b92d      	cbnz	r5, 800be70 <ip4_input+0x84>
 800be64:	e083      	b.n	800bf6e <ip4_input+0x182>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800be66:	f000 f935 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800be6a:	b978      	cbnz	r0, 800be8c <ip4_input+0xa0>
        NETIF_FOREACH(netif) {
 800be6c:	682d      	ldr	r5, [r5, #0]
 800be6e:	b16d      	cbz	r5, 800be8c <ip4_input+0xa0>
          if (netif == inp) {
 800be70:	42ae      	cmp	r6, r5
 800be72:	d0fb      	beq.n	800be6c <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800be74:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800be78:	07db      	lsls	r3, r3, #31
 800be7a:	d5f7      	bpl.n	800be6c <ip4_input+0x80>
 800be7c:	686b      	ldr	r3, [r5, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0f4      	beq.n	800be6c <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800be82:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800be86:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800be88:	4283      	cmp	r3, r0
 800be8a:	d1ec      	bne.n	800be66 <ip4_input+0x7a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800be8c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800be90:	4631      	mov	r1, r6
 800be92:	f000 f91f 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
 800be96:	2800      	cmp	r0, #0
 800be98:	d141      	bne.n	800bf1e <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800be9a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800be9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bea2:	2be0      	cmp	r3, #224	; 0xe0
 800bea4:	d03b      	beq.n	800bf1e <ip4_input+0x132>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bea6:	b3d5      	cbz	r5, 800bf1e <ip4_input+0x132>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bea8:	88fb      	ldrh	r3, [r7, #6]
 800beaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d14b      	bne.n	800bf4a <ip4_input+0x15e>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800beb2:	f8c8 7008 	str.w	r7, [r8, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800beb6:	4649      	mov	r1, r9
 800beb8:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800beba:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800bebe:	783b      	ldrb	r3, [r7, #0]
 800bec0:	f003 030f 	and.w	r3, r3, #15
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800beca:	f7fa ff5f 	bl	8006d8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800bece:	7a7b      	ldrb	r3, [r7, #9]
 800bed0:	2b06      	cmp	r3, #6
 800bed2:	d05a      	beq.n	800bf8a <ip4_input+0x19e>
 800bed4:	2b11      	cmp	r3, #17
 800bed6:	d053      	beq.n	800bf80 <ip4_input+0x194>
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d04c      	beq.n	800bf76 <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bedc:	4629      	mov	r1, r5
 800bede:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800bee2:	f000 f8f7 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
 800bee6:	b968      	cbnz	r0, 800bf04 <ip4_input+0x118>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bee8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800beec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bef0:	2be0      	cmp	r3, #224	; 0xe0
 800bef2:	d007      	beq.n	800bf04 <ip4_input+0x118>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800bef4:	4649      	mov	r1, r9
 800bef6:	4620      	mov	r0, r4
 800bef8:	f7fa ff7c 	bl	8006df4 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800befc:	2102      	movs	r1, #2
 800befe:	4620      	mov	r0, r4
 800bf00:	f7ff ff38 	bl	800bd74 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800bf04:	4620      	mov	r0, r4
 800bf06:	f7fa ffad 	bl	8006e64 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800bf0a:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800bf0c:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 800bf10:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 800bf14:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());
 800bf18:	e9c8 3304 	strd	r3, r3, [r8, #16]

  return ERR_OK;
 800bf1c:	e002      	b.n	800bf24 <ip4_input+0x138>
    pbuf_free(p);
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7fa ffa0 	bl	8006e64 <pbuf_free>
}
 800bf24:	2000      	movs	r0, #0
 800bf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f7fb f8b7 	bl	80070a0 <pbuf_realloc>
 800bf32:	e774      	b.n	800be1e <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bf34:	f896 502d 	ldrb.w	r5, [r6, #45]	; 0x2d
 800bf38:	f015 0501 	ands.w	r5, r5, #1
 800bf3c:	d0a8      	beq.n	800be90 <ip4_input+0xa4>
 800bf3e:	6873      	ldr	r3, [r6, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	bf14      	ite	ne
 800bf44:	4635      	movne	r5, r6
 800bf46:	2500      	moveq	r5, #0
 800bf48:	e7a2      	b.n	800be90 <ip4_input+0xa4>
    p = ip4_reass(p);
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 f9ec 	bl	800c328 <ip4_reass>
    if (p == NULL) {
 800bf50:	4604      	mov	r4, r0
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d0e6      	beq.n	800bf24 <ip4_input+0x138>
    iphdr = (const struct ip_hdr *)p->payload;
 800bf56:	6847      	ldr	r7, [r0, #4]
 800bf58:	e7ab      	b.n	800beb2 <ip4_input+0xc6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d01a      	beq.n	800bf94 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bf5e:	4618      	mov	r0, r3
 800bf60:	4631      	mov	r1, r6
 800bf62:	f000 f8b7 	bl	800c0d4 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bf66:	b9b8      	cbnz	r0, 800bf98 <ip4_input+0x1ac>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800bf68:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bf6c:	e773      	b.n	800be56 <ip4_input+0x6a>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bf6e:	f8d8 0010 	ldr.w	r0, [r8, #16]
      netif = NULL;
 800bf72:	2500      	movs	r5, #0
 800bf74:	e78c      	b.n	800be90 <ip4_input+0xa4>
        icmp_input(p, inp);
 800bf76:	4631      	mov	r1, r6
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f7ff fe53 	bl	800bc24 <icmp_input>
        break;
 800bf7e:	e7c4      	b.n	800bf0a <ip4_input+0x11e>
        udp_input(p, inp);
 800bf80:	4631      	mov	r1, r6
 800bf82:	4620      	mov	r0, r4
 800bf84:	f7fe fe3e 	bl	800ac04 <udp_input>
        break;
 800bf88:	e7bf      	b.n	800bf0a <ip4_input+0x11e>
        tcp_input(p, inp);
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f7fd f89f 	bl	80090d0 <tcp_input>
        break;
 800bf92:	e7ba      	b.n	800bf0a <ip4_input+0x11e>
 800bf94:	4635      	mov	r5, r6
 800bf96:	e77b      	b.n	800be90 <ip4_input+0xa4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bf98:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800bf9c:	4635      	mov	r5, r6
 800bf9e:	e777      	b.n	800be90 <ip4_input+0xa4>
 800bfa0:	2401053c 	.word	0x2401053c
 800bfa4:	24009a84 	.word	0x24009a84

0800bfa8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800bfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfac:	4604      	mov	r4, r0
 800bfae:	b083      	sub	sp, #12
 800bfb0:	4699      	mov	r9, r3
 800bfb2:	460f      	mov	r7, r1
 800bfb4:	4616      	mov	r6, r2
 800bfb6:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 800bfba:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 800bfbe:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800bfc2:	f7f7 fa61 	bl	8003488 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bfc6:	7ba3      	ldrb	r3, [r4, #14]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d13d      	bne.n	800c048 <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bfcc:	2e00      	cmp	r6, #0
 800bfce:	d044      	beq.n	800c05a <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800bfd0:	2114      	movs	r1, #20
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f7fa fea6 	bl	8006d24 <pbuf_add_header>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d159      	bne.n	800c090 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bfdc:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800bfde:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bfe0:	2b13      	cmp	r3, #19
 800bfe2:	d942      	bls.n	800c06a <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bfe4:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bfe8:	2245      	movs	r2, #69	; 0x45
    IPH_PROTO_SET(iphdr, proto);
 800bfea:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800bfee:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bff0:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800bff2:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800bff6:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bff8:	8920      	ldrh	r0, [r4, #8]
 800bffa:	f7f9 ff79 	bl	8005ef0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bffe:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c0ac <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800c002:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c004:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c006:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800c00a:	71ab      	strb	r3, [r5, #6]
 800c00c:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c00e:	f7f9 ff6f 	bl	8005ef0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c012:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c016:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800c018:	3301      	adds	r3, #1
 800c01a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800c01e:	b367      	cbz	r7, 800c07a <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c024:	2300      	movs	r3, #0
 800c026:	72ab      	strb	r3, [r5, #10]
 800c028:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c02a:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800c02e:	b113      	cbz	r3, 800c036 <ip4_output_if_src+0x8e>
 800c030:	8922      	ldrh	r2, [r4, #8]
 800c032:	429a      	cmp	r2, r3
 800c034:	d824      	bhi.n	800c080 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c036:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c03a:	4632      	mov	r2, r6
 800c03c:	4621      	mov	r1, r4
 800c03e:	4640      	mov	r0, r8
 800c040:	4798      	blx	r3
}
 800c042:	b003      	add	sp, #12
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c048:	4b13      	ldr	r3, [pc, #76]	; (800c098 <ip4_output_if_src+0xf0>)
 800c04a:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c04e:	4913      	ldr	r1, [pc, #76]	; (800c09c <ip4_output_if_src+0xf4>)
 800c050:	4813      	ldr	r0, [pc, #76]	; (800c0a0 <ip4_output_if_src+0xf8>)
 800c052:	f000 fecf 	bl	800cdf4 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800c056:	2e00      	cmp	r6, #0
 800c058:	d1ba      	bne.n	800bfd0 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800c05a:	8963      	ldrh	r3, [r4, #10]
 800c05c:	2b13      	cmp	r3, #19
 800c05e:	d917      	bls.n	800c090 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c060:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800c062:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800c068:	e7df      	b.n	800c02a <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c06a:	4b0b      	ldr	r3, [pc, #44]	; (800c098 <ip4_output_if_src+0xf0>)
 800c06c:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c070:	490c      	ldr	r1, [pc, #48]	; (800c0a4 <ip4_output_if_src+0xfc>)
 800c072:	480b      	ldr	r0, [pc, #44]	; (800c0a0 <ip4_output_if_src+0xf8>)
 800c074:	f000 febe 	bl	800cdf4 <iprintf>
 800c078:	e7b4      	b.n	800bfe4 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c07a:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <ip4_output_if_src+0x100>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	e7d0      	b.n	800c022 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800c080:	4632      	mov	r2, r6
 800c082:	4641      	mov	r1, r8
 800c084:	4620      	mov	r0, r4
 800c086:	f000 fb83 	bl	800c790 <ip4_frag>
}
 800c08a:	b003      	add	sp, #12
 800c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800c090:	f06f 0001 	mvn.w	r0, #1
 800c094:	e7d5      	b.n	800c042 <ip4_output_if_src+0x9a>
 800c096:	bf00      	nop
 800c098:	0800fa04 	.word	0x0800fa04
 800c09c:	0800fa38 	.word	0x0800fa38
 800c0a0:	0800dd68 	.word	0x0800dd68
 800c0a4:	0800fa44 	.word	0x0800fa44
 800c0a8:	0800fa74 	.word	0x0800fa74
 800c0ac:	240106a2 	.word	0x240106a2

0800c0b0 <ip4_output_if>:
{
 800c0b0:	b4f0      	push	{r4, r5, r6, r7}
 800c0b2:	9c06      	ldr	r4, [sp, #24]
 800c0b4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800c0b8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c0bc:	b11a      	cbz	r2, 800c0c6 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800c0be:	b109      	cbz	r1, 800c0c4 <ip4_output_if+0x14>
 800c0c0:	680f      	ldr	r7, [r1, #0]
 800c0c2:	b907      	cbnz	r7, 800c0c6 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800c0c4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c0c6:	9504      	str	r5, [sp, #16]
 800c0c8:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800c0cc:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c0ce:	f7ff bf6b 	b.w	800bfa8 <ip4_output_if_src>
 800c0d2:	bf00      	nop

0800c0d4 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c0d4:	1e43      	subs	r3, r0, #1
 800c0d6:	3303      	adds	r3, #3
 800c0d8:	d814      	bhi.n	800c104 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c0da:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800c0de:	f013 0302 	ands.w	r3, r3, #2
 800c0e2:	d00d      	beq.n	800c100 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c0e4:	684b      	ldr	r3, [r1, #4]
 800c0e6:	4283      	cmp	r3, r0
 800c0e8:	d00f      	beq.n	800c10a <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c0ea:	688a      	ldr	r2, [r1, #8]
 800c0ec:	4043      	eors	r3, r0
 800c0ee:	4213      	tst	r3, r2
 800c0f0:	d10b      	bne.n	800c10a <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c0f2:	43d3      	mvns	r3, r2
 800c0f4:	ea20 0002 	bic.w	r0, r0, r2
    return 1;
 800c0f8:	1ac3      	subs	r3, r0, r3
 800c0fa:	fab3 f383 	clz	r3, r3
 800c0fe:	095b      	lsrs	r3, r3, #5
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800c100:	4618      	mov	r0, r3
 800c102:	4770      	bx	lr
    return 1;
 800c104:	2301      	movs	r3, #1
}
 800c106:	4618      	mov	r0, r3
 800c108:	4770      	bx	lr
    return 0;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	4770      	bx	lr

0800c110 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c110:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c112:	4604      	mov	r4, r0
 800c114:	b148      	cbz	r0, 800c12a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800c116:	6960      	ldr	r0, [r4, #20]
 800c118:	b108      	cbz	r0, 800c11e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800c11a:	f7fa fea3 	bl	8006e64 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800c11e:	4621      	mov	r1, r4
 800c120:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800c122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800c126:	f7fa bad7 	b.w	80066d8 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c12a:	4b04      	ldr	r3, [pc, #16]	; (800c13c <ipfrag_free_pbuf_custom+0x2c>)
 800c12c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800c130:	4903      	ldr	r1, [pc, #12]	; (800c140 <ipfrag_free_pbuf_custom+0x30>)
 800c132:	4804      	ldr	r0, [pc, #16]	; (800c144 <ipfrag_free_pbuf_custom+0x34>)
 800c134:	f000 fe5e 	bl	800cdf4 <iprintf>
 800c138:	e7ed      	b.n	800c116 <ipfrag_free_pbuf_custom+0x6>
 800c13a:	bf00      	nop
 800c13c:	0800fa78 	.word	0x0800fa78
 800c140:	0800fab4 	.word	0x0800fab4
 800c144:	0800dd68 	.word	0x0800dd68

0800c148 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c148:	4281      	cmp	r1, r0
{
 800c14a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14e:	4606      	mov	r6, r0
 800c150:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c152:	d075      	beq.n	800c240 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 800c154:	b147      	cbz	r7, 800c168 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	42b3      	cmp	r3, r6
 800c15a:	d005      	beq.n	800c168 <ip_reass_free_complete_datagram+0x20>
 800c15c:	4b40      	ldr	r3, [pc, #256]	; (800c260 <ip_reass_free_complete_datagram+0x118>)
 800c15e:	22ad      	movs	r2, #173	; 0xad
 800c160:	4940      	ldr	r1, [pc, #256]	; (800c264 <ip_reass_free_complete_datagram+0x11c>)
 800c162:	4841      	ldr	r0, [pc, #260]	; (800c268 <ip_reass_free_complete_datagram+0x120>)
 800c164:	f000 fe46 	bl	800cdf4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c168:	6875      	ldr	r5, [r6, #4]
 800c16a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800c16c:	889a      	ldrh	r2, [r3, #4]
 800c16e:	2a00      	cmp	r2, #0
 800c170:	d047      	beq.n	800c202 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 800c172:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c176:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800c260 <ip_reass_free_complete_datagram+0x118>
 800c17a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800c280 <ip_reass_free_complete_datagram+0x138>
 800c17e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800c268 <ip_reass_free_complete_datagram+0x120>
 800c182:	e005      	b.n	800c190 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 800c184:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800c186:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800c188:	f7fa fe6c 	bl	8006e64 <pbuf_free>
  while (p != NULL) {
 800c18c:	b1b4      	cbz	r4, 800c1bc <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800c18e:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 800c190:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 800c192:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 800c194:	f7fa ffdc 	bl	8007150 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c198:	4458      	add	r0, fp
 800c19a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c19e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c1a2:	dbef      	blt.n	800c184 <ip_reass_free_complete_datagram+0x3c>
 800c1a4:	4653      	mov	r3, sl
 800c1a6:	22cc      	movs	r2, #204	; 0xcc
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	f000 fe22 	bl	800cdf4 <iprintf>
    pbuf_free(pcur);
 800c1b0:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800c1b2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800c1b4:	f7fa fe56 	bl	8006e64 <pbuf_free>
  while (p != NULL) {
 800c1b8:	2c00      	cmp	r4, #0
 800c1ba:	d1e8      	bne.n	800c18e <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 800c1bc:	4b2b      	ldr	r3, [pc, #172]	; (800c26c <ip_reass_free_complete_datagram+0x124>)
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	4296      	cmp	r6, r2
 800c1c2:	d03a      	beq.n	800c23a <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c1c4:	2f00      	cmp	r7, #0
 800c1c6:	d042      	beq.n	800c24e <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 800c1c8:	6833      	ldr	r3, [r6, #0]
 800c1ca:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c1cc:	4c28      	ldr	r4, [pc, #160]	; (800c270 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 800c1ce:	4631      	mov	r1, r6
 800c1d0:	2004      	movs	r0, #4
 800c1d2:	f7fa fa81 	bl	80066d8 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c1d6:	8823      	ldrh	r3, [r4, #0]
 800c1d8:	455b      	cmp	r3, fp
 800c1da:	d305      	bcc.n	800c1e8 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c1dc:	eba3 030b 	sub.w	r3, r3, fp
}
 800c1e0:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c1e2:	8023      	strh	r3, [r4, #0]
}
 800c1e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c1e8:	4b1d      	ldr	r3, [pc, #116]	; (800c260 <ip_reass_free_complete_datagram+0x118>)
 800c1ea:	22d2      	movs	r2, #210	; 0xd2
 800c1ec:	4921      	ldr	r1, [pc, #132]	; (800c274 <ip_reass_free_complete_datagram+0x12c>)
 800c1ee:	481e      	ldr	r0, [pc, #120]	; (800c268 <ip_reass_free_complete_datagram+0x120>)
 800c1f0:	f000 fe00 	bl	800cdf4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c1f4:	8823      	ldrh	r3, [r4, #0]
}
 800c1f6:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c1f8:	eba3 030b 	sub.w	r3, r3, fp
 800c1fc:	8023      	strh	r3, [r4, #0]
}
 800c1fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 800c202:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c204:	6930      	ldr	r0, [r6, #16]
 800c206:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 800c208:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c20a:	68f4      	ldr	r4, [r6, #12]
 800c20c:	68b2      	ldr	r2, [r6, #8]
 800c20e:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c210:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c212:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c214:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c216:	601a      	str	r2, [r3, #0]
 800c218:	605c      	str	r4, [r3, #4]
 800c21a:	69b2      	ldr	r2, [r6, #24]
 800c21c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c21e:	f7ff fdad 	bl	800bd7c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c222:	4628      	mov	r0, r5
 800c224:	f7fa ff94 	bl	8007150 <pbuf_clen>
 800c228:	4683      	mov	fp, r0
    pbuf_free(p);
 800c22a:	4628      	mov	r0, r5
 800c22c:	f7fa fe1a 	bl	8006e64 <pbuf_free>
  p = ipr->p;
 800c230:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 800c232:	2d00      	cmp	r5, #0
 800c234:	d0c2      	beq.n	800c1bc <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800c236:	686b      	ldr	r3, [r5, #4]
 800c238:	e79d      	b.n	800c176 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 800c23a:	6832      	ldr	r2, [r6, #0]
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	e7c5      	b.n	800c1cc <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <ip_reass_free_complete_datagram+0x118>)
 800c242:	22ab      	movs	r2, #171	; 0xab
 800c244:	490c      	ldr	r1, [pc, #48]	; (800c278 <ip_reass_free_complete_datagram+0x130>)
 800c246:	4808      	ldr	r0, [pc, #32]	; (800c268 <ip_reass_free_complete_datagram+0x120>)
 800c248:	f000 fdd4 	bl	800cdf4 <iprintf>
 800c24c:	e782      	b.n	800c154 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c24e:	4b04      	ldr	r3, [pc, #16]	; (800c260 <ip_reass_free_complete_datagram+0x118>)
 800c250:	f240 1245 	movw	r2, #325	; 0x145
 800c254:	4909      	ldr	r1, [pc, #36]	; (800c27c <ip_reass_free_complete_datagram+0x134>)
 800c256:	4804      	ldr	r0, [pc, #16]	; (800c268 <ip_reass_free_complete_datagram+0x120>)
 800c258:	f000 fdcc 	bl	800cdf4 <iprintf>
 800c25c:	e7b4      	b.n	800c1c8 <ip_reass_free_complete_datagram+0x80>
 800c25e:	bf00      	nop
 800c260:	0800fa78 	.word	0x0800fa78
 800c264:	0800facc 	.word	0x0800facc
 800c268:	0800dd68 	.word	0x0800dd68
 800c26c:	240106a8 	.word	0x240106a8
 800c270:	240106a4 	.word	0x240106a4
 800c274:	0800fb1c 	.word	0x0800fb1c
 800c278:	0800fac0 	.word	0x0800fac0
 800c27c:	0800fb00 	.word	0x0800fb00
 800c280:	0800fae0 	.word	0x0800fae0

0800c284 <ip_reass_remove_oldest_datagram>:
{
 800c284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 800c288:	2700      	movs	r7, #0
 800c28a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800c2f4 <ip_reass_remove_oldest_datagram+0x70>
{
 800c28e:	4605      	mov	r5, r0
 800c290:	460e      	mov	r6, r1
    r = reassdatagrams;
 800c292:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800c296:	b1f3      	cbz	r3, 800c2d6 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 800c298:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c29a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 800c29e:	4621      	mov	r1, r4
    prev = NULL;
 800c2a0:	46a4      	mov	ip, r4
    oldest = NULL;
 800c2a2:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c2a4:	695a      	ldr	r2, [r3, #20]
 800c2a6:	4572      	cmp	r2, lr
 800c2a8:	d018      	beq.n	800c2dc <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 800c2aa:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800c2ac:	b120      	cbz	r0, 800c2b8 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 800c2ae:	f893 901f 	ldrb.w	r9, [r3, #31]
 800c2b2:	7fc2      	ldrb	r2, [r0, #31]
 800c2b4:	4591      	cmp	r9, r2
 800c2b6:	d801      	bhi.n	800c2bc <ip_reass_remove_oldest_datagram+0x38>
 800c2b8:	4661      	mov	r1, ip
 800c2ba:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	469c      	mov	ip, r3
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	d1ee      	bne.n	800c2a4 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 800c2c6:	b110      	cbz	r0, 800c2ce <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c2c8:	f7ff ff3e 	bl	800c148 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800c2cc:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c2ce:	42b7      	cmp	r7, r6
 800c2d0:	da01      	bge.n	800c2d6 <ip_reass_remove_oldest_datagram+0x52>
 800c2d2:	2c01      	cmp	r4, #1
 800c2d4:	dcdd      	bgt.n	800c292 <ip_reass_remove_oldest_datagram+0xe>
}
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c2dc:	699a      	ldr	r2, [r3, #24]
 800c2de:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c2e2:	454a      	cmp	r2, r9
 800c2e4:	d1e1      	bne.n	800c2aa <ip_reass_remove_oldest_datagram+0x26>
 800c2e6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800c2ea:	88aa      	ldrh	r2, [r5, #4]
 800c2ec:	4591      	cmp	r9, r2
 800c2ee:	d1dc      	bne.n	800c2aa <ip_reass_remove_oldest_datagram+0x26>
 800c2f0:	e7e4      	b.n	800c2bc <ip_reass_remove_oldest_datagram+0x38>
 800c2f2:	bf00      	nop
 800c2f4:	240106a8 	.word	0x240106a8

0800c2f8 <ip_reass_tmr>:
{
 800c2f8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	; (800c324 <ip_reass_tmr+0x2c>)
 800c2fc:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800c2fe:	b140      	cbz	r0, 800c312 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 800c300:	2400      	movs	r4, #0
    if (r->timer > 0) {
 800c302:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 800c304:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 800c306:	b12b      	cbz	r3, 800c314 <ip_reass_tmr+0x1c>
 800c308:	4604      	mov	r4, r0
      r->timer--;
 800c30a:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 800c30c:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800c30e:	2800      	cmp	r0, #0
 800c310:	d1f7      	bne.n	800c302 <ip_reass_tmr+0xa>
}
 800c312:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 800c314:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800c316:	4621      	mov	r1, r4
 800c318:	f7ff ff16 	bl	800c148 <ip_reass_free_complete_datagram>
      r = r->next;
 800c31c:	4628      	mov	r0, r5
  while (r != NULL) {
 800c31e:	2800      	cmp	r0, #0
 800c320:	d1ef      	bne.n	800c302 <ip_reass_tmr+0xa>
 800c322:	e7f6      	b.n	800c312 <ip_reass_tmr+0x1a>
 800c324:	240106a8 	.word	0x240106a8

0800c328 <ip4_reass>:
{
 800c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800c32c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800c330:	b085      	sub	sp, #20
 800c332:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c334:	f89a 3000 	ldrb.w	r3, [sl]
 800c338:	f003 030f 	and.w	r3, r3, #15
 800c33c:	2b05      	cmp	r3, #5
 800c33e:	f040 8089 	bne.w	800c454 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c342:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800c346:	f7f9 fdd3 	bl	8005ef0 <lwip_htons>
 800c34a:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c34c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800c350:	f7f9 fdce 	bl	8005ef0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800c354:	f89a 3000 	ldrb.w	r3, [sl]
 800c358:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800c35c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800c360:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c364:	d376      	bcc.n	800c454 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 800c366:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c368:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800c654 <ip4_reass+0x32c>
  clen = pbuf_clen(p);
 800c36c:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 800c36e:	b29b      	uxth	r3, r3
 800c370:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 800c372:	f7fa feed 	bl	8007150 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c376:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 800c37a:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c37c:	4403      	add	r3, r0
 800c37e:	2b0a      	cmp	r3, #10
 800c380:	f300 80e5 	bgt.w	800c54e <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c384:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800c658 <ip4_reass+0x330>
 800c388:	f8d9 4000 	ldr.w	r4, [r9]
 800c38c:	2c00      	cmp	r4, #0
 800c38e:	f000 80ec 	beq.w	800c56a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c392:	f8da 200c 	ldr.w	r2, [sl, #12]
 800c396:	e003      	b.n	800c3a0 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c398:	6824      	ldr	r4, [r4, #0]
 800c39a:	2c00      	cmp	r4, #0
 800c39c:	f000 80e5 	beq.w	800c56a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c3a0:	6963      	ldr	r3, [r4, #20]
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d1f8      	bne.n	800c398 <ip4_reass+0x70>
 800c3a6:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c3aa:	69a1      	ldr	r1, [r4, #24]
 800c3ac:	4299      	cmp	r1, r3
 800c3ae:	d1f3      	bne.n	800c398 <ip4_reass+0x70>
 800c3b0:	89a1      	ldrh	r1, [r4, #12]
 800c3b2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800c3b6:	4299      	cmp	r1, r3
 800c3b8:	d1ee      	bne.n	800c398 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c3ba:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800c3be:	f7f9 fd97 	bl	8005ef0 <lwip_htons>
 800c3c2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f000 80a9 	beq.w	800c51e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c3cc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c3d0:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 800c3d4:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c3d8:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	d108      	bne.n	800c3f2 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800c3e0:	9b00      	ldr	r3, [sp, #0]
 800c3e2:	18f3      	adds	r3, r6, r3
 800c3e4:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c3e6:	429e      	cmp	r6, r3
 800c3e8:	d812      	bhi.n	800c410 <ip4_reass+0xe8>
 800c3ea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d80e      	bhi.n	800c410 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c3f2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c3f6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800c3fa:	f7f9 fd79 	bl	8005ef0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800c3fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c402:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800c406:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800c40a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c40e:	d229      	bcs.n	800c464 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 800c410:	6866      	ldr	r6, [r4, #4]
 800c412:	b9fe      	cbnz	r6, 800c454 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c414:	f8d9 3000 	ldr.w	r3, [r9]
 800c418:	42a3      	cmp	r3, r4
 800c41a:	d014      	beq.n	800c446 <ip4_reass+0x11e>
 800c41c:	4b89      	ldr	r3, [pc, #548]	; (800c644 <ip4_reass+0x31c>)
 800c41e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c422:	4989      	ldr	r1, [pc, #548]	; (800c648 <ip4_reass+0x320>)
 800c424:	4889      	ldr	r0, [pc, #548]	; (800c64c <ip4_reass+0x324>)
 800c426:	f000 fce5 	bl	800cdf4 <iprintf>
  if (reassdatagrams == ipr) {
 800c42a:	f8d9 3000 	ldr.w	r3, [r9]
 800c42e:	429c      	cmp	r4, r3
 800c430:	d009      	beq.n	800c446 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c432:	4b84      	ldr	r3, [pc, #528]	; (800c644 <ip4_reass+0x31c>)
 800c434:	f240 1245 	movw	r2, #325	; 0x145
 800c438:	4985      	ldr	r1, [pc, #532]	; (800c650 <ip4_reass+0x328>)
 800c43a:	4884      	ldr	r0, [pc, #528]	; (800c64c <ip4_reass+0x324>)
 800c43c:	f000 fcda 	bl	800cdf4 <iprintf>
    prev->next = ipr->next;
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	6033      	str	r3, [r6, #0]
 800c444:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 800c446:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800c448:	4621      	mov	r1, r4
 800c44a:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 800c44c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800c450:	f7fa f942 	bl	80066d8 <memp_free>
  pbuf_free(p);
 800c454:	4628      	mov	r0, r5
  return NULL;
 800c456:	2600      	movs	r6, #0
  pbuf_free(p);
 800c458:	f7fa fd04 	bl	8006e64 <pbuf_free>
}
 800c45c:	4630      	mov	r0, r6
 800c45e:	b005      	add	sp, #20
 800c460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 800c464:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c466:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 800c46a:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c46e:	f7f9 fd3f 	bl	8005ef0 <lwip_htons>
 800c472:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c476:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c47a:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c47c:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 800c480:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 800c484:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 800c488:	f8ab 3006 	strh.w	r3, [fp, #6]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	4619      	mov	r1, r3
 800c490:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 800c492:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 800c494:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 800c496:	f88b 3000 	strb.w	r3, [fp]
 800c49a:	f88b 3001 	strb.w	r3, [fp, #1]
 800c49e:	f88b 3002 	strb.w	r3, [fp, #2]
 800c4a2:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 800c4a6:	d8b3      	bhi.n	800c410 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800c4a8:	6861      	ldr	r1, [r4, #4]
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	f000 80be 	beq.w	800c62c <ip4_reass+0x304>
  int valid = 1;
 800c4b0:	f04f 0a01 	mov.w	sl, #1
 800c4b4:	4694      	mov	ip, r2
 800c4b6:	e00e      	b.n	800c4d6 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 800c4b8:	d0cc      	beq.n	800c454 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 800c4ba:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800c4be:	45f4      	cmp	ip, lr
 800c4c0:	d3c8      	bcc.n	800c454 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 800c4c2:	b122      	cbz	r2, 800c4ce <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 800c4c4:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 800c4c6:	4282      	cmp	r2, r0
 800c4c8:	bf18      	it	ne
 800c4ca:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800c4ce:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800c4d0:	2900      	cmp	r1, #0
 800c4d2:	f000 8084 	beq.w	800c5de <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800c4da:	8898      	ldrh	r0, [r3, #4]
 800c4dc:	4584      	cmp	ip, r0
 800c4de:	d2eb      	bcs.n	800c4b8 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	f8cb 1000 	str.w	r1, [fp]
 800c4e6:	4662      	mov	r2, ip
 800c4e8:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d060      	beq.n	800c5b0 <ip4_reass+0x288>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c4ee:	88db      	ldrh	r3, [r3, #6]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d3af      	bcc.n	800c454 <ip4_reass+0x12c>
 800c4f4:	9903      	ldr	r1, [sp, #12]
 800c4f6:	4281      	cmp	r1, r0
 800c4f8:	d8ac      	bhi.n	800c454 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 800c4fa:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 800c4fc:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800c500:	d05b      	beq.n	800c5ba <ip4_reass+0x292>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c502:	9b01      	ldr	r3, [sp, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 8084 	beq.w	800c612 <ip4_reass+0x2ea>
 800c50a:	7fa3      	ldrb	r3, [r4, #30]
 800c50c:	07db      	lsls	r3, r3, #31
 800c50e:	d45c      	bmi.n	800c5ca <ip4_reass+0x2a2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c510:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 800c514:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c516:	443b      	add	r3, r7
 800c518:	f8a8 3000 	strh.w	r3, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c51c:	e79e      	b.n	800c45c <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c51e:	89e0      	ldrh	r0, [r4, #14]
 800c520:	f7f9 fce6 	bl	8005ef0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c524:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800c528:	2800      	cmp	r0, #0
 800c52a:	f43f af4f 	beq.w	800c3cc <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c52e:	f8da 3000 	ldr.w	r3, [sl]
 800c532:	f8da 0004 	ldr.w	r0, [sl, #4]
 800c536:	f8da 1008 	ldr.w	r1, [sl, #8]
 800c53a:	f8da 200c 	ldr.w	r2, [sl, #12]
 800c53e:	60a3      	str	r3, [r4, #8]
 800c540:	60e0      	str	r0, [r4, #12]
 800c542:	6121      	str	r1, [r4, #16]
 800c544:	6162      	str	r2, [r4, #20]
 800c546:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c54a:	61a3      	str	r3, [r4, #24]
 800c54c:	e73e      	b.n	800c3cc <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c54e:	4601      	mov	r1, r0
 800c550:	4650      	mov	r0, sl
 800c552:	f7ff fe97 	bl	800c284 <ip_reass_remove_oldest_datagram>
 800c556:	2800      	cmp	r0, #0
 800c558:	f43f af7c 	beq.w	800c454 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c55c:	f8b8 3000 	ldrh.w	r3, [r8]
 800c560:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c562:	2b0a      	cmp	r3, #10
 800c564:	f77f af0e 	ble.w	800c384 <ip4_reass+0x5c>
 800c568:	e774      	b.n	800c454 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c56a:	2004      	movs	r0, #4
 800c56c:	f7fa f86e 	bl	800664c <memp_malloc>
  if (ipr == NULL) {
 800c570:	4604      	mov	r4, r0
 800c572:	b178      	cbz	r0, 800c594 <ip4_reass+0x26c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c574:	2300      	movs	r3, #0
 800c576:	61e3      	str	r3, [r4, #28]
 800c578:	60a3      	str	r3, [r4, #8]
 800c57a:	60e3      	str	r3, [r4, #12]
 800c57c:	6123      	str	r3, [r4, #16]
 800c57e:	6163      	str	r3, [r4, #20]
 800c580:	61a3      	str	r3, [r4, #24]
 800c582:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 800c584:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 800c588:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 800c58c:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 800c58e:	230f      	movs	r3, #15
 800c590:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c592:	e7cc      	b.n	800c52e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c594:	4639      	mov	r1, r7
 800c596:	4650      	mov	r0, sl
 800c598:	f7ff fe74 	bl	800c284 <ip_reass_remove_oldest_datagram>
 800c59c:	4287      	cmp	r7, r0
 800c59e:	f73f af59 	bgt.w	800c454 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c5a2:	2004      	movs	r0, #4
 800c5a4:	f7fa f852 	bl	800664c <memp_malloc>
    if (ipr == NULL)
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d1e2      	bne.n	800c574 <ip4_reass+0x24c>
 800c5ae:	e751      	b.n	800c454 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 800c5b0:	9b03      	ldr	r3, [sp, #12]
 800c5b2:	4283      	cmp	r3, r0
 800c5b4:	f63f af4e 	bhi.w	800c454 <ip4_reass+0x12c>
        ipr->p = new_p;
 800c5b8:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c5ba:	9b01      	ldr	r3, [sp, #4]
 800c5bc:	b19b      	cbz	r3, 800c5e6 <ip4_reass+0x2be>
 800c5be:	7fa3      	ldrb	r3, [r4, #30]
 800c5c0:	07d9      	lsls	r1, r3, #31
 800c5c2:	d5a5      	bpl.n	800c510 <ip4_reass+0x1e8>
    if (valid) {
 800c5c4:	f1ba 0f00 	cmp.w	sl, #0
 800c5c8:	d138      	bne.n	800c63c <ip4_reass+0x314>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c5ca:	f8b8 3000 	ldrh.w	r3, [r8]
 800c5ce:	443b      	add	r3, r7
 800c5d0:	f8a8 3000 	strh.w	r3, [r8]
  return NULL;
 800c5d4:	2600      	movs	r6, #0
}
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	b005      	add	sp, #20
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 800c5de:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 800c5e0:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c5e2:	d18e      	bne.n	800c502 <ip4_reass+0x1da>
 800c5e4:	e7e9      	b.n	800c5ba <ip4_reass+0x292>
    if (valid) {
 800c5e6:	f1ba 0f00 	cmp.w	sl, #0
 800c5ea:	d012      	beq.n	800c612 <ip4_reass+0x2ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c5ec:	6863      	ldr	r3, [r4, #4]
 800c5ee:	b183      	cbz	r3, 800c612 <ip4_reass+0x2ea>
 800c5f0:	6859      	ldr	r1, [r3, #4]
 800c5f2:	888b      	ldrh	r3, [r1, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d031      	beq.n	800c65c <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c5f8:	f8b8 3000 	ldrh.w	r3, [r8]
 800c5fc:	443b      	add	r3, r7
 800c5fe:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800c602:	9b01      	ldr	r3, [sp, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1e5      	bne.n	800c5d4 <ip4_reass+0x2ac>
 800c608:	e008      	b.n	800c61c <ip4_reass+0x2f4>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c60a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800c60e:	4659      	mov	r1, fp
 800c610:	b323      	cbz	r3, 800c65c <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c612:	f8b8 3000 	ldrh.w	r3, [r8]
 800c616:	443b      	add	r3, r7
 800c618:	f8a8 3000 	strh.w	r3, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c61c:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800c61e:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c620:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800c624:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c626:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800c628:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c62a:	e7d3      	b.n	800c5d4 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c62c:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 800c62e:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c630:	2b00      	cmp	r3, #0
 800c632:	d0ea      	beq.n	800c60a <ip4_reass+0x2e2>
 800c634:	7fa3      	ldrb	r3, [r4, #30]
 800c636:	07da      	lsls	r2, r3, #31
 800c638:	f57f af6a 	bpl.w	800c510 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c63c:	6863      	ldr	r3, [r4, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d0c3      	beq.n	800c5ca <ip4_reass+0x2a2>
 800c642:	e7d5      	b.n	800c5f0 <ip4_reass+0x2c8>
 800c644:	0800fa78 	.word	0x0800fa78
 800c648:	0800fb90 	.word	0x0800fb90
 800c64c:	0800dd68 	.word	0x0800dd68
 800c650:	0800fb00 	.word	0x0800fb00
 800c654:	240106a4 	.word	0x240106a4
 800c658:	240106a8 	.word	0x240106a8
        q = iprh->next_pbuf;
 800c65c:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 800c660:	b153      	cbz	r3, 800c678 <ip4_reass+0x350>
 800c662:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 800c664:	4610      	mov	r0, r2
 800c666:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800c668:	88c0      	ldrh	r0, [r0, #6]
 800c66a:	8893      	ldrh	r3, [r2, #4]
 800c66c:	4298      	cmp	r0, r3
 800c66e:	d1c3      	bne.n	800c5f8 <ip4_reass+0x2d0>
          q = iprh->next_pbuf;
 800c670:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1f6      	bne.n	800c664 <ip4_reass+0x33c>
 800c676:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 800c678:	9b02      	ldr	r3, [sp, #8]
 800c67a:	428b      	cmp	r3, r1
 800c67c:	d110      	bne.n	800c6a0 <ip4_reass+0x378>
 800c67e:	4b3e      	ldr	r3, [pc, #248]	; (800c778 <ip4_reass+0x450>)
 800c680:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c684:	493d      	ldr	r1, [pc, #244]	; (800c77c <ip4_reass+0x454>)
 800c686:	483e      	ldr	r0, [pc, #248]	; (800c780 <ip4_reass+0x458>)
 800c688:	f000 fbb4 	bl	800cdf4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c68c:	9b02      	ldr	r3, [sp, #8]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	b133      	cbz	r3, 800c6a0 <ip4_reass+0x378>
 800c692:	4b39      	ldr	r3, [pc, #228]	; (800c778 <ip4_reass+0x450>)
 800c694:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800c698:	493a      	ldr	r1, [pc, #232]	; (800c784 <ip4_reass+0x45c>)
 800c69a:	4839      	ldr	r0, [pc, #228]	; (800c780 <ip4_reass+0x458>)
 800c69c:	f000 fbaa 	bl	800cdf4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c6a0:	f8b8 3000 	ldrh.w	r3, [r8]
 800c6a4:	443b      	add	r3, r7
 800c6a6:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800c6aa:	9b01      	ldr	r3, [sp, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d156      	bne.n	800c75e <ip4_reass+0x436>
    u16_t datagram_len = (u16_t)(offset + len);
 800c6b0:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c6b2:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800c6b4:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c6b6:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800c6ba:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c6bc:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800c6be:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c6c0:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c6c2:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c6c4:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c6c6:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c6c8:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c6ca:	68a3      	ldr	r3, [r4, #8]
 800c6cc:	6921      	ldr	r1, [r4, #16]
 800c6ce:	6962      	ldr	r2, [r4, #20]
 800c6d0:	6075      	str	r5, [r6, #4]
 800c6d2:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c6d4:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c6d6:	60f2      	str	r2, [r6, #12]
 800c6d8:	6033      	str	r3, [r6, #0]
 800c6da:	69a3      	ldr	r3, [r4, #24]
 800c6dc:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c6de:	f7f9 fc07 	bl	8005ef0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800c6e2:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c6e4:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c6e6:	71b3      	strb	r3, [r6, #6]
 800c6e8:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c6ea:	72b3      	strb	r3, [r6, #10]
 800c6ec:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800c6ee:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800c6f0:	b15d      	cbz	r5, 800c70a <ip4_reass+0x3e2>
      iprh = (struct ip_reass_helper *)r->payload;
 800c6f2:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	2114      	movs	r1, #20
 800c6f8:	f7fa fb48 	bl	8006d8c <pbuf_remove_header>
      pbuf_cat(p, r);
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7fa fd50 	bl	80071a4 <pbuf_cat>
      r = iprh->next_pbuf;
 800c704:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800c706:	2d00      	cmp	r5, #0
 800c708:	d1f3      	bne.n	800c6f2 <ip4_reass+0x3ca>
    if (ipr == reassdatagrams) {
 800c70a:	f8d9 5000 	ldr.w	r5, [r9]
 800c70e:	42a5      	cmp	r5, r4
 800c710:	d005      	beq.n	800c71e <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c712:	b335      	cbz	r5, 800c762 <ip4_reass+0x43a>
        if (ipr_prev->next == ipr) {
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	42a3      	cmp	r3, r4
 800c718:	d014      	beq.n	800c744 <ip4_reass+0x41c>
 800c71a:	461d      	mov	r5, r3
 800c71c:	e7f9      	b.n	800c712 <ip4_reass+0x3ea>
    reassdatagrams = ipr->next;
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800c724:	4621      	mov	r1, r4
 800c726:	2004      	movs	r0, #4
 800c728:	f7f9 ffd6 	bl	80066d8 <memp_free>
    clen = pbuf_clen(p);
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7fa fd0f 	bl	8007150 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c732:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 800c736:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c738:	4283      	cmp	r3, r0
 800c73a:	d306      	bcc.n	800c74a <ip4_reass+0x422>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c73c:	1b1b      	subs	r3, r3, r4
 800c73e:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 800c742:	e68b      	b.n	800c45c <ip4_reass+0x134>
    prev->next = ipr->next;
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	602b      	str	r3, [r5, #0]
 800c748:	e7ec      	b.n	800c724 <ip4_reass+0x3fc>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c74a:	4b0b      	ldr	r3, [pc, #44]	; (800c778 <ip4_reass+0x450>)
 800c74c:	f240 229b 	movw	r2, #667	; 0x29b
 800c750:	490d      	ldr	r1, [pc, #52]	; (800c788 <ip4_reass+0x460>)
 800c752:	480b      	ldr	r0, [pc, #44]	; (800c780 <ip4_reass+0x458>)
 800c754:	f000 fb4e 	bl	800cdf4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c758:	f8b8 3000 	ldrh.w	r3, [r8]
 800c75c:	e7ee      	b.n	800c73c <ip4_reass+0x414>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c75e:	8ba0      	ldrh	r0, [r4, #28]
 800c760:	e7ae      	b.n	800c6c0 <ip4_reass+0x398>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c762:	4b05      	ldr	r3, [pc, #20]	; (800c778 <ip4_reass+0x450>)
 800c764:	f240 1245 	movw	r2, #325	; 0x145
 800c768:	4908      	ldr	r1, [pc, #32]	; (800c78c <ip4_reass+0x464>)
 800c76a:	4805      	ldr	r0, [pc, #20]	; (800c780 <ip4_reass+0x458>)
 800c76c:	f000 fb42 	bl	800cdf4 <iprintf>
    prev->next = ipr->next;
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	602b      	str	r3, [r5, #0]
 800c774:	deff      	udf	#255	; 0xff
 800c776:	bf00      	nop
 800c778:	0800fa78 	.word	0x0800fa78
 800c77c:	0800fb40 	.word	0x0800fb40
 800c780:	0800dd68 	.word	0x0800dd68
 800c784:	0800fb50 	.word	0x0800fb50
 800c788:	0800fb74 	.word	0x0800fb74
 800c78c:	0800fb00 	.word	0x0800fb00

0800c790 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c794:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 800c796:	b08f      	sub	sp, #60	; 0x3c
 800c798:	4606      	mov	r6, r0
 800c79a:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c79c:	f1b3 0214 	subs.w	r2, r3, #20
{
 800c7a0:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c7a2:	bf48      	it	mi
 800c7a4:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c7a8:	6843      	ldr	r3, [r0, #4]
 800c7aa:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c7ac:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c7b0:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c7b2:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c7b4:	f003 030f 	and.w	r3, r3, #15
 800c7b8:	2b05      	cmp	r3, #5
 800c7ba:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800c7be:	f040 80e5 	bne.w	800c98c <ip4_frag+0x1fc>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c7c2:	8943      	ldrh	r3, [r0, #10]
 800c7c4:	2b13      	cmp	r3, #19
 800c7c6:	f240 80e4 	bls.w	800c992 <ip4_frag+0x202>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c7ca:	9b04      	ldr	r3, [sp, #16]
 800c7cc:	88d8      	ldrh	r0, [r3, #6]
 800c7ce:	f7f9 fb8f 	bl	8005ef0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c7d2:	8933      	ldrh	r3, [r6, #8]
  ofo = tmp & IP_OFFMASK;
 800c7d4:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800c7d8:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 800c7da:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 800c7dc:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	920d      	str	r2, [sp, #52]	; 0x34
 800c7e4:	9305      	str	r3, [sp, #20]

  while (left) {
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f000 8098 	beq.w	800c91c <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c7ec:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 800c7ee:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c7f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c9b4 <ip4_frag+0x224>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c7f4:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c7f6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800c9bc <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c7fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c802:	2114      	movs	r1, #20
 800c804:	200e      	movs	r0, #14
 800c806:	f7fa fb9d 	bl	8006f44 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c80c:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 800c80e:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c810:	4293      	cmp	r3, r2
 800c812:	bf28      	it	cs
 800c814:	4613      	movcs	r3, r2
 800c816:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 800c818:	2800      	cmp	r0, #0
 800c81a:	f000 80b4 	beq.w	800c986 <ip4_frag+0x1f6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c81e:	8943      	ldrh	r3, [r0, #10]
 800c820:	2b13      	cmp	r3, #19
 800c822:	f240 808c 	bls.w	800c93e <ip4_frag+0x1ae>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c826:	9904      	ldr	r1, [sp, #16]
 800c828:	9b03      	ldr	r3, [sp, #12]
 800c82a:	680a      	ldr	r2, [r1, #0]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	684f      	ldr	r7, [r1, #4]
 800c830:	6888      	ldr	r0, [r1, #8]
 800c832:	68c9      	ldr	r1, [r1, #12]
 800c834:	605f      	str	r7, [r3, #4]
 800c836:	60d9      	str	r1, [r3, #12]
 800c838:	9904      	ldr	r1, [sp, #16]
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	6098      	str	r0, [r3, #8]
 800c83e:	690a      	ldr	r2, [r1, #16]
 800c840:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c842:	9b03      	ldr	r3, [sp, #12]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 800c848:	9b06      	ldr	r3, [sp, #24]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d034      	beq.n	800c8b8 <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c84e:	9302      	str	r3, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 800c850:	8973      	ldrh	r3, [r6, #10]
 800c852:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c854:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 800c856:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c858:	d369      	bcc.n	800c92e <ip4_frag+0x19e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c85a:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c85c:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c85e:	429c      	cmp	r4, r3
 800c860:	bf28      	it	cs
 800c862:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c864:	2c00      	cmp	r4, #0
 800c866:	d05b      	beq.n	800c920 <ip4_frag+0x190>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c868:	f7f9 fef0 	bl	800664c <memp_malloc>
 800c86c:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c86e:	2241      	movs	r2, #65	; 0x41
 800c870:	4621      	mov	r1, r4
 800c872:	2000      	movs	r0, #0
      if (pcr == NULL) {
 800c874:	f1bb 0f00 	cmp.w	fp, #0
 800c878:	d06c      	beq.n	800c954 <ip4_frag+0x1c4>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c87a:	9401      	str	r4, [sp, #4]
 800c87c:	465b      	mov	r3, fp
 800c87e:	6877      	ldr	r7, [r6, #4]
 800c880:	eb07 0c05 	add.w	ip, r7, r5
 800c884:	f8cd c000 	str.w	ip, [sp]
 800c888:	f7fa fa30 	bl	8006cec <pbuf_alloced_custom>
 800c88c:	4682      	mov	sl, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800c88e:	4630      	mov	r0, r6
      if (newpbuf == NULL) {
 800c890:	f1ba 0f00 	cmp.w	sl, #0
 800c894:	d068      	beq.n	800c968 <ip4_frag+0x1d8>
      pbuf_ref(p);
 800c896:	f7fa fc67 	bl	8007168 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c89a:	4b43      	ldr	r3, [pc, #268]	; (800c9a8 <ip4_frag+0x218>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c89c:	4651      	mov	r1, sl
 800c89e:	9803      	ldr	r0, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c8a0:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 800c8a4:	f8cb 6014 	str.w	r6, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 800c8a8:	f7fa fc7c 	bl	80071a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c8ac:	9b02      	ldr	r3, [sp, #8]
 800c8ae:	1b1f      	subs	r7, r3, r4
 800c8b0:	b2bb      	uxth	r3, r7
 800c8b2:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d133      	bne.n	800c920 <ip4_frag+0x190>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800c8ba:	4425      	add	r5, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c8bc:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 800c8be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800c8c0:	b2ad      	uxth	r5, r5
    tmp = (IP_OFFMASK & (ofo));
 800c8c2:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 800c8c6:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 800c8c8:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	dd3f      	ble.n	800c94e <ip4_frag+0x1be>
 800c8ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d13c      	bne.n	800c94e <ip4_frag+0x1be>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c8d4:	f7f9 fb0c 	bl	8005ef0 <lwip_htons>
 800c8d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c8da:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c8dc:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c8de:	f103 0014 	add.w	r0, r3, #20
 800c8e2:	b280      	uxth	r0, r0
 800c8e4:	f7f9 fb04 	bl	8005ef0 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800c8e8:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c8ea:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c8ec:	72bb      	strb	r3, [r7, #10]
 800c8ee:	72fb      	strb	r3, [r7, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8f2:	9f03      	ldr	r7, [sp, #12]
 800c8f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8f6:	4639      	mov	r1, r7
 800c8f8:	6943      	ldr	r3, [r0, #20]
 800c8fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c8fc:	4638      	mov	r0, r7
 800c8fe:	f7fa fab1 	bl	8006e64 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c902:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800c906:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 800c908:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 800c90c:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 800c90e:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 800c910:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 800c912:	b292      	uxth	r2, r2
 800c914:	9207      	str	r2, [sp, #28]
  while (left) {
 800c916:	2b00      	cmp	r3, #0
 800c918:	f47f af71 	bne.w	800c7fe <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c91c:	2000      	movs	r0, #0
 800c91e:	e020      	b.n	800c962 <ip4_frag+0x1d2>
        p = p->next;
 800c920:	6836      	ldr	r6, [r6, #0]
  u16_t newpbuflen = 0;
 800c922:	2500      	movs	r5, #0
      u16_t plen = (u16_t)(p->len - poff);
 800c924:	8973      	ldrh	r3, [r6, #10]
 800c926:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c928:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 800c92a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c92c:	d295      	bcs.n	800c85a <ip4_frag+0xca>
 800c92e:	4643      	mov	r3, r8
 800c930:	f240 322d 	movw	r2, #813	; 0x32d
 800c934:	491d      	ldr	r1, [pc, #116]	; (800c9ac <ip4_frag+0x21c>)
 800c936:	4648      	mov	r0, r9
 800c938:	f000 fa5c 	bl	800cdf4 <iprintf>
 800c93c:	e78d      	b.n	800c85a <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c93e:	4643      	mov	r3, r8
 800c940:	f44f 7249 	mov.w	r2, #804	; 0x324
 800c944:	491a      	ldr	r1, [pc, #104]	; (800c9b0 <ip4_frag+0x220>)
 800c946:	4648      	mov	r0, r9
 800c948:	f000 fa54 	bl	800cdf4 <iprintf>
 800c94c:	e76b      	b.n	800c826 <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 800c94e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800c952:	e7bf      	b.n	800c8d4 <ip4_frag+0x144>
        pbuf_free(rambuf);
 800c954:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c958:	4658      	mov	r0, fp
 800c95a:	f7fa fa83 	bl	8006e64 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c95e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c962:	b00f      	add	sp, #60	; 0x3c
 800c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 800c968:	46da      	mov	sl, fp
 800c96a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c96e:	2005      	movs	r0, #5
 800c970:	4651      	mov	r1, sl
 800c972:	f7f9 feb1 	bl	80066d8 <memp_free>
        pbuf_free(rambuf);
 800c976:	4658      	mov	r0, fp
 800c978:	f7fa fa74 	bl	8006e64 <pbuf_free>
  return ERR_MEM;
 800c97c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c980:	b00f      	add	sp, #60	; 0x3c
 800c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800c986:	f04f 30ff 	mov.w	r0, #4294967295
 800c98a:	e7ea      	b.n	800c962 <ip4_frag+0x1d2>
    return ERR_VAL;
 800c98c:	f06f 0005 	mvn.w	r0, #5
 800c990:	e7e7      	b.n	800c962 <ip4_frag+0x1d2>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c992:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <ip4_frag+0x224>)
 800c994:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c998:	4907      	ldr	r1, [pc, #28]	; (800c9b8 <ip4_frag+0x228>)
 800c99a:	4808      	ldr	r0, [pc, #32]	; (800c9bc <ip4_frag+0x22c>)
 800c99c:	f000 fa2a 	bl	800cdf4 <iprintf>
 800c9a0:	f06f 0005 	mvn.w	r0, #5
 800c9a4:	e7dd      	b.n	800c962 <ip4_frag+0x1d2>
 800c9a6:	bf00      	nop
 800c9a8:	0800c111 	.word	0x0800c111
 800c9ac:	0800fbec 	.word	0x0800fbec
 800c9b0:	0800fbcc 	.word	0x0800fbcc
 800c9b4:	0800fa78 	.word	0x0800fa78
 800c9b8:	0800fbb0 	.word	0x0800fbb0
 800c9bc:	0800dd68 	.word	0x0800dd68

0800c9c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800c9c6:	f7f6 fd5f 	bl	8003488 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800c9ca:	8963      	ldrh	r3, [r4, #10]
 800c9cc:	2b0e      	cmp	r3, #14
 800c9ce:	d91a      	bls.n	800ca06 <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800c9d0:	7be3      	ldrb	r3, [r4, #15]
 800c9d2:	b91b      	cbnz	r3, 800c9dc <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 800c9d4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800c9d8:	3301      	adds	r3, #1
 800c9da:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c9dc:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c9de:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800c9e0:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800c9e2:	07d9      	lsls	r1, r3, #31
 800c9e4:	d50a      	bpl.n	800c9fc <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d030      	beq.n	800ca4c <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c9ea:	2206      	movs	r2, #6
 800c9ec:	491d      	ldr	r1, [pc, #116]	; (800ca64 <ethernet_input+0xa4>)
 800c9ee:	f000 fa56 	bl	800ce9e <memcmp>
 800c9f2:	b918      	cbnz	r0, 800c9fc <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c9f4:	7b63      	ldrb	r3, [r4, #13]
 800c9f6:	f043 0308 	orr.w	r3, r3, #8
 800c9fa:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800c9fc:	2e08      	cmp	r6, #8
 800c9fe:	d016      	beq.n	800ca2e <ethernet_input+0x6e>
 800ca00:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ca04:	d004      	beq.n	800ca10 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ca06:	4620      	mov	r0, r4
 800ca08:	f7fa fa2c 	bl	8006e64 <pbuf_free>
  return ERR_OK;
}
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ca10:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800ca14:	071b      	lsls	r3, r3, #28
 800ca16:	d5f6      	bpl.n	800ca06 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ca18:	210e      	movs	r1, #14
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f7fa f9b6 	bl	8006d8c <pbuf_remove_header>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d1f0      	bne.n	800ca06 <ethernet_input+0x46>
        etharp_input(p, netif);
 800ca24:	4629      	mov	r1, r5
 800ca26:	4620      	mov	r0, r4
 800ca28:	f7fe fe72 	bl	800b710 <etharp_input>
      break;
 800ca2c:	e7ee      	b.n	800ca0c <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ca2e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800ca32:	071a      	lsls	r2, r3, #28
 800ca34:	d5e7      	bpl.n	800ca06 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ca36:	210e      	movs	r1, #14
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f7fa f9a7 	bl	8006d8c <pbuf_remove_header>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d1e1      	bne.n	800ca06 <ethernet_input+0x46>
        ip4_input(p, netif);
 800ca42:	4629      	mov	r1, r5
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7ff f9d1 	bl	800bdec <ip4_input>
      break;
 800ca4a:	e7df      	b.n	800ca0c <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ca4c:	7843      	ldrb	r3, [r0, #1]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1d4      	bne.n	800c9fc <ethernet_input+0x3c>
 800ca52:	7883      	ldrb	r3, [r0, #2]
 800ca54:	2b5e      	cmp	r3, #94	; 0x5e
 800ca56:	d1d1      	bne.n	800c9fc <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 800ca58:	7b63      	ldrb	r3, [r4, #13]
 800ca5a:	f043 0310 	orr.w	r3, r3, #16
 800ca5e:	7363      	strb	r3, [r4, #13]
 800ca60:	e7cc      	b.n	800c9fc <ethernet_input+0x3c>
 800ca62:	bf00      	nop
 800ca64:	0800fc68 	.word	0x0800fc68

0800ca68 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ca70:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800ca74:	4616      	mov	r6, r2
 800ca76:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800ca78:	f7f9 fa3a 	bl	8005ef0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ca7c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800ca7e:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ca80:	4620      	mov	r0, r4
 800ca82:	f7fa f94f 	bl	8006d24 <pbuf_add_header>
 800ca86:	b9f0      	cbnz	r0, 800cac6 <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800ca88:	f7f6 fcfe 	bl	8003488 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800ca8c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800ca8e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	600b      	str	r3, [r1, #0]
 800ca96:	88bb      	ldrh	r3, [r7, #4]
 800ca98:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ca9a:	6833      	ldr	r3, [r6, #0]
 800ca9c:	f8c1 3006 	str.w	r3, [r1, #6]
 800caa0:	88b3      	ldrh	r3, [r6, #4]
 800caa2:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800caa4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800caa8:	2b06      	cmp	r3, #6
 800caaa:	d006      	beq.n	800caba <ethernet_output+0x52>
 800caac:	4b08      	ldr	r3, [pc, #32]	; (800cad0 <ethernet_output+0x68>)
 800caae:	f44f 7299 	mov.w	r2, #306	; 0x132
 800cab2:	4908      	ldr	r1, [pc, #32]	; (800cad4 <ethernet_output+0x6c>)
 800cab4:	4808      	ldr	r0, [pc, #32]	; (800cad8 <ethernet_output+0x70>)
 800cab6:	f000 f99d 	bl	800cdf4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800caba:	69ab      	ldr	r3, [r5, #24]
 800cabc:	4621      	mov	r1, r4
 800cabe:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800cac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800cac4:	4718      	bx	r3
}
 800cac6:	f06f 0001 	mvn.w	r0, #1
 800caca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cace:	bf00      	nop
 800cad0:	0800fbfc 	.word	0x0800fbfc
 800cad4:	0800fc34 	.word	0x0800fc34
 800cad8:	0800dd68 	.word	0x0800dd68

0800cadc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800cadc:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800cade:	2200      	movs	r2, #0
 800cae0:	2104      	movs	r1, #4
{
 800cae2:	b510      	push	{r4, lr}
 800cae4:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7f6 feda 	bl	80038a0 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800caec:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800caf0:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 800caf2:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 800caf4:	4258      	negs	r0, r3
 800caf6:	bd10      	pop	{r4, pc}

0800caf8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800caf8:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800cafa:	2300      	movs	r3, #0
{
 800cafc:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800cafe:	6800      	ldr	r0, [r0, #0]
{
 800cb00:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800cb02:	461a      	mov	r2, r3
 800cb04:	a901      	add	r1, sp, #4
 800cb06:	f7f6 ff09 	bl	800391c <osMessageQueuePut>
 800cb0a:	3800      	subs	r0, #0
 800cb0c:	bf18      	it	ne
 800cb0e:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800cb10:	4240      	negs	r0, r0
 800cb12:	b003      	add	sp, #12
 800cb14:	f85d fb04 	ldr.w	pc, [sp], #4

0800cb18 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	4615      	mov	r5, r2
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	4606      	mov	r6, r0
 800cb20:	9101      	str	r1, [sp, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800cb22:	f7f6 fd23 	bl	800356c <osKernelGetTickCount>
#endif
  if(timeout != 0)
 800cb26:	9901      	ldr	r1, [sp, #4]
  uint32_t starttime = osKernelGetTickCount();
 800cb28:	4604      	mov	r4, r0
  if(timeout != 0)
 800cb2a:	b14d      	cbz	r5, 800cb40 <sys_arch_mbox_fetch+0x28>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800cb2c:	462b      	mov	r3, r5
 800cb2e:	2200      	movs	r2, #0
 800cb30:	6830      	ldr	r0, [r6, #0]
 800cb32:	f7f6 ff35 	bl	80039a0 <osMessageQueueGet>
    if (status == osOK)
 800cb36:	b148      	cbz	r0, 800cb4c <sys_arch_mbox_fetch+0x34>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800cb38:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800cb3c:	b002      	add	sp, #8
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800cb40:	f04f 33ff 	mov.w	r3, #4294967295
 800cb44:	462a      	mov	r2, r5
 800cb46:	6830      	ldr	r0, [r6, #0]
 800cb48:	f7f6 ff2a 	bl	80039a0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800cb4c:	f7f6 fd0e 	bl	800356c <osKernelGetTickCount>
 800cb50:	1b00      	subs	r0, r0, r4
}
 800cb52:	b002      	add	sp, #8
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	bf00      	nop

0800cb58 <sys_mbox_valid>:
 800cb58:	6800      	ldr	r0, [r0, #0]
 800cb5a:	3800      	subs	r0, #0
 800cb5c:	bf18      	it	ne
 800cb5e:	2001      	movne	r0, #1
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop

0800cb64 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800cb64:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800cb66:	2000      	movs	r0, #0
 800cb68:	f7f6 fd64 	bl	8003634 <osMutexNew>
 800cb6c:	4b01      	ldr	r3, [pc, #4]	; (800cb74 <sys_init+0x10>)
 800cb6e:	6018      	str	r0, [r3, #0]
#endif
}
 800cb70:	bd08      	pop	{r3, pc}
 800cb72:	bf00      	nop
 800cb74:	240106ac 	.word	0x240106ac

0800cb78 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	f7f6 fd59 	bl	8003634 <osMutexNew>
#endif

  if(*mutex == NULL)
 800cb82:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 800cb86:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 800cb88:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800cb8a:	4258      	negs	r0, r3
 800cb8c:	bd10      	pop	{r4, pc}
 800cb8e:	bf00      	nop

0800cb90 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800cb90:	f04f 31ff 	mov.w	r1, #4294967295
 800cb94:	6800      	ldr	r0, [r0, #0]
 800cb96:	f7f6 bd8d 	b.w	80036b4 <osMutexAcquire>
 800cb9a:	bf00      	nop

0800cb9c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800cb9c:	6800      	ldr	r0, [r0, #0]
 800cb9e:	f7f6 bdad 	b.w	80036fc <osMutexRelease>
 800cba2:	bf00      	nop

0800cba4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800cba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cba6:	b08b      	sub	sp, #44	; 0x2c
 800cba8:	4617      	mov	r7, r2
 800cbaa:	460e      	mov	r6, r1
 800cbac:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800cbae:	2220      	movs	r2, #32
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	a802      	add	r0, sp, #8
{
 800cbb4:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 800cbb6:	f000 f982 	bl	800cebe <memset>
 800cbba:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800cbbc:	4639      	mov	r1, r7
 800cbbe:	aa01      	add	r2, sp, #4
 800cbc0:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 800cbc2:	9501      	str	r5, [sp, #4]
 800cbc4:	9406      	str	r4, [sp, #24]
 800cbc6:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 800cbc8:	f7f6 fcd8 	bl	800357c <osThreadNew>
#endif
}
 800cbcc:	b00b      	add	sp, #44	; 0x2c
 800cbce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbd0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800cbd0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800cbd2:	4b04      	ldr	r3, [pc, #16]	; (800cbe4 <sys_arch_protect+0x14>)
 800cbd4:	f04f 31ff 	mov.w	r1, #4294967295
 800cbd8:	6818      	ldr	r0, [r3, #0]
 800cbda:	f7f6 fd6b 	bl	80036b4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800cbde:	2001      	movs	r0, #1
 800cbe0:	bd08      	pop	{r3, pc}
 800cbe2:	bf00      	nop
 800cbe4:	240106ac 	.word	0x240106ac

0800cbe8 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800cbe8:	4b01      	ldr	r3, [pc, #4]	; (800cbf0 <sys_arch_unprotect+0x8>)
 800cbea:	6818      	ldr	r0, [r3, #0]
 800cbec:	f7f6 bd86 	b.w	80036fc <osMutexRelease>
 800cbf0:	240106ac 	.word	0x240106ac

0800cbf4 <rand>:
 800cbf4:	4b16      	ldr	r3, [pc, #88]	; (800cc50 <rand+0x5c>)
 800cbf6:	b510      	push	{r4, lr}
 800cbf8:	681c      	ldr	r4, [r3, #0]
 800cbfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cbfc:	b9b3      	cbnz	r3, 800cc2c <rand+0x38>
 800cbfe:	2018      	movs	r0, #24
 800cc00:	f000 faa2 	bl	800d148 <malloc>
 800cc04:	4602      	mov	r2, r0
 800cc06:	6320      	str	r0, [r4, #48]	; 0x30
 800cc08:	b920      	cbnz	r0, 800cc14 <rand+0x20>
 800cc0a:	4b12      	ldr	r3, [pc, #72]	; (800cc54 <rand+0x60>)
 800cc0c:	4812      	ldr	r0, [pc, #72]	; (800cc58 <rand+0x64>)
 800cc0e:	2152      	movs	r1, #82	; 0x52
 800cc10:	f000 fa30 	bl	800d074 <__assert_func>
 800cc14:	4911      	ldr	r1, [pc, #68]	; (800cc5c <rand+0x68>)
 800cc16:	4b12      	ldr	r3, [pc, #72]	; (800cc60 <rand+0x6c>)
 800cc18:	e9c0 1300 	strd	r1, r3, [r0]
 800cc1c:	4b11      	ldr	r3, [pc, #68]	; (800cc64 <rand+0x70>)
 800cc1e:	6083      	str	r3, [r0, #8]
 800cc20:	230b      	movs	r3, #11
 800cc22:	8183      	strh	r3, [r0, #12]
 800cc24:	2100      	movs	r1, #0
 800cc26:	2001      	movs	r0, #1
 800cc28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cc2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cc2e:	480e      	ldr	r0, [pc, #56]	; (800cc68 <rand+0x74>)
 800cc30:	690b      	ldr	r3, [r1, #16]
 800cc32:	694c      	ldr	r4, [r1, #20]
 800cc34:	4a0d      	ldr	r2, [pc, #52]	; (800cc6c <rand+0x78>)
 800cc36:	4358      	muls	r0, r3
 800cc38:	fb02 0004 	mla	r0, r2, r4, r0
 800cc3c:	fba3 3202 	umull	r3, r2, r3, r2
 800cc40:	3301      	adds	r3, #1
 800cc42:	eb40 0002 	adc.w	r0, r0, r2
 800cc46:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cc4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cc4e:	bd10      	pop	{r4, pc}
 800cc50:	24000088 	.word	0x24000088
 800cc54:	0800fc76 	.word	0x0800fc76
 800cc58:	0800fc8d 	.word	0x0800fc8d
 800cc5c:	abcd330e 	.word	0xabcd330e
 800cc60:	e66d1234 	.word	0xe66d1234
 800cc64:	0005deec 	.word	0x0005deec
 800cc68:	5851f42d 	.word	0x5851f42d
 800cc6c:	4c957f2d 	.word	0x4c957f2d

0800cc70 <std>:
 800cc70:	2300      	movs	r3, #0
 800cc72:	b510      	push	{r4, lr}
 800cc74:	4604      	mov	r4, r0
 800cc76:	e9c0 3300 	strd	r3, r3, [r0]
 800cc7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc7e:	6083      	str	r3, [r0, #8]
 800cc80:	8181      	strh	r1, [r0, #12]
 800cc82:	6643      	str	r3, [r0, #100]	; 0x64
 800cc84:	81c2      	strh	r2, [r0, #14]
 800cc86:	6183      	str	r3, [r0, #24]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	2208      	movs	r2, #8
 800cc8c:	305c      	adds	r0, #92	; 0x5c
 800cc8e:	f000 f916 	bl	800cebe <memset>
 800cc92:	4b0d      	ldr	r3, [pc, #52]	; (800ccc8 <std+0x58>)
 800cc94:	6263      	str	r3, [r4, #36]	; 0x24
 800cc96:	4b0d      	ldr	r3, [pc, #52]	; (800cccc <std+0x5c>)
 800cc98:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc9a:	4b0d      	ldr	r3, [pc, #52]	; (800ccd0 <std+0x60>)
 800cc9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc9e:	4b0d      	ldr	r3, [pc, #52]	; (800ccd4 <std+0x64>)
 800cca0:	6323      	str	r3, [r4, #48]	; 0x30
 800cca2:	4b0d      	ldr	r3, [pc, #52]	; (800ccd8 <std+0x68>)
 800cca4:	6224      	str	r4, [r4, #32]
 800cca6:	429c      	cmp	r4, r3
 800cca8:	d006      	beq.n	800ccb8 <std+0x48>
 800ccaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ccae:	4294      	cmp	r4, r2
 800ccb0:	d002      	beq.n	800ccb8 <std+0x48>
 800ccb2:	33d0      	adds	r3, #208	; 0xd0
 800ccb4:	429c      	cmp	r4, r3
 800ccb6:	d105      	bne.n	800ccc4 <std+0x54>
 800ccb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ccbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc0:	f000 b9c6 	b.w	800d050 <__retarget_lock_init_recursive>
 800ccc4:	bd10      	pop	{r4, pc}
 800ccc6:	bf00      	nop
 800ccc8:	0800ce19 	.word	0x0800ce19
 800cccc:	0800ce3b 	.word	0x0800ce3b
 800ccd0:	0800ce73 	.word	0x0800ce73
 800ccd4:	0800ce97 	.word	0x0800ce97
 800ccd8:	240106b0 	.word	0x240106b0

0800ccdc <stdio_exit_handler>:
 800ccdc:	4a02      	ldr	r2, [pc, #8]	; (800cce8 <stdio_exit_handler+0xc>)
 800ccde:	4903      	ldr	r1, [pc, #12]	; (800ccec <stdio_exit_handler+0x10>)
 800cce0:	4803      	ldr	r0, [pc, #12]	; (800ccf0 <stdio_exit_handler+0x14>)
 800cce2:	f000 b869 	b.w	800cdb8 <_fwalk_sglue>
 800cce6:	bf00      	nop
 800cce8:	24000030 	.word	0x24000030
 800ccec:	0800d965 	.word	0x0800d965
 800ccf0:	2400003c 	.word	0x2400003c

0800ccf4 <cleanup_stdio>:
 800ccf4:	6841      	ldr	r1, [r0, #4]
 800ccf6:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <cleanup_stdio+0x34>)
 800ccf8:	4299      	cmp	r1, r3
 800ccfa:	b510      	push	{r4, lr}
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	d001      	beq.n	800cd04 <cleanup_stdio+0x10>
 800cd00:	f000 fe30 	bl	800d964 <_fflush_r>
 800cd04:	68a1      	ldr	r1, [r4, #8]
 800cd06:	4b09      	ldr	r3, [pc, #36]	; (800cd2c <cleanup_stdio+0x38>)
 800cd08:	4299      	cmp	r1, r3
 800cd0a:	d002      	beq.n	800cd12 <cleanup_stdio+0x1e>
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f000 fe29 	bl	800d964 <_fflush_r>
 800cd12:	68e1      	ldr	r1, [r4, #12]
 800cd14:	4b06      	ldr	r3, [pc, #24]	; (800cd30 <cleanup_stdio+0x3c>)
 800cd16:	4299      	cmp	r1, r3
 800cd18:	d004      	beq.n	800cd24 <cleanup_stdio+0x30>
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd20:	f000 be20 	b.w	800d964 <_fflush_r>
 800cd24:	bd10      	pop	{r4, pc}
 800cd26:	bf00      	nop
 800cd28:	240106b0 	.word	0x240106b0
 800cd2c:	24010718 	.word	0x24010718
 800cd30:	24010780 	.word	0x24010780

0800cd34 <global_stdio_init.part.0>:
 800cd34:	b510      	push	{r4, lr}
 800cd36:	4b0b      	ldr	r3, [pc, #44]	; (800cd64 <global_stdio_init.part.0+0x30>)
 800cd38:	4c0b      	ldr	r4, [pc, #44]	; (800cd68 <global_stdio_init.part.0+0x34>)
 800cd3a:	4a0c      	ldr	r2, [pc, #48]	; (800cd6c <global_stdio_init.part.0+0x38>)
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	4620      	mov	r0, r4
 800cd40:	2200      	movs	r2, #0
 800cd42:	2104      	movs	r1, #4
 800cd44:	f7ff ff94 	bl	800cc70 <std>
 800cd48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	2109      	movs	r1, #9
 800cd50:	f7ff ff8e 	bl	800cc70 <std>
 800cd54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cd58:	2202      	movs	r2, #2
 800cd5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd5e:	2112      	movs	r1, #18
 800cd60:	f7ff bf86 	b.w	800cc70 <std>
 800cd64:	240107e8 	.word	0x240107e8
 800cd68:	240106b0 	.word	0x240106b0
 800cd6c:	0800ccdd 	.word	0x0800ccdd

0800cd70 <__sfp_lock_acquire>:
 800cd70:	4801      	ldr	r0, [pc, #4]	; (800cd78 <__sfp_lock_acquire+0x8>)
 800cd72:	f000 b96e 	b.w	800d052 <__retarget_lock_acquire_recursive>
 800cd76:	bf00      	nop
 800cd78:	240107f1 	.word	0x240107f1

0800cd7c <__sfp_lock_release>:
 800cd7c:	4801      	ldr	r0, [pc, #4]	; (800cd84 <__sfp_lock_release+0x8>)
 800cd7e:	f000 b969 	b.w	800d054 <__retarget_lock_release_recursive>
 800cd82:	bf00      	nop
 800cd84:	240107f1 	.word	0x240107f1

0800cd88 <__sinit>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	f7ff fff0 	bl	800cd70 <__sfp_lock_acquire>
 800cd90:	6a23      	ldr	r3, [r4, #32]
 800cd92:	b11b      	cbz	r3, 800cd9c <__sinit+0x14>
 800cd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd98:	f7ff bff0 	b.w	800cd7c <__sfp_lock_release>
 800cd9c:	4b04      	ldr	r3, [pc, #16]	; (800cdb0 <__sinit+0x28>)
 800cd9e:	6223      	str	r3, [r4, #32]
 800cda0:	4b04      	ldr	r3, [pc, #16]	; (800cdb4 <__sinit+0x2c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1f5      	bne.n	800cd94 <__sinit+0xc>
 800cda8:	f7ff ffc4 	bl	800cd34 <global_stdio_init.part.0>
 800cdac:	e7f2      	b.n	800cd94 <__sinit+0xc>
 800cdae:	bf00      	nop
 800cdb0:	0800ccf5 	.word	0x0800ccf5
 800cdb4:	240107e8 	.word	0x240107e8

0800cdb8 <_fwalk_sglue>:
 800cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	4607      	mov	r7, r0
 800cdbe:	4688      	mov	r8, r1
 800cdc0:	4614      	mov	r4, r2
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdc8:	f1b9 0901 	subs.w	r9, r9, #1
 800cdcc:	d505      	bpl.n	800cdda <_fwalk_sglue+0x22>
 800cdce:	6824      	ldr	r4, [r4, #0]
 800cdd0:	2c00      	cmp	r4, #0
 800cdd2:	d1f7      	bne.n	800cdc4 <_fwalk_sglue+0xc>
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdda:	89ab      	ldrh	r3, [r5, #12]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d907      	bls.n	800cdf0 <_fwalk_sglue+0x38>
 800cde0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cde4:	3301      	adds	r3, #1
 800cde6:	d003      	beq.n	800cdf0 <_fwalk_sglue+0x38>
 800cde8:	4629      	mov	r1, r5
 800cdea:	4638      	mov	r0, r7
 800cdec:	47c0      	blx	r8
 800cdee:	4306      	orrs	r6, r0
 800cdf0:	3568      	adds	r5, #104	; 0x68
 800cdf2:	e7e9      	b.n	800cdc8 <_fwalk_sglue+0x10>

0800cdf4 <iprintf>:
 800cdf4:	b40f      	push	{r0, r1, r2, r3}
 800cdf6:	b507      	push	{r0, r1, r2, lr}
 800cdf8:	4906      	ldr	r1, [pc, #24]	; (800ce14 <iprintf+0x20>)
 800cdfa:	ab04      	add	r3, sp, #16
 800cdfc:	6808      	ldr	r0, [r1, #0]
 800cdfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce02:	6881      	ldr	r1, [r0, #8]
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	f000 fa7d 	bl	800d304 <_vfiprintf_r>
 800ce0a:	b003      	add	sp, #12
 800ce0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce10:	b004      	add	sp, #16
 800ce12:	4770      	bx	lr
 800ce14:	24000088 	.word	0x24000088

0800ce18 <__sread>:
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce20:	f000 f8ce 	bl	800cfc0 <_read_r>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	bfab      	itete	ge
 800ce28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce2c:	181b      	addge	r3, r3, r0
 800ce2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce32:	bfac      	ite	ge
 800ce34:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce36:	81a3      	strhlt	r3, [r4, #12]
 800ce38:	bd10      	pop	{r4, pc}

0800ce3a <__swrite>:
 800ce3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3e:	461f      	mov	r7, r3
 800ce40:	898b      	ldrh	r3, [r1, #12]
 800ce42:	05db      	lsls	r3, r3, #23
 800ce44:	4605      	mov	r5, r0
 800ce46:	460c      	mov	r4, r1
 800ce48:	4616      	mov	r6, r2
 800ce4a:	d505      	bpl.n	800ce58 <__swrite+0x1e>
 800ce4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce50:	2302      	movs	r3, #2
 800ce52:	2200      	movs	r2, #0
 800ce54:	f000 f8a2 	bl	800cf9c <_lseek_r>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	4632      	mov	r2, r6
 800ce66:	463b      	mov	r3, r7
 800ce68:	4628      	mov	r0, r5
 800ce6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6e:	f000 b8b9 	b.w	800cfe4 <_write_r>

0800ce72 <__sseek>:
 800ce72:	b510      	push	{r4, lr}
 800ce74:	460c      	mov	r4, r1
 800ce76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7a:	f000 f88f 	bl	800cf9c <_lseek_r>
 800ce7e:	1c43      	adds	r3, r0, #1
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	bf15      	itete	ne
 800ce84:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce8e:	81a3      	strheq	r3, [r4, #12]
 800ce90:	bf18      	it	ne
 800ce92:	81a3      	strhne	r3, [r4, #12]
 800ce94:	bd10      	pop	{r4, pc}

0800ce96 <__sclose>:
 800ce96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce9a:	f000 b819 	b.w	800ced0 <_close_r>

0800ce9e <memcmp>:
 800ce9e:	b510      	push	{r4, lr}
 800cea0:	3901      	subs	r1, #1
 800cea2:	4402      	add	r2, r0
 800cea4:	4290      	cmp	r0, r2
 800cea6:	d101      	bne.n	800ceac <memcmp+0xe>
 800cea8:	2000      	movs	r0, #0
 800ceaa:	e005      	b.n	800ceb8 <memcmp+0x1a>
 800ceac:	7803      	ldrb	r3, [r0, #0]
 800ceae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ceb2:	42a3      	cmp	r3, r4
 800ceb4:	d001      	beq.n	800ceba <memcmp+0x1c>
 800ceb6:	1b18      	subs	r0, r3, r4
 800ceb8:	bd10      	pop	{r4, pc}
 800ceba:	3001      	adds	r0, #1
 800cebc:	e7f2      	b.n	800cea4 <memcmp+0x6>

0800cebe <memset>:
 800cebe:	4402      	add	r2, r0
 800cec0:	4603      	mov	r3, r0
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d100      	bne.n	800cec8 <memset+0xa>
 800cec6:	4770      	bx	lr
 800cec8:	f803 1b01 	strb.w	r1, [r3], #1
 800cecc:	e7f9      	b.n	800cec2 <memset+0x4>
	...

0800ced0 <_close_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4d06      	ldr	r5, [pc, #24]	; (800ceec <_close_r+0x1c>)
 800ced4:	2300      	movs	r3, #0
 800ced6:	4604      	mov	r4, r0
 800ced8:	4608      	mov	r0, r1
 800ceda:	602b      	str	r3, [r5, #0]
 800cedc:	f7f3 fcaa 	bl	8000834 <_close>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d102      	bne.n	800ceea <_close_r+0x1a>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	b103      	cbz	r3, 800ceea <_close_r+0x1a>
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	240107ec 	.word	0x240107ec

0800cef0 <_reclaim_reent>:
 800cef0:	4b29      	ldr	r3, [pc, #164]	; (800cf98 <_reclaim_reent+0xa8>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4283      	cmp	r3, r0
 800cef6:	b570      	push	{r4, r5, r6, lr}
 800cef8:	4604      	mov	r4, r0
 800cefa:	d04b      	beq.n	800cf94 <_reclaim_reent+0xa4>
 800cefc:	69c3      	ldr	r3, [r0, #28]
 800cefe:	b143      	cbz	r3, 800cf12 <_reclaim_reent+0x22>
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d144      	bne.n	800cf90 <_reclaim_reent+0xa0>
 800cf06:	69e3      	ldr	r3, [r4, #28]
 800cf08:	6819      	ldr	r1, [r3, #0]
 800cf0a:	b111      	cbz	r1, 800cf12 <_reclaim_reent+0x22>
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f000 f8cf 	bl	800d0b0 <_free_r>
 800cf12:	6961      	ldr	r1, [r4, #20]
 800cf14:	b111      	cbz	r1, 800cf1c <_reclaim_reent+0x2c>
 800cf16:	4620      	mov	r0, r4
 800cf18:	f000 f8ca 	bl	800d0b0 <_free_r>
 800cf1c:	69e1      	ldr	r1, [r4, #28]
 800cf1e:	b111      	cbz	r1, 800cf26 <_reclaim_reent+0x36>
 800cf20:	4620      	mov	r0, r4
 800cf22:	f000 f8c5 	bl	800d0b0 <_free_r>
 800cf26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cf28:	b111      	cbz	r1, 800cf30 <_reclaim_reent+0x40>
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 f8c0 	bl	800d0b0 <_free_r>
 800cf30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf32:	b111      	cbz	r1, 800cf3a <_reclaim_reent+0x4a>
 800cf34:	4620      	mov	r0, r4
 800cf36:	f000 f8bb 	bl	800d0b0 <_free_r>
 800cf3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cf3c:	b111      	cbz	r1, 800cf44 <_reclaim_reent+0x54>
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f000 f8b6 	bl	800d0b0 <_free_r>
 800cf44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf46:	b111      	cbz	r1, 800cf4e <_reclaim_reent+0x5e>
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f000 f8b1 	bl	800d0b0 <_free_r>
 800cf4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cf50:	b111      	cbz	r1, 800cf58 <_reclaim_reent+0x68>
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 f8ac 	bl	800d0b0 <_free_r>
 800cf58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cf5a:	b111      	cbz	r1, 800cf62 <_reclaim_reent+0x72>
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 f8a7 	bl	800d0b0 <_free_r>
 800cf62:	6a23      	ldr	r3, [r4, #32]
 800cf64:	b1b3      	cbz	r3, 800cf94 <_reclaim_reent+0xa4>
 800cf66:	4620      	mov	r0, r4
 800cf68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf6c:	4718      	bx	r3
 800cf6e:	5949      	ldr	r1, [r1, r5]
 800cf70:	b941      	cbnz	r1, 800cf84 <_reclaim_reent+0x94>
 800cf72:	3504      	adds	r5, #4
 800cf74:	69e3      	ldr	r3, [r4, #28]
 800cf76:	2d80      	cmp	r5, #128	; 0x80
 800cf78:	68d9      	ldr	r1, [r3, #12]
 800cf7a:	d1f8      	bne.n	800cf6e <_reclaim_reent+0x7e>
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 f897 	bl	800d0b0 <_free_r>
 800cf82:	e7c0      	b.n	800cf06 <_reclaim_reent+0x16>
 800cf84:	680e      	ldr	r6, [r1, #0]
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 f892 	bl	800d0b0 <_free_r>
 800cf8c:	4631      	mov	r1, r6
 800cf8e:	e7ef      	b.n	800cf70 <_reclaim_reent+0x80>
 800cf90:	2500      	movs	r5, #0
 800cf92:	e7ef      	b.n	800cf74 <_reclaim_reent+0x84>
 800cf94:	bd70      	pop	{r4, r5, r6, pc}
 800cf96:	bf00      	nop
 800cf98:	24000088 	.word	0x24000088

0800cf9c <_lseek_r>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	4d07      	ldr	r5, [pc, #28]	; (800cfbc <_lseek_r+0x20>)
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	4608      	mov	r0, r1
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	602a      	str	r2, [r5, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	f7f3 fc4e 	bl	800084c <_lseek>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d102      	bne.n	800cfba <_lseek_r+0x1e>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	b103      	cbz	r3, 800cfba <_lseek_r+0x1e>
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	bd38      	pop	{r3, r4, r5, pc}
 800cfbc:	240107ec 	.word	0x240107ec

0800cfc0 <_read_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4d07      	ldr	r5, [pc, #28]	; (800cfe0 <_read_r+0x20>)
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	4608      	mov	r0, r1
 800cfc8:	4611      	mov	r1, r2
 800cfca:	2200      	movs	r2, #0
 800cfcc:	602a      	str	r2, [r5, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f7f3 fc14 	bl	80007fc <_read>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_read_r+0x1e>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_read_r+0x1e>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	240107ec 	.word	0x240107ec

0800cfe4 <_write_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4d07      	ldr	r5, [pc, #28]	; (800d004 <_write_r+0x20>)
 800cfe8:	4604      	mov	r4, r0
 800cfea:	4608      	mov	r0, r1
 800cfec:	4611      	mov	r1, r2
 800cfee:	2200      	movs	r2, #0
 800cff0:	602a      	str	r2, [r5, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	f7f3 fc10 	bl	8000818 <_write>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_write_r+0x1e>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_write_r+0x1e>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	240107ec 	.word	0x240107ec

0800d008 <__libc_init_array>:
 800d008:	b570      	push	{r4, r5, r6, lr}
 800d00a:	4d0d      	ldr	r5, [pc, #52]	; (800d040 <__libc_init_array+0x38>)
 800d00c:	4c0d      	ldr	r4, [pc, #52]	; (800d044 <__libc_init_array+0x3c>)
 800d00e:	1b64      	subs	r4, r4, r5
 800d010:	10a4      	asrs	r4, r4, #2
 800d012:	2600      	movs	r6, #0
 800d014:	42a6      	cmp	r6, r4
 800d016:	d109      	bne.n	800d02c <__libc_init_array+0x24>
 800d018:	4d0b      	ldr	r5, [pc, #44]	; (800d048 <__libc_init_array+0x40>)
 800d01a:	4c0c      	ldr	r4, [pc, #48]	; (800d04c <__libc_init_array+0x44>)
 800d01c:	f000 fe52 	bl	800dcc4 <_init>
 800d020:	1b64      	subs	r4, r4, r5
 800d022:	10a4      	asrs	r4, r4, #2
 800d024:	2600      	movs	r6, #0
 800d026:	42a6      	cmp	r6, r4
 800d028:	d105      	bne.n	800d036 <__libc_init_array+0x2e>
 800d02a:	bd70      	pop	{r4, r5, r6, pc}
 800d02c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d030:	4798      	blx	r3
 800d032:	3601      	adds	r6, #1
 800d034:	e7ee      	b.n	800d014 <__libc_init_array+0xc>
 800d036:	f855 3b04 	ldr.w	r3, [r5], #4
 800d03a:	4798      	blx	r3
 800d03c:	3601      	adds	r6, #1
 800d03e:	e7f2      	b.n	800d026 <__libc_init_array+0x1e>
 800d040:	0800fd54 	.word	0x0800fd54
 800d044:	0800fd54 	.word	0x0800fd54
 800d048:	0800fd54 	.word	0x0800fd54
 800d04c:	0800fd58 	.word	0x0800fd58

0800d050 <__retarget_lock_init_recursive>:
 800d050:	4770      	bx	lr

0800d052 <__retarget_lock_acquire_recursive>:
 800d052:	4770      	bx	lr

0800d054 <__retarget_lock_release_recursive>:
 800d054:	4770      	bx	lr

0800d056 <memcpy>:
 800d056:	440a      	add	r2, r1
 800d058:	4291      	cmp	r1, r2
 800d05a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d05e:	d100      	bne.n	800d062 <memcpy+0xc>
 800d060:	4770      	bx	lr
 800d062:	b510      	push	{r4, lr}
 800d064:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d06c:	4291      	cmp	r1, r2
 800d06e:	d1f9      	bne.n	800d064 <memcpy+0xe>
 800d070:	bd10      	pop	{r4, pc}
	...

0800d074 <__assert_func>:
 800d074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d076:	4614      	mov	r4, r2
 800d078:	461a      	mov	r2, r3
 800d07a:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <__assert_func+0x2c>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4605      	mov	r5, r0
 800d080:	68d8      	ldr	r0, [r3, #12]
 800d082:	b14c      	cbz	r4, 800d098 <__assert_func+0x24>
 800d084:	4b07      	ldr	r3, [pc, #28]	; (800d0a4 <__assert_func+0x30>)
 800d086:	9100      	str	r1, [sp, #0]
 800d088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d08c:	4906      	ldr	r1, [pc, #24]	; (800d0a8 <__assert_func+0x34>)
 800d08e:	462b      	mov	r3, r5
 800d090:	f000 fc90 	bl	800d9b4 <fiprintf>
 800d094:	f000 fd46 	bl	800db24 <abort>
 800d098:	4b04      	ldr	r3, [pc, #16]	; (800d0ac <__assert_func+0x38>)
 800d09a:	461c      	mov	r4, r3
 800d09c:	e7f3      	b.n	800d086 <__assert_func+0x12>
 800d09e:	bf00      	nop
 800d0a0:	24000088 	.word	0x24000088
 800d0a4:	0800fce5 	.word	0x0800fce5
 800d0a8:	0800fcf2 	.word	0x0800fcf2
 800d0ac:	0800fd20 	.word	0x0800fd20

0800d0b0 <_free_r>:
 800d0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0b2:	2900      	cmp	r1, #0
 800d0b4:	d044      	beq.n	800d140 <_free_r+0x90>
 800d0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0ba:	9001      	str	r0, [sp, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f1a1 0404 	sub.w	r4, r1, #4
 800d0c2:	bfb8      	it	lt
 800d0c4:	18e4      	addlt	r4, r4, r3
 800d0c6:	f000 f8e7 	bl	800d298 <__malloc_lock>
 800d0ca:	4a1e      	ldr	r2, [pc, #120]	; (800d144 <_free_r+0x94>)
 800d0cc:	9801      	ldr	r0, [sp, #4]
 800d0ce:	6813      	ldr	r3, [r2, #0]
 800d0d0:	b933      	cbnz	r3, 800d0e0 <_free_r+0x30>
 800d0d2:	6063      	str	r3, [r4, #4]
 800d0d4:	6014      	str	r4, [r2, #0]
 800d0d6:	b003      	add	sp, #12
 800d0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0dc:	f000 b8e2 	b.w	800d2a4 <__malloc_unlock>
 800d0e0:	42a3      	cmp	r3, r4
 800d0e2:	d908      	bls.n	800d0f6 <_free_r+0x46>
 800d0e4:	6825      	ldr	r5, [r4, #0]
 800d0e6:	1961      	adds	r1, r4, r5
 800d0e8:	428b      	cmp	r3, r1
 800d0ea:	bf01      	itttt	eq
 800d0ec:	6819      	ldreq	r1, [r3, #0]
 800d0ee:	685b      	ldreq	r3, [r3, #4]
 800d0f0:	1949      	addeq	r1, r1, r5
 800d0f2:	6021      	streq	r1, [r4, #0]
 800d0f4:	e7ed      	b.n	800d0d2 <_free_r+0x22>
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	b10b      	cbz	r3, 800d100 <_free_r+0x50>
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	d9fa      	bls.n	800d0f6 <_free_r+0x46>
 800d100:	6811      	ldr	r1, [r2, #0]
 800d102:	1855      	adds	r5, r2, r1
 800d104:	42a5      	cmp	r5, r4
 800d106:	d10b      	bne.n	800d120 <_free_r+0x70>
 800d108:	6824      	ldr	r4, [r4, #0]
 800d10a:	4421      	add	r1, r4
 800d10c:	1854      	adds	r4, r2, r1
 800d10e:	42a3      	cmp	r3, r4
 800d110:	6011      	str	r1, [r2, #0]
 800d112:	d1e0      	bne.n	800d0d6 <_free_r+0x26>
 800d114:	681c      	ldr	r4, [r3, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	6053      	str	r3, [r2, #4]
 800d11a:	440c      	add	r4, r1
 800d11c:	6014      	str	r4, [r2, #0]
 800d11e:	e7da      	b.n	800d0d6 <_free_r+0x26>
 800d120:	d902      	bls.n	800d128 <_free_r+0x78>
 800d122:	230c      	movs	r3, #12
 800d124:	6003      	str	r3, [r0, #0]
 800d126:	e7d6      	b.n	800d0d6 <_free_r+0x26>
 800d128:	6825      	ldr	r5, [r4, #0]
 800d12a:	1961      	adds	r1, r4, r5
 800d12c:	428b      	cmp	r3, r1
 800d12e:	bf04      	itt	eq
 800d130:	6819      	ldreq	r1, [r3, #0]
 800d132:	685b      	ldreq	r3, [r3, #4]
 800d134:	6063      	str	r3, [r4, #4]
 800d136:	bf04      	itt	eq
 800d138:	1949      	addeq	r1, r1, r5
 800d13a:	6021      	streq	r1, [r4, #0]
 800d13c:	6054      	str	r4, [r2, #4]
 800d13e:	e7ca      	b.n	800d0d6 <_free_r+0x26>
 800d140:	b003      	add	sp, #12
 800d142:	bd30      	pop	{r4, r5, pc}
 800d144:	240107f4 	.word	0x240107f4

0800d148 <malloc>:
 800d148:	4b02      	ldr	r3, [pc, #8]	; (800d154 <malloc+0xc>)
 800d14a:	4601      	mov	r1, r0
 800d14c:	6818      	ldr	r0, [r3, #0]
 800d14e:	f000 b823 	b.w	800d198 <_malloc_r>
 800d152:	bf00      	nop
 800d154:	24000088 	.word	0x24000088

0800d158 <sbrk_aligned>:
 800d158:	b570      	push	{r4, r5, r6, lr}
 800d15a:	4e0e      	ldr	r6, [pc, #56]	; (800d194 <sbrk_aligned+0x3c>)
 800d15c:	460c      	mov	r4, r1
 800d15e:	6831      	ldr	r1, [r6, #0]
 800d160:	4605      	mov	r5, r0
 800d162:	b911      	cbnz	r1, 800d16a <sbrk_aligned+0x12>
 800d164:	f000 fcce 	bl	800db04 <_sbrk_r>
 800d168:	6030      	str	r0, [r6, #0]
 800d16a:	4621      	mov	r1, r4
 800d16c:	4628      	mov	r0, r5
 800d16e:	f000 fcc9 	bl	800db04 <_sbrk_r>
 800d172:	1c43      	adds	r3, r0, #1
 800d174:	d00a      	beq.n	800d18c <sbrk_aligned+0x34>
 800d176:	1cc4      	adds	r4, r0, #3
 800d178:	f024 0403 	bic.w	r4, r4, #3
 800d17c:	42a0      	cmp	r0, r4
 800d17e:	d007      	beq.n	800d190 <sbrk_aligned+0x38>
 800d180:	1a21      	subs	r1, r4, r0
 800d182:	4628      	mov	r0, r5
 800d184:	f000 fcbe 	bl	800db04 <_sbrk_r>
 800d188:	3001      	adds	r0, #1
 800d18a:	d101      	bne.n	800d190 <sbrk_aligned+0x38>
 800d18c:	f04f 34ff 	mov.w	r4, #4294967295
 800d190:	4620      	mov	r0, r4
 800d192:	bd70      	pop	{r4, r5, r6, pc}
 800d194:	240107f8 	.word	0x240107f8

0800d198 <_malloc_r>:
 800d198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d19c:	1ccd      	adds	r5, r1, #3
 800d19e:	f025 0503 	bic.w	r5, r5, #3
 800d1a2:	3508      	adds	r5, #8
 800d1a4:	2d0c      	cmp	r5, #12
 800d1a6:	bf38      	it	cc
 800d1a8:	250c      	movcc	r5, #12
 800d1aa:	2d00      	cmp	r5, #0
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	db01      	blt.n	800d1b4 <_malloc_r+0x1c>
 800d1b0:	42a9      	cmp	r1, r5
 800d1b2:	d905      	bls.n	800d1c0 <_malloc_r+0x28>
 800d1b4:	230c      	movs	r3, #12
 800d1b6:	603b      	str	r3, [r7, #0]
 800d1b8:	2600      	movs	r6, #0
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d294 <_malloc_r+0xfc>
 800d1c4:	f000 f868 	bl	800d298 <__malloc_lock>
 800d1c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d1cc:	461c      	mov	r4, r3
 800d1ce:	bb5c      	cbnz	r4, 800d228 <_malloc_r+0x90>
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	f7ff ffc0 	bl	800d158 <sbrk_aligned>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	4604      	mov	r4, r0
 800d1dc:	d155      	bne.n	800d28a <_malloc_r+0xf2>
 800d1de:	f8d8 4000 	ldr.w	r4, [r8]
 800d1e2:	4626      	mov	r6, r4
 800d1e4:	2e00      	cmp	r6, #0
 800d1e6:	d145      	bne.n	800d274 <_malloc_r+0xdc>
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	d048      	beq.n	800d27e <_malloc_r+0xe6>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	eb04 0903 	add.w	r9, r4, r3
 800d1f6:	f000 fc85 	bl	800db04 <_sbrk_r>
 800d1fa:	4581      	cmp	r9, r0
 800d1fc:	d13f      	bne.n	800d27e <_malloc_r+0xe6>
 800d1fe:	6821      	ldr	r1, [r4, #0]
 800d200:	1a6d      	subs	r5, r5, r1
 800d202:	4629      	mov	r1, r5
 800d204:	4638      	mov	r0, r7
 800d206:	f7ff ffa7 	bl	800d158 <sbrk_aligned>
 800d20a:	3001      	adds	r0, #1
 800d20c:	d037      	beq.n	800d27e <_malloc_r+0xe6>
 800d20e:	6823      	ldr	r3, [r4, #0]
 800d210:	442b      	add	r3, r5
 800d212:	6023      	str	r3, [r4, #0]
 800d214:	f8d8 3000 	ldr.w	r3, [r8]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d038      	beq.n	800d28e <_malloc_r+0xf6>
 800d21c:	685a      	ldr	r2, [r3, #4]
 800d21e:	42a2      	cmp	r2, r4
 800d220:	d12b      	bne.n	800d27a <_malloc_r+0xe2>
 800d222:	2200      	movs	r2, #0
 800d224:	605a      	str	r2, [r3, #4]
 800d226:	e00f      	b.n	800d248 <_malloc_r+0xb0>
 800d228:	6822      	ldr	r2, [r4, #0]
 800d22a:	1b52      	subs	r2, r2, r5
 800d22c:	d41f      	bmi.n	800d26e <_malloc_r+0xd6>
 800d22e:	2a0b      	cmp	r2, #11
 800d230:	d917      	bls.n	800d262 <_malloc_r+0xca>
 800d232:	1961      	adds	r1, r4, r5
 800d234:	42a3      	cmp	r3, r4
 800d236:	6025      	str	r5, [r4, #0]
 800d238:	bf18      	it	ne
 800d23a:	6059      	strne	r1, [r3, #4]
 800d23c:	6863      	ldr	r3, [r4, #4]
 800d23e:	bf08      	it	eq
 800d240:	f8c8 1000 	streq.w	r1, [r8]
 800d244:	5162      	str	r2, [r4, r5]
 800d246:	604b      	str	r3, [r1, #4]
 800d248:	4638      	mov	r0, r7
 800d24a:	f104 060b 	add.w	r6, r4, #11
 800d24e:	f000 f829 	bl	800d2a4 <__malloc_unlock>
 800d252:	f026 0607 	bic.w	r6, r6, #7
 800d256:	1d23      	adds	r3, r4, #4
 800d258:	1af2      	subs	r2, r6, r3
 800d25a:	d0ae      	beq.n	800d1ba <_malloc_r+0x22>
 800d25c:	1b9b      	subs	r3, r3, r6
 800d25e:	50a3      	str	r3, [r4, r2]
 800d260:	e7ab      	b.n	800d1ba <_malloc_r+0x22>
 800d262:	42a3      	cmp	r3, r4
 800d264:	6862      	ldr	r2, [r4, #4]
 800d266:	d1dd      	bne.n	800d224 <_malloc_r+0x8c>
 800d268:	f8c8 2000 	str.w	r2, [r8]
 800d26c:	e7ec      	b.n	800d248 <_malloc_r+0xb0>
 800d26e:	4623      	mov	r3, r4
 800d270:	6864      	ldr	r4, [r4, #4]
 800d272:	e7ac      	b.n	800d1ce <_malloc_r+0x36>
 800d274:	4634      	mov	r4, r6
 800d276:	6876      	ldr	r6, [r6, #4]
 800d278:	e7b4      	b.n	800d1e4 <_malloc_r+0x4c>
 800d27a:	4613      	mov	r3, r2
 800d27c:	e7cc      	b.n	800d218 <_malloc_r+0x80>
 800d27e:	230c      	movs	r3, #12
 800d280:	603b      	str	r3, [r7, #0]
 800d282:	4638      	mov	r0, r7
 800d284:	f000 f80e 	bl	800d2a4 <__malloc_unlock>
 800d288:	e797      	b.n	800d1ba <_malloc_r+0x22>
 800d28a:	6025      	str	r5, [r4, #0]
 800d28c:	e7dc      	b.n	800d248 <_malloc_r+0xb0>
 800d28e:	605b      	str	r3, [r3, #4]
 800d290:	deff      	udf	#255	; 0xff
 800d292:	bf00      	nop
 800d294:	240107f4 	.word	0x240107f4

0800d298 <__malloc_lock>:
 800d298:	4801      	ldr	r0, [pc, #4]	; (800d2a0 <__malloc_lock+0x8>)
 800d29a:	f7ff beda 	b.w	800d052 <__retarget_lock_acquire_recursive>
 800d29e:	bf00      	nop
 800d2a0:	240107f0 	.word	0x240107f0

0800d2a4 <__malloc_unlock>:
 800d2a4:	4801      	ldr	r0, [pc, #4]	; (800d2ac <__malloc_unlock+0x8>)
 800d2a6:	f7ff bed5 	b.w	800d054 <__retarget_lock_release_recursive>
 800d2aa:	bf00      	nop
 800d2ac:	240107f0 	.word	0x240107f0

0800d2b0 <__sfputc_r>:
 800d2b0:	6893      	ldr	r3, [r2, #8]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	b410      	push	{r4}
 800d2b8:	6093      	str	r3, [r2, #8]
 800d2ba:	da08      	bge.n	800d2ce <__sfputc_r+0x1e>
 800d2bc:	6994      	ldr	r4, [r2, #24]
 800d2be:	42a3      	cmp	r3, r4
 800d2c0:	db01      	blt.n	800d2c6 <__sfputc_r+0x16>
 800d2c2:	290a      	cmp	r1, #10
 800d2c4:	d103      	bne.n	800d2ce <__sfputc_r+0x1e>
 800d2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ca:	f000 bb85 	b.w	800d9d8 <__swbuf_r>
 800d2ce:	6813      	ldr	r3, [r2, #0]
 800d2d0:	1c58      	adds	r0, r3, #1
 800d2d2:	6010      	str	r0, [r2, #0]
 800d2d4:	7019      	strb	r1, [r3, #0]
 800d2d6:	4608      	mov	r0, r1
 800d2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <__sfputs_r>:
 800d2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	4614      	mov	r4, r2
 800d2e6:	18d5      	adds	r5, r2, r3
 800d2e8:	42ac      	cmp	r4, r5
 800d2ea:	d101      	bne.n	800d2f0 <__sfputs_r+0x12>
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	e007      	b.n	800d300 <__sfputs_r+0x22>
 800d2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f4:	463a      	mov	r2, r7
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7ff ffda 	bl	800d2b0 <__sfputc_r>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d1f3      	bne.n	800d2e8 <__sfputs_r+0xa>
 800d300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d304 <_vfiprintf_r>:
 800d304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d308:	460d      	mov	r5, r1
 800d30a:	b09d      	sub	sp, #116	; 0x74
 800d30c:	4614      	mov	r4, r2
 800d30e:	4698      	mov	r8, r3
 800d310:	4606      	mov	r6, r0
 800d312:	b118      	cbz	r0, 800d31c <_vfiprintf_r+0x18>
 800d314:	6a03      	ldr	r3, [r0, #32]
 800d316:	b90b      	cbnz	r3, 800d31c <_vfiprintf_r+0x18>
 800d318:	f7ff fd36 	bl	800cd88 <__sinit>
 800d31c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d31e:	07d9      	lsls	r1, r3, #31
 800d320:	d405      	bmi.n	800d32e <_vfiprintf_r+0x2a>
 800d322:	89ab      	ldrh	r3, [r5, #12]
 800d324:	059a      	lsls	r2, r3, #22
 800d326:	d402      	bmi.n	800d32e <_vfiprintf_r+0x2a>
 800d328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d32a:	f7ff fe92 	bl	800d052 <__retarget_lock_acquire_recursive>
 800d32e:	89ab      	ldrh	r3, [r5, #12]
 800d330:	071b      	lsls	r3, r3, #28
 800d332:	d501      	bpl.n	800d338 <_vfiprintf_r+0x34>
 800d334:	692b      	ldr	r3, [r5, #16]
 800d336:	b99b      	cbnz	r3, 800d360 <_vfiprintf_r+0x5c>
 800d338:	4629      	mov	r1, r5
 800d33a:	4630      	mov	r0, r6
 800d33c:	f000 fb8a 	bl	800da54 <__swsetup_r>
 800d340:	b170      	cbz	r0, 800d360 <_vfiprintf_r+0x5c>
 800d342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d344:	07dc      	lsls	r4, r3, #31
 800d346:	d504      	bpl.n	800d352 <_vfiprintf_r+0x4e>
 800d348:	f04f 30ff 	mov.w	r0, #4294967295
 800d34c:	b01d      	add	sp, #116	; 0x74
 800d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d352:	89ab      	ldrh	r3, [r5, #12]
 800d354:	0598      	lsls	r0, r3, #22
 800d356:	d4f7      	bmi.n	800d348 <_vfiprintf_r+0x44>
 800d358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d35a:	f7ff fe7b 	bl	800d054 <__retarget_lock_release_recursive>
 800d35e:	e7f3      	b.n	800d348 <_vfiprintf_r+0x44>
 800d360:	2300      	movs	r3, #0
 800d362:	9309      	str	r3, [sp, #36]	; 0x24
 800d364:	2320      	movs	r3, #32
 800d366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d36a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d36e:	2330      	movs	r3, #48	; 0x30
 800d370:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d524 <_vfiprintf_r+0x220>
 800d374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d378:	f04f 0901 	mov.w	r9, #1
 800d37c:	4623      	mov	r3, r4
 800d37e:	469a      	mov	sl, r3
 800d380:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d384:	b10a      	cbz	r2, 800d38a <_vfiprintf_r+0x86>
 800d386:	2a25      	cmp	r2, #37	; 0x25
 800d388:	d1f9      	bne.n	800d37e <_vfiprintf_r+0x7a>
 800d38a:	ebba 0b04 	subs.w	fp, sl, r4
 800d38e:	d00b      	beq.n	800d3a8 <_vfiprintf_r+0xa4>
 800d390:	465b      	mov	r3, fp
 800d392:	4622      	mov	r2, r4
 800d394:	4629      	mov	r1, r5
 800d396:	4630      	mov	r0, r6
 800d398:	f7ff ffa1 	bl	800d2de <__sfputs_r>
 800d39c:	3001      	adds	r0, #1
 800d39e:	f000 80a9 	beq.w	800d4f4 <_vfiprintf_r+0x1f0>
 800d3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3a4:	445a      	add	r2, fp
 800d3a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 80a1 	beq.w	800d4f4 <_vfiprintf_r+0x1f0>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3bc:	f10a 0a01 	add.w	sl, sl, #1
 800d3c0:	9304      	str	r3, [sp, #16]
 800d3c2:	9307      	str	r3, [sp, #28]
 800d3c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3c8:	931a      	str	r3, [sp, #104]	; 0x68
 800d3ca:	4654      	mov	r4, sl
 800d3cc:	2205      	movs	r2, #5
 800d3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d2:	4854      	ldr	r0, [pc, #336]	; (800d524 <_vfiprintf_r+0x220>)
 800d3d4:	f7f2 ff9c 	bl	8000310 <memchr>
 800d3d8:	9a04      	ldr	r2, [sp, #16]
 800d3da:	b9d8      	cbnz	r0, 800d414 <_vfiprintf_r+0x110>
 800d3dc:	06d1      	lsls	r1, r2, #27
 800d3de:	bf44      	itt	mi
 800d3e0:	2320      	movmi	r3, #32
 800d3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3e6:	0713      	lsls	r3, r2, #28
 800d3e8:	bf44      	itt	mi
 800d3ea:	232b      	movmi	r3, #43	; 0x2b
 800d3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f6:	d015      	beq.n	800d424 <_vfiprintf_r+0x120>
 800d3f8:	9a07      	ldr	r2, [sp, #28]
 800d3fa:	4654      	mov	r4, sl
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	f04f 0c0a 	mov.w	ip, #10
 800d402:	4621      	mov	r1, r4
 800d404:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d408:	3b30      	subs	r3, #48	; 0x30
 800d40a:	2b09      	cmp	r3, #9
 800d40c:	d94d      	bls.n	800d4aa <_vfiprintf_r+0x1a6>
 800d40e:	b1b0      	cbz	r0, 800d43e <_vfiprintf_r+0x13a>
 800d410:	9207      	str	r2, [sp, #28]
 800d412:	e014      	b.n	800d43e <_vfiprintf_r+0x13a>
 800d414:	eba0 0308 	sub.w	r3, r0, r8
 800d418:	fa09 f303 	lsl.w	r3, r9, r3
 800d41c:	4313      	orrs	r3, r2
 800d41e:	9304      	str	r3, [sp, #16]
 800d420:	46a2      	mov	sl, r4
 800d422:	e7d2      	b.n	800d3ca <_vfiprintf_r+0xc6>
 800d424:	9b03      	ldr	r3, [sp, #12]
 800d426:	1d19      	adds	r1, r3, #4
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	9103      	str	r1, [sp, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	bfbb      	ittet	lt
 800d430:	425b      	neglt	r3, r3
 800d432:	f042 0202 	orrlt.w	r2, r2, #2
 800d436:	9307      	strge	r3, [sp, #28]
 800d438:	9307      	strlt	r3, [sp, #28]
 800d43a:	bfb8      	it	lt
 800d43c:	9204      	strlt	r2, [sp, #16]
 800d43e:	7823      	ldrb	r3, [r4, #0]
 800d440:	2b2e      	cmp	r3, #46	; 0x2e
 800d442:	d10c      	bne.n	800d45e <_vfiprintf_r+0x15a>
 800d444:	7863      	ldrb	r3, [r4, #1]
 800d446:	2b2a      	cmp	r3, #42	; 0x2a
 800d448:	d134      	bne.n	800d4b4 <_vfiprintf_r+0x1b0>
 800d44a:	9b03      	ldr	r3, [sp, #12]
 800d44c:	1d1a      	adds	r2, r3, #4
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	9203      	str	r2, [sp, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	bfb8      	it	lt
 800d456:	f04f 33ff 	movlt.w	r3, #4294967295
 800d45a:	3402      	adds	r4, #2
 800d45c:	9305      	str	r3, [sp, #20]
 800d45e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d534 <_vfiprintf_r+0x230>
 800d462:	7821      	ldrb	r1, [r4, #0]
 800d464:	2203      	movs	r2, #3
 800d466:	4650      	mov	r0, sl
 800d468:	f7f2 ff52 	bl	8000310 <memchr>
 800d46c:	b138      	cbz	r0, 800d47e <_vfiprintf_r+0x17a>
 800d46e:	9b04      	ldr	r3, [sp, #16]
 800d470:	eba0 000a 	sub.w	r0, r0, sl
 800d474:	2240      	movs	r2, #64	; 0x40
 800d476:	4082      	lsls	r2, r0
 800d478:	4313      	orrs	r3, r2
 800d47a:	3401      	adds	r4, #1
 800d47c:	9304      	str	r3, [sp, #16]
 800d47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d482:	4829      	ldr	r0, [pc, #164]	; (800d528 <_vfiprintf_r+0x224>)
 800d484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d488:	2206      	movs	r2, #6
 800d48a:	f7f2 ff41 	bl	8000310 <memchr>
 800d48e:	2800      	cmp	r0, #0
 800d490:	d03f      	beq.n	800d512 <_vfiprintf_r+0x20e>
 800d492:	4b26      	ldr	r3, [pc, #152]	; (800d52c <_vfiprintf_r+0x228>)
 800d494:	bb1b      	cbnz	r3, 800d4de <_vfiprintf_r+0x1da>
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	3307      	adds	r3, #7
 800d49a:	f023 0307 	bic.w	r3, r3, #7
 800d49e:	3308      	adds	r3, #8
 800d4a0:	9303      	str	r3, [sp, #12]
 800d4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a4:	443b      	add	r3, r7
 800d4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a8:	e768      	b.n	800d37c <_vfiprintf_r+0x78>
 800d4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	2001      	movs	r0, #1
 800d4b2:	e7a6      	b.n	800d402 <_vfiprintf_r+0xfe>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	3401      	adds	r4, #1
 800d4b8:	9305      	str	r3, [sp, #20]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	f04f 0c0a 	mov.w	ip, #10
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c6:	3a30      	subs	r2, #48	; 0x30
 800d4c8:	2a09      	cmp	r2, #9
 800d4ca:	d903      	bls.n	800d4d4 <_vfiprintf_r+0x1d0>
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d0c6      	beq.n	800d45e <_vfiprintf_r+0x15a>
 800d4d0:	9105      	str	r1, [sp, #20]
 800d4d2:	e7c4      	b.n	800d45e <_vfiprintf_r+0x15a>
 800d4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d8:	4604      	mov	r4, r0
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e7f0      	b.n	800d4c0 <_vfiprintf_r+0x1bc>
 800d4de:	ab03      	add	r3, sp, #12
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	462a      	mov	r2, r5
 800d4e4:	4b12      	ldr	r3, [pc, #72]	; (800d530 <_vfiprintf_r+0x22c>)
 800d4e6:	a904      	add	r1, sp, #16
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f3af 8000 	nop.w
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	1c78      	adds	r0, r7, #1
 800d4f2:	d1d6      	bne.n	800d4a2 <_vfiprintf_r+0x19e>
 800d4f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4f6:	07d9      	lsls	r1, r3, #31
 800d4f8:	d405      	bmi.n	800d506 <_vfiprintf_r+0x202>
 800d4fa:	89ab      	ldrh	r3, [r5, #12]
 800d4fc:	059a      	lsls	r2, r3, #22
 800d4fe:	d402      	bmi.n	800d506 <_vfiprintf_r+0x202>
 800d500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d502:	f7ff fda7 	bl	800d054 <__retarget_lock_release_recursive>
 800d506:	89ab      	ldrh	r3, [r5, #12]
 800d508:	065b      	lsls	r3, r3, #25
 800d50a:	f53f af1d 	bmi.w	800d348 <_vfiprintf_r+0x44>
 800d50e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d510:	e71c      	b.n	800d34c <_vfiprintf_r+0x48>
 800d512:	ab03      	add	r3, sp, #12
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	462a      	mov	r2, r5
 800d518:	4b05      	ldr	r3, [pc, #20]	; (800d530 <_vfiprintf_r+0x22c>)
 800d51a:	a904      	add	r1, sp, #16
 800d51c:	4630      	mov	r0, r6
 800d51e:	f000 f879 	bl	800d614 <_printf_i>
 800d522:	e7e4      	b.n	800d4ee <_vfiprintf_r+0x1ea>
 800d524:	0800fd21 	.word	0x0800fd21
 800d528:	0800fd2b 	.word	0x0800fd2b
 800d52c:	00000000 	.word	0x00000000
 800d530:	0800d2df 	.word	0x0800d2df
 800d534:	0800fd27 	.word	0x0800fd27

0800d538 <_printf_common>:
 800d538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d53c:	4616      	mov	r6, r2
 800d53e:	4699      	mov	r9, r3
 800d540:	688a      	ldr	r2, [r1, #8]
 800d542:	690b      	ldr	r3, [r1, #16]
 800d544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d548:	4293      	cmp	r3, r2
 800d54a:	bfb8      	it	lt
 800d54c:	4613      	movlt	r3, r2
 800d54e:	6033      	str	r3, [r6, #0]
 800d550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d554:	4607      	mov	r7, r0
 800d556:	460c      	mov	r4, r1
 800d558:	b10a      	cbz	r2, 800d55e <_printf_common+0x26>
 800d55a:	3301      	adds	r3, #1
 800d55c:	6033      	str	r3, [r6, #0]
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	0699      	lsls	r1, r3, #26
 800d562:	bf42      	ittt	mi
 800d564:	6833      	ldrmi	r3, [r6, #0]
 800d566:	3302      	addmi	r3, #2
 800d568:	6033      	strmi	r3, [r6, #0]
 800d56a:	6825      	ldr	r5, [r4, #0]
 800d56c:	f015 0506 	ands.w	r5, r5, #6
 800d570:	d106      	bne.n	800d580 <_printf_common+0x48>
 800d572:	f104 0a19 	add.w	sl, r4, #25
 800d576:	68e3      	ldr	r3, [r4, #12]
 800d578:	6832      	ldr	r2, [r6, #0]
 800d57a:	1a9b      	subs	r3, r3, r2
 800d57c:	42ab      	cmp	r3, r5
 800d57e:	dc26      	bgt.n	800d5ce <_printf_common+0x96>
 800d580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d584:	1e13      	subs	r3, r2, #0
 800d586:	6822      	ldr	r2, [r4, #0]
 800d588:	bf18      	it	ne
 800d58a:	2301      	movne	r3, #1
 800d58c:	0692      	lsls	r2, r2, #26
 800d58e:	d42b      	bmi.n	800d5e8 <_printf_common+0xb0>
 800d590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d594:	4649      	mov	r1, r9
 800d596:	4638      	mov	r0, r7
 800d598:	47c0      	blx	r8
 800d59a:	3001      	adds	r0, #1
 800d59c:	d01e      	beq.n	800d5dc <_printf_common+0xa4>
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	6922      	ldr	r2, [r4, #16]
 800d5a2:	f003 0306 	and.w	r3, r3, #6
 800d5a6:	2b04      	cmp	r3, #4
 800d5a8:	bf02      	ittt	eq
 800d5aa:	68e5      	ldreq	r5, [r4, #12]
 800d5ac:	6833      	ldreq	r3, [r6, #0]
 800d5ae:	1aed      	subeq	r5, r5, r3
 800d5b0:	68a3      	ldr	r3, [r4, #8]
 800d5b2:	bf0c      	ite	eq
 800d5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5b8:	2500      	movne	r5, #0
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	bfc4      	itt	gt
 800d5be:	1a9b      	subgt	r3, r3, r2
 800d5c0:	18ed      	addgt	r5, r5, r3
 800d5c2:	2600      	movs	r6, #0
 800d5c4:	341a      	adds	r4, #26
 800d5c6:	42b5      	cmp	r5, r6
 800d5c8:	d11a      	bne.n	800d600 <_printf_common+0xc8>
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	e008      	b.n	800d5e0 <_printf_common+0xa8>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	4652      	mov	r2, sl
 800d5d2:	4649      	mov	r1, r9
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	47c0      	blx	r8
 800d5d8:	3001      	adds	r0, #1
 800d5da:	d103      	bne.n	800d5e4 <_printf_common+0xac>
 800d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5e4:	3501      	adds	r5, #1
 800d5e6:	e7c6      	b.n	800d576 <_printf_common+0x3e>
 800d5e8:	18e1      	adds	r1, r4, r3
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	2030      	movs	r0, #48	; 0x30
 800d5ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5f2:	4422      	add	r2, r4
 800d5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5fc:	3302      	adds	r3, #2
 800d5fe:	e7c7      	b.n	800d590 <_printf_common+0x58>
 800d600:	2301      	movs	r3, #1
 800d602:	4622      	mov	r2, r4
 800d604:	4649      	mov	r1, r9
 800d606:	4638      	mov	r0, r7
 800d608:	47c0      	blx	r8
 800d60a:	3001      	adds	r0, #1
 800d60c:	d0e6      	beq.n	800d5dc <_printf_common+0xa4>
 800d60e:	3601      	adds	r6, #1
 800d610:	e7d9      	b.n	800d5c6 <_printf_common+0x8e>
	...

0800d614 <_printf_i>:
 800d614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d618:	7e0f      	ldrb	r7, [r1, #24]
 800d61a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d61c:	2f78      	cmp	r7, #120	; 0x78
 800d61e:	4691      	mov	r9, r2
 800d620:	4680      	mov	r8, r0
 800d622:	460c      	mov	r4, r1
 800d624:	469a      	mov	sl, r3
 800d626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d62a:	d807      	bhi.n	800d63c <_printf_i+0x28>
 800d62c:	2f62      	cmp	r7, #98	; 0x62
 800d62e:	d80a      	bhi.n	800d646 <_printf_i+0x32>
 800d630:	2f00      	cmp	r7, #0
 800d632:	f000 80d4 	beq.w	800d7de <_printf_i+0x1ca>
 800d636:	2f58      	cmp	r7, #88	; 0x58
 800d638:	f000 80c0 	beq.w	800d7bc <_printf_i+0x1a8>
 800d63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d644:	e03a      	b.n	800d6bc <_printf_i+0xa8>
 800d646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d64a:	2b15      	cmp	r3, #21
 800d64c:	d8f6      	bhi.n	800d63c <_printf_i+0x28>
 800d64e:	a101      	add	r1, pc, #4	; (adr r1, 800d654 <_printf_i+0x40>)
 800d650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d654:	0800d6ad 	.word	0x0800d6ad
 800d658:	0800d6c1 	.word	0x0800d6c1
 800d65c:	0800d63d 	.word	0x0800d63d
 800d660:	0800d63d 	.word	0x0800d63d
 800d664:	0800d63d 	.word	0x0800d63d
 800d668:	0800d63d 	.word	0x0800d63d
 800d66c:	0800d6c1 	.word	0x0800d6c1
 800d670:	0800d63d 	.word	0x0800d63d
 800d674:	0800d63d 	.word	0x0800d63d
 800d678:	0800d63d 	.word	0x0800d63d
 800d67c:	0800d63d 	.word	0x0800d63d
 800d680:	0800d7c5 	.word	0x0800d7c5
 800d684:	0800d6ed 	.word	0x0800d6ed
 800d688:	0800d77f 	.word	0x0800d77f
 800d68c:	0800d63d 	.word	0x0800d63d
 800d690:	0800d63d 	.word	0x0800d63d
 800d694:	0800d7e7 	.word	0x0800d7e7
 800d698:	0800d63d 	.word	0x0800d63d
 800d69c:	0800d6ed 	.word	0x0800d6ed
 800d6a0:	0800d63d 	.word	0x0800d63d
 800d6a4:	0800d63d 	.word	0x0800d63d
 800d6a8:	0800d787 	.word	0x0800d787
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	1d1a      	adds	r2, r3, #4
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	602a      	str	r2, [r5, #0]
 800d6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e09f      	b.n	800d800 <_printf_i+0x1ec>
 800d6c0:	6820      	ldr	r0, [r4, #0]
 800d6c2:	682b      	ldr	r3, [r5, #0]
 800d6c4:	0607      	lsls	r7, r0, #24
 800d6c6:	f103 0104 	add.w	r1, r3, #4
 800d6ca:	6029      	str	r1, [r5, #0]
 800d6cc:	d501      	bpl.n	800d6d2 <_printf_i+0xbe>
 800d6ce:	681e      	ldr	r6, [r3, #0]
 800d6d0:	e003      	b.n	800d6da <_printf_i+0xc6>
 800d6d2:	0646      	lsls	r6, r0, #25
 800d6d4:	d5fb      	bpl.n	800d6ce <_printf_i+0xba>
 800d6d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d6da:	2e00      	cmp	r6, #0
 800d6dc:	da03      	bge.n	800d6e6 <_printf_i+0xd2>
 800d6de:	232d      	movs	r3, #45	; 0x2d
 800d6e0:	4276      	negs	r6, r6
 800d6e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6e6:	485a      	ldr	r0, [pc, #360]	; (800d850 <_printf_i+0x23c>)
 800d6e8:	230a      	movs	r3, #10
 800d6ea:	e012      	b.n	800d712 <_printf_i+0xfe>
 800d6ec:	682b      	ldr	r3, [r5, #0]
 800d6ee:	6820      	ldr	r0, [r4, #0]
 800d6f0:	1d19      	adds	r1, r3, #4
 800d6f2:	6029      	str	r1, [r5, #0]
 800d6f4:	0605      	lsls	r5, r0, #24
 800d6f6:	d501      	bpl.n	800d6fc <_printf_i+0xe8>
 800d6f8:	681e      	ldr	r6, [r3, #0]
 800d6fa:	e002      	b.n	800d702 <_printf_i+0xee>
 800d6fc:	0641      	lsls	r1, r0, #25
 800d6fe:	d5fb      	bpl.n	800d6f8 <_printf_i+0xe4>
 800d700:	881e      	ldrh	r6, [r3, #0]
 800d702:	4853      	ldr	r0, [pc, #332]	; (800d850 <_printf_i+0x23c>)
 800d704:	2f6f      	cmp	r7, #111	; 0x6f
 800d706:	bf0c      	ite	eq
 800d708:	2308      	moveq	r3, #8
 800d70a:	230a      	movne	r3, #10
 800d70c:	2100      	movs	r1, #0
 800d70e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d712:	6865      	ldr	r5, [r4, #4]
 800d714:	60a5      	str	r5, [r4, #8]
 800d716:	2d00      	cmp	r5, #0
 800d718:	bfa2      	ittt	ge
 800d71a:	6821      	ldrge	r1, [r4, #0]
 800d71c:	f021 0104 	bicge.w	r1, r1, #4
 800d720:	6021      	strge	r1, [r4, #0]
 800d722:	b90e      	cbnz	r6, 800d728 <_printf_i+0x114>
 800d724:	2d00      	cmp	r5, #0
 800d726:	d04b      	beq.n	800d7c0 <_printf_i+0x1ac>
 800d728:	4615      	mov	r5, r2
 800d72a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d72e:	fb03 6711 	mls	r7, r3, r1, r6
 800d732:	5dc7      	ldrb	r7, [r0, r7]
 800d734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d738:	4637      	mov	r7, r6
 800d73a:	42bb      	cmp	r3, r7
 800d73c:	460e      	mov	r6, r1
 800d73e:	d9f4      	bls.n	800d72a <_printf_i+0x116>
 800d740:	2b08      	cmp	r3, #8
 800d742:	d10b      	bne.n	800d75c <_printf_i+0x148>
 800d744:	6823      	ldr	r3, [r4, #0]
 800d746:	07de      	lsls	r6, r3, #31
 800d748:	d508      	bpl.n	800d75c <_printf_i+0x148>
 800d74a:	6923      	ldr	r3, [r4, #16]
 800d74c:	6861      	ldr	r1, [r4, #4]
 800d74e:	4299      	cmp	r1, r3
 800d750:	bfde      	ittt	le
 800d752:	2330      	movle	r3, #48	; 0x30
 800d754:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d75c:	1b52      	subs	r2, r2, r5
 800d75e:	6122      	str	r2, [r4, #16]
 800d760:	f8cd a000 	str.w	sl, [sp]
 800d764:	464b      	mov	r3, r9
 800d766:	aa03      	add	r2, sp, #12
 800d768:	4621      	mov	r1, r4
 800d76a:	4640      	mov	r0, r8
 800d76c:	f7ff fee4 	bl	800d538 <_printf_common>
 800d770:	3001      	adds	r0, #1
 800d772:	d14a      	bne.n	800d80a <_printf_i+0x1f6>
 800d774:	f04f 30ff 	mov.w	r0, #4294967295
 800d778:	b004      	add	sp, #16
 800d77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	f043 0320 	orr.w	r3, r3, #32
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	4833      	ldr	r0, [pc, #204]	; (800d854 <_printf_i+0x240>)
 800d788:	2778      	movs	r7, #120	; 0x78
 800d78a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	6829      	ldr	r1, [r5, #0]
 800d792:	061f      	lsls	r7, r3, #24
 800d794:	f851 6b04 	ldr.w	r6, [r1], #4
 800d798:	d402      	bmi.n	800d7a0 <_printf_i+0x18c>
 800d79a:	065f      	lsls	r7, r3, #25
 800d79c:	bf48      	it	mi
 800d79e:	b2b6      	uxthmi	r6, r6
 800d7a0:	07df      	lsls	r7, r3, #31
 800d7a2:	bf48      	it	mi
 800d7a4:	f043 0320 	orrmi.w	r3, r3, #32
 800d7a8:	6029      	str	r1, [r5, #0]
 800d7aa:	bf48      	it	mi
 800d7ac:	6023      	strmi	r3, [r4, #0]
 800d7ae:	b91e      	cbnz	r6, 800d7b8 <_printf_i+0x1a4>
 800d7b0:	6823      	ldr	r3, [r4, #0]
 800d7b2:	f023 0320 	bic.w	r3, r3, #32
 800d7b6:	6023      	str	r3, [r4, #0]
 800d7b8:	2310      	movs	r3, #16
 800d7ba:	e7a7      	b.n	800d70c <_printf_i+0xf8>
 800d7bc:	4824      	ldr	r0, [pc, #144]	; (800d850 <_printf_i+0x23c>)
 800d7be:	e7e4      	b.n	800d78a <_printf_i+0x176>
 800d7c0:	4615      	mov	r5, r2
 800d7c2:	e7bd      	b.n	800d740 <_printf_i+0x12c>
 800d7c4:	682b      	ldr	r3, [r5, #0]
 800d7c6:	6826      	ldr	r6, [r4, #0]
 800d7c8:	6961      	ldr	r1, [r4, #20]
 800d7ca:	1d18      	adds	r0, r3, #4
 800d7cc:	6028      	str	r0, [r5, #0]
 800d7ce:	0635      	lsls	r5, r6, #24
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	d501      	bpl.n	800d7d8 <_printf_i+0x1c4>
 800d7d4:	6019      	str	r1, [r3, #0]
 800d7d6:	e002      	b.n	800d7de <_printf_i+0x1ca>
 800d7d8:	0670      	lsls	r0, r6, #25
 800d7da:	d5fb      	bpl.n	800d7d4 <_printf_i+0x1c0>
 800d7dc:	8019      	strh	r1, [r3, #0]
 800d7de:	2300      	movs	r3, #0
 800d7e0:	6123      	str	r3, [r4, #16]
 800d7e2:	4615      	mov	r5, r2
 800d7e4:	e7bc      	b.n	800d760 <_printf_i+0x14c>
 800d7e6:	682b      	ldr	r3, [r5, #0]
 800d7e8:	1d1a      	adds	r2, r3, #4
 800d7ea:	602a      	str	r2, [r5, #0]
 800d7ec:	681d      	ldr	r5, [r3, #0]
 800d7ee:	6862      	ldr	r2, [r4, #4]
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	f7f2 fd8c 	bl	8000310 <memchr>
 800d7f8:	b108      	cbz	r0, 800d7fe <_printf_i+0x1ea>
 800d7fa:	1b40      	subs	r0, r0, r5
 800d7fc:	6060      	str	r0, [r4, #4]
 800d7fe:	6863      	ldr	r3, [r4, #4]
 800d800:	6123      	str	r3, [r4, #16]
 800d802:	2300      	movs	r3, #0
 800d804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d808:	e7aa      	b.n	800d760 <_printf_i+0x14c>
 800d80a:	6923      	ldr	r3, [r4, #16]
 800d80c:	462a      	mov	r2, r5
 800d80e:	4649      	mov	r1, r9
 800d810:	4640      	mov	r0, r8
 800d812:	47d0      	blx	sl
 800d814:	3001      	adds	r0, #1
 800d816:	d0ad      	beq.n	800d774 <_printf_i+0x160>
 800d818:	6823      	ldr	r3, [r4, #0]
 800d81a:	079b      	lsls	r3, r3, #30
 800d81c:	d413      	bmi.n	800d846 <_printf_i+0x232>
 800d81e:	68e0      	ldr	r0, [r4, #12]
 800d820:	9b03      	ldr	r3, [sp, #12]
 800d822:	4298      	cmp	r0, r3
 800d824:	bfb8      	it	lt
 800d826:	4618      	movlt	r0, r3
 800d828:	e7a6      	b.n	800d778 <_printf_i+0x164>
 800d82a:	2301      	movs	r3, #1
 800d82c:	4632      	mov	r2, r6
 800d82e:	4649      	mov	r1, r9
 800d830:	4640      	mov	r0, r8
 800d832:	47d0      	blx	sl
 800d834:	3001      	adds	r0, #1
 800d836:	d09d      	beq.n	800d774 <_printf_i+0x160>
 800d838:	3501      	adds	r5, #1
 800d83a:	68e3      	ldr	r3, [r4, #12]
 800d83c:	9903      	ldr	r1, [sp, #12]
 800d83e:	1a5b      	subs	r3, r3, r1
 800d840:	42ab      	cmp	r3, r5
 800d842:	dcf2      	bgt.n	800d82a <_printf_i+0x216>
 800d844:	e7eb      	b.n	800d81e <_printf_i+0x20a>
 800d846:	2500      	movs	r5, #0
 800d848:	f104 0619 	add.w	r6, r4, #25
 800d84c:	e7f5      	b.n	800d83a <_printf_i+0x226>
 800d84e:	bf00      	nop
 800d850:	0800fd32 	.word	0x0800fd32
 800d854:	0800fd43 	.word	0x0800fd43

0800d858 <__sflush_r>:
 800d858:	898a      	ldrh	r2, [r1, #12]
 800d85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d85e:	4605      	mov	r5, r0
 800d860:	0710      	lsls	r0, r2, #28
 800d862:	460c      	mov	r4, r1
 800d864:	d458      	bmi.n	800d918 <__sflush_r+0xc0>
 800d866:	684b      	ldr	r3, [r1, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	dc05      	bgt.n	800d878 <__sflush_r+0x20>
 800d86c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d86e:	2b00      	cmp	r3, #0
 800d870:	dc02      	bgt.n	800d878 <__sflush_r+0x20>
 800d872:	2000      	movs	r0, #0
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d87a:	2e00      	cmp	r6, #0
 800d87c:	d0f9      	beq.n	800d872 <__sflush_r+0x1a>
 800d87e:	2300      	movs	r3, #0
 800d880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d884:	682f      	ldr	r7, [r5, #0]
 800d886:	6a21      	ldr	r1, [r4, #32]
 800d888:	602b      	str	r3, [r5, #0]
 800d88a:	d032      	beq.n	800d8f2 <__sflush_r+0x9a>
 800d88c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d88e:	89a3      	ldrh	r3, [r4, #12]
 800d890:	075a      	lsls	r2, r3, #29
 800d892:	d505      	bpl.n	800d8a0 <__sflush_r+0x48>
 800d894:	6863      	ldr	r3, [r4, #4]
 800d896:	1ac0      	subs	r0, r0, r3
 800d898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d89a:	b10b      	cbz	r3, 800d8a0 <__sflush_r+0x48>
 800d89c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d89e:	1ac0      	subs	r0, r0, r3
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8a6:	6a21      	ldr	r1, [r4, #32]
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	47b0      	blx	r6
 800d8ac:	1c43      	adds	r3, r0, #1
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	d106      	bne.n	800d8c0 <__sflush_r+0x68>
 800d8b2:	6829      	ldr	r1, [r5, #0]
 800d8b4:	291d      	cmp	r1, #29
 800d8b6:	d82b      	bhi.n	800d910 <__sflush_r+0xb8>
 800d8b8:	4a29      	ldr	r2, [pc, #164]	; (800d960 <__sflush_r+0x108>)
 800d8ba:	410a      	asrs	r2, r1
 800d8bc:	07d6      	lsls	r6, r2, #31
 800d8be:	d427      	bmi.n	800d910 <__sflush_r+0xb8>
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	6062      	str	r2, [r4, #4]
 800d8c4:	04d9      	lsls	r1, r3, #19
 800d8c6:	6922      	ldr	r2, [r4, #16]
 800d8c8:	6022      	str	r2, [r4, #0]
 800d8ca:	d504      	bpl.n	800d8d6 <__sflush_r+0x7e>
 800d8cc:	1c42      	adds	r2, r0, #1
 800d8ce:	d101      	bne.n	800d8d4 <__sflush_r+0x7c>
 800d8d0:	682b      	ldr	r3, [r5, #0]
 800d8d2:	b903      	cbnz	r3, 800d8d6 <__sflush_r+0x7e>
 800d8d4:	6560      	str	r0, [r4, #84]	; 0x54
 800d8d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8d8:	602f      	str	r7, [r5, #0]
 800d8da:	2900      	cmp	r1, #0
 800d8dc:	d0c9      	beq.n	800d872 <__sflush_r+0x1a>
 800d8de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8e2:	4299      	cmp	r1, r3
 800d8e4:	d002      	beq.n	800d8ec <__sflush_r+0x94>
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7ff fbe2 	bl	800d0b0 <_free_r>
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	6360      	str	r0, [r4, #52]	; 0x34
 800d8f0:	e7c0      	b.n	800d874 <__sflush_r+0x1c>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	47b0      	blx	r6
 800d8f8:	1c41      	adds	r1, r0, #1
 800d8fa:	d1c8      	bne.n	800d88e <__sflush_r+0x36>
 800d8fc:	682b      	ldr	r3, [r5, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0c5      	beq.n	800d88e <__sflush_r+0x36>
 800d902:	2b1d      	cmp	r3, #29
 800d904:	d001      	beq.n	800d90a <__sflush_r+0xb2>
 800d906:	2b16      	cmp	r3, #22
 800d908:	d101      	bne.n	800d90e <__sflush_r+0xb6>
 800d90a:	602f      	str	r7, [r5, #0]
 800d90c:	e7b1      	b.n	800d872 <__sflush_r+0x1a>
 800d90e:	89a3      	ldrh	r3, [r4, #12]
 800d910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d914:	81a3      	strh	r3, [r4, #12]
 800d916:	e7ad      	b.n	800d874 <__sflush_r+0x1c>
 800d918:	690f      	ldr	r7, [r1, #16]
 800d91a:	2f00      	cmp	r7, #0
 800d91c:	d0a9      	beq.n	800d872 <__sflush_r+0x1a>
 800d91e:	0793      	lsls	r3, r2, #30
 800d920:	680e      	ldr	r6, [r1, #0]
 800d922:	bf08      	it	eq
 800d924:	694b      	ldreq	r3, [r1, #20]
 800d926:	600f      	str	r7, [r1, #0]
 800d928:	bf18      	it	ne
 800d92a:	2300      	movne	r3, #0
 800d92c:	eba6 0807 	sub.w	r8, r6, r7
 800d930:	608b      	str	r3, [r1, #8]
 800d932:	f1b8 0f00 	cmp.w	r8, #0
 800d936:	dd9c      	ble.n	800d872 <__sflush_r+0x1a>
 800d938:	6a21      	ldr	r1, [r4, #32]
 800d93a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d93c:	4643      	mov	r3, r8
 800d93e:	463a      	mov	r2, r7
 800d940:	4628      	mov	r0, r5
 800d942:	47b0      	blx	r6
 800d944:	2800      	cmp	r0, #0
 800d946:	dc06      	bgt.n	800d956 <__sflush_r+0xfe>
 800d948:	89a3      	ldrh	r3, [r4, #12]
 800d94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d94e:	81a3      	strh	r3, [r4, #12]
 800d950:	f04f 30ff 	mov.w	r0, #4294967295
 800d954:	e78e      	b.n	800d874 <__sflush_r+0x1c>
 800d956:	4407      	add	r7, r0
 800d958:	eba8 0800 	sub.w	r8, r8, r0
 800d95c:	e7e9      	b.n	800d932 <__sflush_r+0xda>
 800d95e:	bf00      	nop
 800d960:	dfbffffe 	.word	0xdfbffffe

0800d964 <_fflush_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	690b      	ldr	r3, [r1, #16]
 800d968:	4605      	mov	r5, r0
 800d96a:	460c      	mov	r4, r1
 800d96c:	b913      	cbnz	r3, 800d974 <_fflush_r+0x10>
 800d96e:	2500      	movs	r5, #0
 800d970:	4628      	mov	r0, r5
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	b118      	cbz	r0, 800d97e <_fflush_r+0x1a>
 800d976:	6a03      	ldr	r3, [r0, #32]
 800d978:	b90b      	cbnz	r3, 800d97e <_fflush_r+0x1a>
 800d97a:	f7ff fa05 	bl	800cd88 <__sinit>
 800d97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0f3      	beq.n	800d96e <_fflush_r+0xa>
 800d986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d988:	07d0      	lsls	r0, r2, #31
 800d98a:	d404      	bmi.n	800d996 <_fflush_r+0x32>
 800d98c:	0599      	lsls	r1, r3, #22
 800d98e:	d402      	bmi.n	800d996 <_fflush_r+0x32>
 800d990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d992:	f7ff fb5e 	bl	800d052 <__retarget_lock_acquire_recursive>
 800d996:	4628      	mov	r0, r5
 800d998:	4621      	mov	r1, r4
 800d99a:	f7ff ff5d 	bl	800d858 <__sflush_r>
 800d99e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9a0:	07da      	lsls	r2, r3, #31
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	d4e4      	bmi.n	800d970 <_fflush_r+0xc>
 800d9a6:	89a3      	ldrh	r3, [r4, #12]
 800d9a8:	059b      	lsls	r3, r3, #22
 800d9aa:	d4e1      	bmi.n	800d970 <_fflush_r+0xc>
 800d9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9ae:	f7ff fb51 	bl	800d054 <__retarget_lock_release_recursive>
 800d9b2:	e7dd      	b.n	800d970 <_fflush_r+0xc>

0800d9b4 <fiprintf>:
 800d9b4:	b40e      	push	{r1, r2, r3}
 800d9b6:	b503      	push	{r0, r1, lr}
 800d9b8:	4601      	mov	r1, r0
 800d9ba:	ab03      	add	r3, sp, #12
 800d9bc:	4805      	ldr	r0, [pc, #20]	; (800d9d4 <fiprintf+0x20>)
 800d9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c2:	6800      	ldr	r0, [r0, #0]
 800d9c4:	9301      	str	r3, [sp, #4]
 800d9c6:	f7ff fc9d 	bl	800d304 <_vfiprintf_r>
 800d9ca:	b002      	add	sp, #8
 800d9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9d0:	b003      	add	sp, #12
 800d9d2:	4770      	bx	lr
 800d9d4:	24000088 	.word	0x24000088

0800d9d8 <__swbuf_r>:
 800d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9da:	460e      	mov	r6, r1
 800d9dc:	4614      	mov	r4, r2
 800d9de:	4605      	mov	r5, r0
 800d9e0:	b118      	cbz	r0, 800d9ea <__swbuf_r+0x12>
 800d9e2:	6a03      	ldr	r3, [r0, #32]
 800d9e4:	b90b      	cbnz	r3, 800d9ea <__swbuf_r+0x12>
 800d9e6:	f7ff f9cf 	bl	800cd88 <__sinit>
 800d9ea:	69a3      	ldr	r3, [r4, #24]
 800d9ec:	60a3      	str	r3, [r4, #8]
 800d9ee:	89a3      	ldrh	r3, [r4, #12]
 800d9f0:	071a      	lsls	r2, r3, #28
 800d9f2:	d525      	bpl.n	800da40 <__swbuf_r+0x68>
 800d9f4:	6923      	ldr	r3, [r4, #16]
 800d9f6:	b31b      	cbz	r3, 800da40 <__swbuf_r+0x68>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	6922      	ldr	r2, [r4, #16]
 800d9fc:	1a98      	subs	r0, r3, r2
 800d9fe:	6963      	ldr	r3, [r4, #20]
 800da00:	b2f6      	uxtb	r6, r6
 800da02:	4283      	cmp	r3, r0
 800da04:	4637      	mov	r7, r6
 800da06:	dc04      	bgt.n	800da12 <__swbuf_r+0x3a>
 800da08:	4621      	mov	r1, r4
 800da0a:	4628      	mov	r0, r5
 800da0c:	f7ff ffaa 	bl	800d964 <_fflush_r>
 800da10:	b9e0      	cbnz	r0, 800da4c <__swbuf_r+0x74>
 800da12:	68a3      	ldr	r3, [r4, #8]
 800da14:	3b01      	subs	r3, #1
 800da16:	60a3      	str	r3, [r4, #8]
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	6022      	str	r2, [r4, #0]
 800da1e:	701e      	strb	r6, [r3, #0]
 800da20:	6962      	ldr	r2, [r4, #20]
 800da22:	1c43      	adds	r3, r0, #1
 800da24:	429a      	cmp	r2, r3
 800da26:	d004      	beq.n	800da32 <__swbuf_r+0x5a>
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	07db      	lsls	r3, r3, #31
 800da2c:	d506      	bpl.n	800da3c <__swbuf_r+0x64>
 800da2e:	2e0a      	cmp	r6, #10
 800da30:	d104      	bne.n	800da3c <__swbuf_r+0x64>
 800da32:	4621      	mov	r1, r4
 800da34:	4628      	mov	r0, r5
 800da36:	f7ff ff95 	bl	800d964 <_fflush_r>
 800da3a:	b938      	cbnz	r0, 800da4c <__swbuf_r+0x74>
 800da3c:	4638      	mov	r0, r7
 800da3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da40:	4621      	mov	r1, r4
 800da42:	4628      	mov	r0, r5
 800da44:	f000 f806 	bl	800da54 <__swsetup_r>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d0d5      	beq.n	800d9f8 <__swbuf_r+0x20>
 800da4c:	f04f 37ff 	mov.w	r7, #4294967295
 800da50:	e7f4      	b.n	800da3c <__swbuf_r+0x64>
	...

0800da54 <__swsetup_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4b2a      	ldr	r3, [pc, #168]	; (800db00 <__swsetup_r+0xac>)
 800da58:	4605      	mov	r5, r0
 800da5a:	6818      	ldr	r0, [r3, #0]
 800da5c:	460c      	mov	r4, r1
 800da5e:	b118      	cbz	r0, 800da68 <__swsetup_r+0x14>
 800da60:	6a03      	ldr	r3, [r0, #32]
 800da62:	b90b      	cbnz	r3, 800da68 <__swsetup_r+0x14>
 800da64:	f7ff f990 	bl	800cd88 <__sinit>
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da6e:	0718      	lsls	r0, r3, #28
 800da70:	d422      	bmi.n	800dab8 <__swsetup_r+0x64>
 800da72:	06d9      	lsls	r1, r3, #27
 800da74:	d407      	bmi.n	800da86 <__swsetup_r+0x32>
 800da76:	2309      	movs	r3, #9
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da7e:	81a3      	strh	r3, [r4, #12]
 800da80:	f04f 30ff 	mov.w	r0, #4294967295
 800da84:	e034      	b.n	800daf0 <__swsetup_r+0x9c>
 800da86:	0758      	lsls	r0, r3, #29
 800da88:	d512      	bpl.n	800dab0 <__swsetup_r+0x5c>
 800da8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da8c:	b141      	cbz	r1, 800daa0 <__swsetup_r+0x4c>
 800da8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da92:	4299      	cmp	r1, r3
 800da94:	d002      	beq.n	800da9c <__swsetup_r+0x48>
 800da96:	4628      	mov	r0, r5
 800da98:	f7ff fb0a 	bl	800d0b0 <_free_r>
 800da9c:	2300      	movs	r3, #0
 800da9e:	6363      	str	r3, [r4, #52]	; 0x34
 800daa0:	89a3      	ldrh	r3, [r4, #12]
 800daa2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800daa6:	81a3      	strh	r3, [r4, #12]
 800daa8:	2300      	movs	r3, #0
 800daaa:	6063      	str	r3, [r4, #4]
 800daac:	6923      	ldr	r3, [r4, #16]
 800daae:	6023      	str	r3, [r4, #0]
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	f043 0308 	orr.w	r3, r3, #8
 800dab6:	81a3      	strh	r3, [r4, #12]
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	b94b      	cbnz	r3, 800dad0 <__swsetup_r+0x7c>
 800dabc:	89a3      	ldrh	r3, [r4, #12]
 800dabe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dac6:	d003      	beq.n	800dad0 <__swsetup_r+0x7c>
 800dac8:	4621      	mov	r1, r4
 800daca:	4628      	mov	r0, r5
 800dacc:	f000 f857 	bl	800db7e <__smakebuf_r>
 800dad0:	89a0      	ldrh	r0, [r4, #12]
 800dad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dad6:	f010 0301 	ands.w	r3, r0, #1
 800dada:	d00a      	beq.n	800daf2 <__swsetup_r+0x9e>
 800dadc:	2300      	movs	r3, #0
 800dade:	60a3      	str	r3, [r4, #8]
 800dae0:	6963      	ldr	r3, [r4, #20]
 800dae2:	425b      	negs	r3, r3
 800dae4:	61a3      	str	r3, [r4, #24]
 800dae6:	6923      	ldr	r3, [r4, #16]
 800dae8:	b943      	cbnz	r3, 800dafc <__swsetup_r+0xa8>
 800daea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800daee:	d1c4      	bne.n	800da7a <__swsetup_r+0x26>
 800daf0:	bd38      	pop	{r3, r4, r5, pc}
 800daf2:	0781      	lsls	r1, r0, #30
 800daf4:	bf58      	it	pl
 800daf6:	6963      	ldrpl	r3, [r4, #20]
 800daf8:	60a3      	str	r3, [r4, #8]
 800dafa:	e7f4      	b.n	800dae6 <__swsetup_r+0x92>
 800dafc:	2000      	movs	r0, #0
 800dafe:	e7f7      	b.n	800daf0 <__swsetup_r+0x9c>
 800db00:	24000088 	.word	0x24000088

0800db04 <_sbrk_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	4d06      	ldr	r5, [pc, #24]	; (800db20 <_sbrk_r+0x1c>)
 800db08:	2300      	movs	r3, #0
 800db0a:	4604      	mov	r4, r0
 800db0c:	4608      	mov	r0, r1
 800db0e:	602b      	str	r3, [r5, #0]
 800db10:	f7f2 fe9e 	bl	8000850 <_sbrk>
 800db14:	1c43      	adds	r3, r0, #1
 800db16:	d102      	bne.n	800db1e <_sbrk_r+0x1a>
 800db18:	682b      	ldr	r3, [r5, #0]
 800db1a:	b103      	cbz	r3, 800db1e <_sbrk_r+0x1a>
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	bd38      	pop	{r3, r4, r5, pc}
 800db20:	240107ec 	.word	0x240107ec

0800db24 <abort>:
 800db24:	b508      	push	{r3, lr}
 800db26:	2006      	movs	r0, #6
 800db28:	f000 f88e 	bl	800dc48 <raise>
 800db2c:	2001      	movs	r0, #1
 800db2e:	f7f2 fe5f 	bl	80007f0 <_exit>

0800db32 <__swhatbuf_r>:
 800db32:	b570      	push	{r4, r5, r6, lr}
 800db34:	460c      	mov	r4, r1
 800db36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db3a:	2900      	cmp	r1, #0
 800db3c:	b096      	sub	sp, #88	; 0x58
 800db3e:	4615      	mov	r5, r2
 800db40:	461e      	mov	r6, r3
 800db42:	da0d      	bge.n	800db60 <__swhatbuf_r+0x2e>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db4a:	f04f 0100 	mov.w	r1, #0
 800db4e:	bf0c      	ite	eq
 800db50:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800db54:	2340      	movne	r3, #64	; 0x40
 800db56:	2000      	movs	r0, #0
 800db58:	6031      	str	r1, [r6, #0]
 800db5a:	602b      	str	r3, [r5, #0]
 800db5c:	b016      	add	sp, #88	; 0x58
 800db5e:	bd70      	pop	{r4, r5, r6, pc}
 800db60:	466a      	mov	r2, sp
 800db62:	f000 f879 	bl	800dc58 <_fstat_r>
 800db66:	2800      	cmp	r0, #0
 800db68:	dbec      	blt.n	800db44 <__swhatbuf_r+0x12>
 800db6a:	9901      	ldr	r1, [sp, #4]
 800db6c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db70:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db74:	4259      	negs	r1, r3
 800db76:	4159      	adcs	r1, r3
 800db78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db7c:	e7eb      	b.n	800db56 <__swhatbuf_r+0x24>

0800db7e <__smakebuf_r>:
 800db7e:	898b      	ldrh	r3, [r1, #12]
 800db80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db82:	079d      	lsls	r5, r3, #30
 800db84:	4606      	mov	r6, r0
 800db86:	460c      	mov	r4, r1
 800db88:	d507      	bpl.n	800db9a <__smakebuf_r+0x1c>
 800db8a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db8e:	6023      	str	r3, [r4, #0]
 800db90:	6123      	str	r3, [r4, #16]
 800db92:	2301      	movs	r3, #1
 800db94:	6163      	str	r3, [r4, #20]
 800db96:	b002      	add	sp, #8
 800db98:	bd70      	pop	{r4, r5, r6, pc}
 800db9a:	ab01      	add	r3, sp, #4
 800db9c:	466a      	mov	r2, sp
 800db9e:	f7ff ffc8 	bl	800db32 <__swhatbuf_r>
 800dba2:	9900      	ldr	r1, [sp, #0]
 800dba4:	4605      	mov	r5, r0
 800dba6:	4630      	mov	r0, r6
 800dba8:	f7ff faf6 	bl	800d198 <_malloc_r>
 800dbac:	b948      	cbnz	r0, 800dbc2 <__smakebuf_r+0x44>
 800dbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbb2:	059a      	lsls	r2, r3, #22
 800dbb4:	d4ef      	bmi.n	800db96 <__smakebuf_r+0x18>
 800dbb6:	f023 0303 	bic.w	r3, r3, #3
 800dbba:	f043 0302 	orr.w	r3, r3, #2
 800dbbe:	81a3      	strh	r3, [r4, #12]
 800dbc0:	e7e3      	b.n	800db8a <__smakebuf_r+0xc>
 800dbc2:	89a3      	ldrh	r3, [r4, #12]
 800dbc4:	6020      	str	r0, [r4, #0]
 800dbc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbca:	81a3      	strh	r3, [r4, #12]
 800dbcc:	9b00      	ldr	r3, [sp, #0]
 800dbce:	6163      	str	r3, [r4, #20]
 800dbd0:	9b01      	ldr	r3, [sp, #4]
 800dbd2:	6120      	str	r0, [r4, #16]
 800dbd4:	b15b      	cbz	r3, 800dbee <__smakebuf_r+0x70>
 800dbd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f000 f84e 	bl	800dc7c <_isatty_r>
 800dbe0:	b128      	cbz	r0, 800dbee <__smakebuf_r+0x70>
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	f023 0303 	bic.w	r3, r3, #3
 800dbe8:	f043 0301 	orr.w	r3, r3, #1
 800dbec:	81a3      	strh	r3, [r4, #12]
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	431d      	orrs	r5, r3
 800dbf2:	81a5      	strh	r5, [r4, #12]
 800dbf4:	e7cf      	b.n	800db96 <__smakebuf_r+0x18>

0800dbf6 <_raise_r>:
 800dbf6:	291f      	cmp	r1, #31
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	460d      	mov	r5, r1
 800dbfe:	d904      	bls.n	800dc0a <_raise_r+0x14>
 800dc00:	2316      	movs	r3, #22
 800dc02:	6003      	str	r3, [r0, #0]
 800dc04:	f04f 30ff 	mov.w	r0, #4294967295
 800dc08:	bd38      	pop	{r3, r4, r5, pc}
 800dc0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc0c:	b112      	cbz	r2, 800dc14 <_raise_r+0x1e>
 800dc0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc12:	b94b      	cbnz	r3, 800dc28 <_raise_r+0x32>
 800dc14:	4620      	mov	r0, r4
 800dc16:	f000 f853 	bl	800dcc0 <_getpid_r>
 800dc1a:	462a      	mov	r2, r5
 800dc1c:	4601      	mov	r1, r0
 800dc1e:	4620      	mov	r0, r4
 800dc20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc24:	f000 b83a 	b.w	800dc9c <_kill_r>
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d00a      	beq.n	800dc42 <_raise_r+0x4c>
 800dc2c:	1c59      	adds	r1, r3, #1
 800dc2e:	d103      	bne.n	800dc38 <_raise_r+0x42>
 800dc30:	2316      	movs	r3, #22
 800dc32:	6003      	str	r3, [r0, #0]
 800dc34:	2001      	movs	r0, #1
 800dc36:	e7e7      	b.n	800dc08 <_raise_r+0x12>
 800dc38:	2400      	movs	r4, #0
 800dc3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	4798      	blx	r3
 800dc42:	2000      	movs	r0, #0
 800dc44:	e7e0      	b.n	800dc08 <_raise_r+0x12>
	...

0800dc48 <raise>:
 800dc48:	4b02      	ldr	r3, [pc, #8]	; (800dc54 <raise+0xc>)
 800dc4a:	4601      	mov	r1, r0
 800dc4c:	6818      	ldr	r0, [r3, #0]
 800dc4e:	f7ff bfd2 	b.w	800dbf6 <_raise_r>
 800dc52:	bf00      	nop
 800dc54:	24000088 	.word	0x24000088

0800dc58 <_fstat_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	4d07      	ldr	r5, [pc, #28]	; (800dc78 <_fstat_r+0x20>)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4604      	mov	r4, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	4611      	mov	r1, r2
 800dc64:	602b      	str	r3, [r5, #0]
 800dc66:	f7f2 fde9 	bl	800083c <_fstat>
 800dc6a:	1c43      	adds	r3, r0, #1
 800dc6c:	d102      	bne.n	800dc74 <_fstat_r+0x1c>
 800dc6e:	682b      	ldr	r3, [r5, #0]
 800dc70:	b103      	cbz	r3, 800dc74 <_fstat_r+0x1c>
 800dc72:	6023      	str	r3, [r4, #0]
 800dc74:	bd38      	pop	{r3, r4, r5, pc}
 800dc76:	bf00      	nop
 800dc78:	240107ec 	.word	0x240107ec

0800dc7c <_isatty_r>:
 800dc7c:	b538      	push	{r3, r4, r5, lr}
 800dc7e:	4d06      	ldr	r5, [pc, #24]	; (800dc98 <_isatty_r+0x1c>)
 800dc80:	2300      	movs	r3, #0
 800dc82:	4604      	mov	r4, r0
 800dc84:	4608      	mov	r0, r1
 800dc86:	602b      	str	r3, [r5, #0]
 800dc88:	f7f2 fdde 	bl	8000848 <_isatty>
 800dc8c:	1c43      	adds	r3, r0, #1
 800dc8e:	d102      	bne.n	800dc96 <_isatty_r+0x1a>
 800dc90:	682b      	ldr	r3, [r5, #0]
 800dc92:	b103      	cbz	r3, 800dc96 <_isatty_r+0x1a>
 800dc94:	6023      	str	r3, [r4, #0]
 800dc96:	bd38      	pop	{r3, r4, r5, pc}
 800dc98:	240107ec 	.word	0x240107ec

0800dc9c <_kill_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4d07      	ldr	r5, [pc, #28]	; (800dcbc <_kill_r+0x20>)
 800dca0:	2300      	movs	r3, #0
 800dca2:	4604      	mov	r4, r0
 800dca4:	4608      	mov	r0, r1
 800dca6:	4611      	mov	r1, r2
 800dca8:	602b      	str	r3, [r5, #0]
 800dcaa:	f7f2 fd99 	bl	80007e0 <_kill>
 800dcae:	1c43      	adds	r3, r0, #1
 800dcb0:	d102      	bne.n	800dcb8 <_kill_r+0x1c>
 800dcb2:	682b      	ldr	r3, [r5, #0]
 800dcb4:	b103      	cbz	r3, 800dcb8 <_kill_r+0x1c>
 800dcb6:	6023      	str	r3, [r4, #0]
 800dcb8:	bd38      	pop	{r3, r4, r5, pc}
 800dcba:	bf00      	nop
 800dcbc:	240107ec 	.word	0x240107ec

0800dcc0 <_getpid_r>:
 800dcc0:	f7f2 bd8c 	b.w	80007dc <_getpid>

0800dcc4 <_init>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	bf00      	nop
 800dcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcca:	bc08      	pop	{r3}
 800dccc:	469e      	mov	lr, r3
 800dcce:	4770      	bx	lr

0800dcd0 <_fini>:
 800dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd2:	bf00      	nop
 800dcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcd6:	bc08      	pop	{r3}
 800dcd8:	469e      	mov	lr, r3
 800dcda:	4770      	bx	lr
